<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建</title>
    <url>/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/">https://git-scm.com/</a></p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p>
<p>选择LTS版本</p>
<h2 id="配置Github仓库"><a href="#配置Github仓库" class="headerlink" title="配置Github仓库"></a>配置Github仓库</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>新建仓库为username.github.io</p>
<p>orientalglass.github.io</p>
<p>点击创建即可</p>
<h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><p>首先打开安装的GitBash</p>
<h4 id="配置Github账户信息"><a href="#配置Github账户信息" class="headerlink" title="配置Github账户信息"></a>配置Github账户信息</h4><p>按如下方式设置用户名和GitHub绑定的邮箱</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3_%E8%AE%BE%E7%BD%AE%E8%B4%A6%E6%88%B7.png" alt="3  设置账户"></p>
<h4 id="生成SHH密钥"><a href="#生成SHH密钥" class="headerlink" title="生成SHH密钥"></a>生成SHH密钥</h4><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>之后会生成一个文件夹,打开该文件夹</p>
<p>在GitBash窗口按三次回车后会在文件夹生成id_rsa.pub密钥文件</p>
<p>记事本打开密钥文件复制密钥</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4_%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5.png" alt="4 生成密钥"></p>
<h4 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加SSH Key</h4><p>Github上点击头像 选择settings 选择 SSH And GPG Keys</p>
<p>点击New SHH Key</p>
<p>复制密钥内容 AddShhKey即可</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/6_SiginKey.png" alt="6 SiginKey"></p>
<h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>创建Blog文件夹,用VsCode打开,通过终端输入命令</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用命令安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>终端运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1_hexoinit.png"></p>
<h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="打开本地服务器进行预览"><a href="#打开本地服务器进行预览" class="headerlink" title="打开本地服务器进行预览"></a>打开本地服务器进行预览</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>浏览器打开<a href="http://localhost:4000/%E5%8D%B3%E5%8F%AF">http://localhost:4000/即可</a></p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2_hexo%E7%95%8C%E9%9D%A2.png"></p>
<h2 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h2><p>首先设置_config.yml文件 翻到最下方设置如下 </p>
<p>注意这里的repo链接是github.com&#x2F;github用户名&#x2F;仓库名.git</p>
<p>branch要使用master</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/7_config.png" alt="7 config"></p>
<p>再在终端安装deployer插件</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/8_%E5%AE%89%E8%A3%85deployer%E6%8F%92%E4%BB%B6.png" alt="8 安装deployer插件"></p>
<p>依次执行下面三个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>最后出现Deploy done:git则说明上传成功</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/9_%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png" alt="9 上传成功"></p>
<p>此时Github仓库已经加载文件,等待一会后即可查看网页</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10_%E6%B5%8F%E8%A7%88github.io.png" alt="10 浏览github.io"></p>
<h1 id="安装配置Bufferfly主题"><a href="#安装配置Bufferfly主题" class="headerlink" title="安装配置Bufferfly主题"></a>安装配置Bufferfly主题</h1><h2 id="安装Butterfly主题"><a href="#安装Butterfly主题" class="headerlink" title="安装Butterfly主题"></a>安装Butterfly主题</h2><ol>
<li>根目录打开终端使用命令安装</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>下载 pug 以及 stylus 的渲染器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置默认主题</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/11_%E5%90%AF%E5%8A%A8butterfly%E4%B8%BB%E9%A2%98.png" alt="11 启动butterfly主题"></p>
</li>
</ol>
<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><p>Hexo 是一个基于 Node.js 的静态博客生成器，它使用 Markdown 文件来创建博客文章，并通过主题来渲染生成静态网页。下面是一些常用的 Hexo 主题命令：</p>
<ol>
<li><p>安装 Hexo 主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-&lt;theme-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用 Hexo 主题：<br>在 Hexo 的配置文件 <code>_config.yml</code> 中，将 <code>theme</code> 属性设置为主题名称：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">&lt;theme-name&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成静态网页：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动本地服务器并预览网站：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除缓存文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一篇文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布草稿（将草稿状态的文章发布为正式文章）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除一篇文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo delete &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑一篇文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo edit &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用草稿模式（创建草稿状态的文章）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;post-title&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这些是一些常用的 Hexo 主题命令，你可以根据自己的需求和具体的主题进行相应的操作。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Connection-was-Reset"><a href="#Connection-was-Reset" class="headerlink" title="Connection was Reset"></a>Connection was Reset</h2><p>问题描述: hexo d 上传文件时报错</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%981_%E8%BF%9E%E6%8E%A5reset.png" alt="问题1 连接reset"></p>
<p>解决办法: 由于github的http链接被墙,http链接改为git链接即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:OrientalGlass/orientalglass.github.io.git</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/OrientalGlass/orientalglass.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="上传图片问题"><a href="#上传图片问题" class="headerlink" title="上传图片问题"></a>上传图片问题</h2><p><strong>注意: 图片名不要有空格,否则会导致hexo无法解析,可将空格替换为下划线</strong></p>
<p>参考文章: </p>
<p><a href="https://juejin.cn/post/6882619951857811469">hexo博客中如何插入图片</a></p>
<p><a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E5%85%A8%E5%B1%80%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">资源文件夹</a></p>
<ol>
<li><p>设置post_asset_folder</p>
<p>将根目录配置中的<strong>post_asset_folder</strong>设置为true</p>
<p>之后每次使用hexo new “filename”创建文章时会自动生成同名文件夹用于存储图片</p>
</li>
<li><p>安装renderer插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>

<p>安装后修改根目录配置如下</p>
<p>添加marked这两个字段并设置为true</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%982_%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png"></p>
<p>该插件用于解析图片路径</p>
</li>
<li><p>修改typora插入图片设置</p>
<p>这样设置之后每次复制图片都会自动存储到markdown文件的同名文件夹下,方便复制图片</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%982_%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.png" alt="问题2_偏好设置"></p>
</li>
<li><p>复制markdown文件时,将所有图片路径中的**文件名&#x2F;**去除</p>
<p>这是由于经过上述设置后文章会自动转换为index.html文件,同时<strong>图片和html文件在同一文件夹内</strong></p>
<p>故直接用图片文件名即可引用图片,不需要加文件夹名</p>
<p>删除方法: ctrl+f 查找引用 找到后右键更改所有匹配项即可</p>
</li>
</ol>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%982_%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="问题2_生成文件路径"></p>
]]></content>
      <categories>
        <category>经验总结</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>WMCTF2023_ezAndorid</title>
    <url>/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/</url>
    <content><![CDATA[<h1 id="Java层逻辑"><a href="#Java层逻辑" class="headerlink" title="Java层逻辑"></a>Java层逻辑</h1><p>Java层并不复杂 判断用户名和密码 这两个函数都是native函数</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/%E4%B8%BB%E5%87%BD%E6%95%B0.png" alt="主函数"></p>
<h1 id="JNI-OnLoad"><a href="#JNI-OnLoad" class="headerlink" title="JNI_OnLoad"></a>JNI_OnLoad</h1><p>找不到对应的JNI函数,可以在JNI_OnLoad中看到恢复字符串并注册函数</p>
<p>这里也给出了函数地址,直接跟进即可</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/JNI_Onload.png" alt="JNI_Onload"></p>
<h1 id="CheckUsername"><a href="#CheckUsername" class="headerlink" title="CheckUsername"></a>CheckUsername</h1><p>刚开始有个获取字符串的操作</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/getUsername.png" alt="getUsername"></p>
<p>先有一个解密得到key的操作,该key用于下面的rc4加密</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/RC4Key.png" alt="RC4Key"></p>
<p>RC4加密后进行比较 encData可以动调得到</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/%E5%8A%A8%E8%B0%83%E6%8B%BFencData.png" alt="动调拿encName"></p>
<p>跟进RC4可以发现最后多异或了一个循环变量k 其他地方和标准RC4相同</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/RC4%E9%AD%94%E6%94%B9%E7%82%B9.png" alt="RC4魔改点"></p>
<p>解密脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key, data</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化S盒</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">        key_length = <span class="built_in">len</span>(key)</span><br><span class="line">        S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成密钥流</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S, length</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        key_stream = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            key_stream.append(S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> key_stream</span><br><span class="line"></span><br><span class="line">    S = KSA(key)  <span class="comment"># 初始化S盒</span></span><br><span class="line">    key_stream = PRGA(S, <span class="built_in">len</span>(data))  <span class="comment"># 生成密钥流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># #打印密钥流内容</span></span><br><span class="line">    <span class="comment"># for i in range(len( key_stream)):</span></span><br><span class="line">    <span class="comment">#     print(hex(key_stream[i]),end=&#x27; &#x27;)</span></span><br><span class="line">    <span class="comment">#     if (i+1)%10==0 :</span></span><br><span class="line">    <span class="comment">#         print()</span></span><br><span class="line">    </span><br><span class="line">    result = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="comment">#print(chr(data[i]^i ^ key_stream[i]),end=&#x27;&#x27;)</span></span><br><span class="line">        result.append(data[i]^i ^ key_stream[i])  <span class="comment"># 异或运算得到加密/解密结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line">data=[<span class="number">0xE9</span>, <span class="number">0x97</span>, <span class="number">0x64</span>, <span class="number">0xE6</span>, <span class="number">0x7E</span>, <span class="number">0xEB</span>, <span class="number">0xBD</span>, <span class="number">0xC1</span>, <span class="number">0xAB</span>, <span class="number">0x43</span>]</span><br><span class="line">key=<span class="string">b&#x27;12345678&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(RC4(key,data))<span class="comment">#Re_1s_eaSy</span></span><br></pre></td></tr></table></figure>

<p>所以<strong>UserName&#x3D;Re_1s_eaSy</strong></p>
<h1 id="check2"><a href="#check2" class="headerlink" title="check2"></a>check2</h1><p>还原字符串并获取输入passwd 比较关键的是获取了key用于AES加密</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/AESKey.png" alt="AESKey"></p>
<p>AES加密入口和比较函数 可以看出passwd长度为16</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/AESEnc.png" alt="AESEnc"></p>
<p>passwdData可以动调得到或者按x交叉引用找到赋值函数 xmmword_7948CCFE1A中保存了对应数据</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/GetpasswdData.png" alt="GetpasswdData"></p>
<p>跟进AES加密函数</p>
<p>这里函数修改了SBOX </p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/%E4%BF%AE%E6%94%B9sbox.png" alt="修改sbox"></p>
<p>往下翻大概梳理清AES加密过程</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/AES%E8%BD%AE%E5%8A%A0%E5%AF%86.png" alt="AES轮加密"></p>
<p>由于字节代换操作中会使用到sbox,所以可以在字节代换函数处断点找到魔改后的sbox 跟进Sub_Bytes找到这个函数</p>
<p><img src="E:\HappyBinary\Competitions\WMCTF2023\ezAndroid\subBytesFunc.png" alt="subBytesFunc"></p>
<p>再跟进可以发现调用了SBOX</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/getSbox.png" alt="getSbox"></p>
<p>动调得到修改后的sbox</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/sbox%E5%92%8C%E8%BD%AE%E5%AF%86%E9%92%A5%E5%B8%B8%E9%87%8F.png" alt="sbox和轮密钥常量"></p>
<p>解题脚本</p>
<p>首先要求出逆sbox</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">uint8_t</span> S_BOX[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0x40</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0xCA</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0xF5</span>, <span class="number">0x0C</span>, <span class="number">0x23</span>, <span class="number">0x3A</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x7F</span>, <span class="number">0x96</span>, <span class="number">0xAD</span>, <span class="number">0xC4</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x37</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x93</span>, <span class="number">0xAA</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xD8</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x90</span>,</span><br><span class="line">        <span class="number">0xA7</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xEC</span>, <span class="number">0x03</span>, <span class="number">0x1A</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x5F</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xBB</span>, <span class="number">0xD2</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x2E</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0xA1</span>, <span class="number">0xB8</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0xFD</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0x9E</span>, <span class="number">0xB5</span>, <span class="number">0xCC</span>, <span class="number">0xE3</span>, <span class="number">0xFA</span>, <span class="number">0x11</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x84</span>, <span class="number">0x9B</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x25</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x6A</span>, <span class="number">0x81</span>, <span class="number">0x98</span>, <span class="number">0xAF</span>, <span class="number">0xC6</span>, <span class="number">0xDD</span>, <span class="number">0xF4</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x22</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x36</span>, <span class="number">0x4D</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xA9</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x33</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x75</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0xD1</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x16</span>, <span class="number">0x2D</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xB7</span>, <span class="number">0xCE</span>, <span class="number">0xE5</span>, <span class="number">0xFC</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xCB</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x83</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x97</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x4C</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x60</span>, <span class="number">0x77</span>, <span class="number">0x8E</span>, <span class="number">0xA5</span>, <span class="number">0xBC</span>,</span><br><span class="line">        <span class="number">0xD3</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0xB9</span>, <span class="number">0xD0</span>, <span class="number">0xE7</span>, <span class="number">0xFE</span>, <span class="number">0x15</span>, <span class="number">0x2C</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x88</span>,</span><br><span class="line">        <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xCD</span>, <span class="number">0xE4</span>, <span class="number">0xFB</span>, <span class="number">0x12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> Te_InvS[<span class="number">16</span>][<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;        <span class="comment">//逆S盒缓存</span></span><br><span class="line">    <span class="type">uint8_t</span> Te_InVSAdd[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;            <span class="comment">//位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;                    <span class="comment">//计算逆S盒</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> n = <span class="number">0</span>; n &lt; <span class="number">16</span>; n++) &#123;</span><br><span class="line">            Te_InVSAdd[<span class="number">0</span>] = (S_BOX[i*<span class="number">16</span>+n] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>;        <span class="comment">//取行</span></span><br><span class="line">            Te_InVSAdd[<span class="number">1</span>] = (S_BOX[i*<span class="number">16</span>+n] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0x0f</span>;        <span class="comment">//取列</span></span><br><span class="line">            Te_InvS[Te_InVSAdd[<span class="number">0</span>]][Te_InVSAdd[<span class="number">1</span>]] = i * <span class="number">16</span> + n;        <span class="comment">//置值</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">16</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#x,&quot;</span>, Te_InvS[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到逆sbox</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ReSbox[<span class="number">256</span>] = &#123; <span class="number">0x41</span>,<span class="number">0xe8</span>,<span class="number">0x8f</span>,<span class="number">0x36</span>,<span class="number">0xdd</span>,<span class="number">0x84</span>,<span class="number">0x2b</span>,<span class="number">0xd2</span>,<span class="number">0x79</span>,<span class="number">0x20</span>,<span class="number">0xc7</span>,<span class="number">0x6e</span>,<span class="number">0x15</span>,<span class="number">0xbc</span>,<span class="number">0x63</span>,<span class="number">0xa</span>,<span class="number">0xb1</span>,<span class="number">0x58</span>,<span class="number">0xff</span>,<span class="number">0xa6</span>,<span class="number">0x4d</span>,<span class="number">0xf4</span>,<span class="number">0x9b</span>,<span class="number">0x42</span>,<span class="number">0xe9</span>,<span class="number">0x90</span>,<span class="number">0x37</span>,<span class="number">0xde</span>,<span class="number">0x85</span>,<span class="number">0x2c</span>,<span class="number">0xd3</span>,<span class="number">0x7a</span>,<span class="number">0x21</span>,<span class="number">0xc8</span>,<span class="number">0x6f</span>,<span class="number">0x16</span>,<span class="number">0xbd</span>,<span class="number">0x64</span>,<span class="number">0xb</span>,<span class="number">0xb2</span>,<span class="number">0x59</span>,<span class="number">0</span>,<span class="number">0xa7</span>,<span class="number">0x4e</span>,<span class="number">0xf5</span>,<span class="number">0x9c</span>,<span class="number">0x43</span>,<span class="number">0xea</span>,<span class="number">0x91</span>,<span class="number">0x38</span>,<span class="number">0xdf</span>,<span class="number">0x86</span>,<span class="number">0x2d</span>,<span class="number">0xd4</span>,<span class="number">0x7b</span>,<span class="number">0x22</span>,<span class="number">0xc9</span>,<span class="number">0x70</span>,<span class="number">0x17</span>,<span class="number">0xbe</span>,<span class="number">0x65</span>,<span class="number">0xc</span>,<span class="number">0xb3</span>,<span class="number">0x5a</span>,<span class="number">0x1</span>,<span class="number">0xa8</span>,<span class="number">0x4f</span>,<span class="number">0xf6</span>,<span class="number">0x9d</span>,<span class="number">0x44</span>,<span class="number">0xeb</span>,<span class="number">0x92</span>,<span class="number">0x39</span>,<span class="number">0xe0</span>,<span class="number">0x87</span>,<span class="number">0x2e</span>,<span class="number">0xd5</span>,<span class="number">0x7c</span>,<span class="number">0x23</span>,<span class="number">0xca</span>,<span class="number">0x71</span>,<span class="number">0x18</span>,<span class="number">0xbf</span>,<span class="number">0x66</span>,<span class="number">0xd</span>,<span class="number">0xb4</span>,<span class="number">0x5b</span>,<span class="number">0x2</span>,<span class="number">0xa9</span>,<span class="number">0x50</span>,<span class="number">0xf7</span>,<span class="number">0x9e</span>,<span class="number">0x45</span>,<span class="number">0xec</span>,<span class="number">0x93</span>,<span class="number">0x3a</span>,<span class="number">0xe1</span>,<span class="number">0x88</span>,<span class="number">0x2f</span>,<span class="number">0xd6</span>,<span class="number">0x7d</span>,<span class="number">0x24</span>,<span class="number">0xcb</span>,<span class="number">0x72</span>,<span class="number">0x19</span>,<span class="number">0xc0</span>,<span class="number">0x67</span>,<span class="number">0xe</span>,<span class="number">0xb5</span>,<span class="number">0x5c</span>,<span class="number">0x3</span>,<span class="number">0xaa</span>,<span class="number">0x51</span>,<span class="number">0xf8</span>,<span class="number">0x9f</span>,<span class="number">0x46</span>,<span class="number">0xed</span>,<span class="number">0x94</span>,<span class="number">0x3b</span>,<span class="number">0xe2</span>,<span class="number">0x89</span>,<span class="number">0x30</span>,<span class="number">0xd7</span>,<span class="number">0x7e</span>,<span class="number">0x25</span>,<span class="number">0xcc</span>,<span class="number">0x73</span>,<span class="number">0x1a</span>,<span class="number">0xc1</span>,<span class="number">0x68</span>,<span class="number">0xf</span>,<span class="number">0xb6</span>,<span class="number">0x5d</span>,<span class="number">0x4</span>,<span class="number">0xab</span>,<span class="number">0x52</span>,<span class="number">0xf9</span>,<span class="number">0xa0</span>,<span class="number">0x47</span>,<span class="number">0xee</span>,<span class="number">0x95</span>,<span class="number">0x3c</span>,<span class="number">0xe3</span>,<span class="number">0x8a</span>,<span class="number">0x31</span>,<span class="number">0xd8</span>,<span class="number">0x7f</span>,<span class="number">0x26</span>,<span class="number">0xcd</span>,<span class="number">0x74</span>,<span class="number">0x1b</span>,<span class="number">0xc2</span>,<span class="number">0x69</span>,<span class="number">0x10</span>,<span class="number">0xb7</span>,<span class="number">0x5e</span>,<span class="number">0x5</span>,<span class="number">0xac</span>,<span class="number">0x53</span>,<span class="number">0xfa</span>,<span class="number">0xa1</span>,<span class="number">0x48</span>,<span class="number">0xef</span>,<span class="number">0x96</span>,<span class="number">0x3d</span>,<span class="number">0xe4</span>,<span class="number">0x8b</span>,<span class="number">0x32</span>,<span class="number">0xd9</span>,<span class="number">0x80</span>,<span class="number">0x27</span>,<span class="number">0xce</span>,<span class="number">0x75</span>,<span class="number">0x1c</span>,<span class="number">0xc3</span>,<span class="number">0x6a</span>,<span class="number">0x11</span>,<span class="number">0xb8</span>,<span class="number">0x5f</span>,<span class="number">0x6</span>,<span class="number">0xad</span>,<span class="number">0x54</span>,<span class="number">0xfb</span>,<span class="number">0xa2</span>,<span class="number">0x49</span>,<span class="number">0xf0</span>,<span class="number">0x97</span>,<span class="number">0x3e</span>,<span class="number">0xe5</span>,<span class="number">0x8c</span>,<span class="number">0x33</span>,<span class="number">0xda</span>,<span class="number">0x81</span>,<span class="number">0x28</span>,<span class="number">0xcf</span>,<span class="number">0x76</span>,<span class="number">0x1d</span>,<span class="number">0xc4</span>,<span class="number">0x6b</span>,<span class="number">0x12</span>,<span class="number">0xb9</span>,<span class="number">0x60</span>,<span class="number">0x7</span>,<span class="number">0xae</span>,<span class="number">0x55</span>,<span class="number">0xfc</span>,<span class="number">0xa3</span>,<span class="number">0x4a</span>,<span class="number">0xf1</span>,<span class="number">0x98</span>,<span class="number">0x3f</span>,<span class="number">0xe6</span>,<span class="number">0x8d</span>,<span class="number">0x34</span>,<span class="number">0xdb</span>,<span class="number">0x82</span>,<span class="number">0x29</span>,<span class="number">0xd0</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0xc5</span>,<span class="number">0x6c</span>,<span class="number">0x13</span>,<span class="number">0xba</span>,<span class="number">0x61</span>,<span class="number">0x8</span>,<span class="number">0xaf</span>,<span class="number">0x56</span>,<span class="number">0xfd</span>,<span class="number">0xa4</span>,<span class="number">0x4b</span>,<span class="number">0xf2</span>,<span class="number">0x99</span>,<span class="number">0x40</span>,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x35</span>,<span class="number">0xdc</span>,<span class="number">0x83</span>,<span class="number">0x2a</span>,<span class="number">0xd1</span>,<span class="number">0x78</span>,<span class="number">0x1f</span>,<span class="number">0xc6</span>,<span class="number">0x6d</span>,<span class="number">0x14</span>,<span class="number">0xbb</span>,<span class="number">0x62</span>,<span class="number">0x9</span>,<span class="number">0xb0</span>,<span class="number">0x57</span>,<span class="number">0xfe</span>,<span class="number">0xa5</span>,<span class="number">0x4c</span>,<span class="number">0xf3</span>,<span class="number">0x9a</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据逆sbox进行解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];    <span class="comment">// encKey, decKey</span></span><br><span class="line">    <span class="type">int</span> Nr; <span class="comment">// 10 rounds</span></span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCKSIZE 16  <span class="comment">//AES-128分组长度为16字节</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint8_t y[4] -&gt; uint32_t x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (x) = ((uint32_t)((y)[0] &amp; 0xff)&lt;&lt;24) | ((uint32_t)((y)[1] &amp; 0xff)&lt;&lt;16) | \</span></span><br><span class="line"><span class="meta">             ((uint32_t)((y)[2] &amp; 0xff)&lt;&lt;8)  | ((uint32_t)((y)[3] &amp; 0xff));&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x -&gt; uint8_t y[4]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从uint32_t x中提取从低位开始的第n个字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used for keyExpansion */</span></span><br><span class="line"><span class="comment">// 字节替换然后循环左移1位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((S[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((S[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((S[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (S[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x循环左移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"><span class="comment">// uint32_t x循环右移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for 128-bit blocks, Rijndael never uses more than 10 rcon values */</span></span><br><span class="line"><span class="comment">// AES-128轮常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> rcon[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x01000000</span>UL, <span class="number">0x02000000</span>UL, <span class="number">0x04000000</span>UL, <span class="number">0x08000000</span>UL, <span class="number">0x10000000</span>UL,</span><br><span class="line">        <span class="number">0x20000000</span>UL, <span class="number">0x40000000</span>UL, <span class="number">0x80000000</span>UL, <span class="number">0x1B000000</span>UL, <span class="number">0x36000000</span>UL</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0x40</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0xCA</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0xF5</span>, <span class="number">0x0C</span>, <span class="number">0x23</span>, <span class="number">0x3A</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x7F</span>, <span class="number">0x96</span>, <span class="number">0xAD</span>, <span class="number">0xC4</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x37</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x93</span>, <span class="number">0xAA</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xD8</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x90</span>,</span><br><span class="line">        <span class="number">0xA7</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xEC</span>, <span class="number">0x03</span>, <span class="number">0x1A</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x5F</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xBB</span>, <span class="number">0xD2</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x2E</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0xA1</span>, <span class="number">0xB8</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0xFD</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0x9E</span>, <span class="number">0xB5</span>, <span class="number">0xCC</span>, <span class="number">0xE3</span>, <span class="number">0xFA</span>, <span class="number">0x11</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x84</span>, <span class="number">0x9B</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x25</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x6A</span>, <span class="number">0x81</span>, <span class="number">0x98</span>, <span class="number">0xAF</span>, <span class="number">0xC6</span>, <span class="number">0xDD</span>, <span class="number">0xF4</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x22</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x36</span>, <span class="number">0x4D</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xA9</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x33</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x75</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0xD1</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x16</span>, <span class="number">0x2D</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xB7</span>, <span class="number">0xCE</span>, <span class="number">0xE5</span>, <span class="number">0xFC</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xCB</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x83</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x97</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x4C</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x60</span>, <span class="number">0x77</span>, <span class="number">0x8E</span>, <span class="number">0xA5</span>, <span class="number">0xBC</span>,</span><br><span class="line">        <span class="number">0xD3</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0xB9</span>, <span class="number">0xD0</span>, <span class="number">0xE7</span>, <span class="number">0xFE</span>, <span class="number">0x15</span>, <span class="number">0x2C</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x88</span>,</span><br><span class="line">        <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xCD</span>, <span class="number">0xE4</span>, <span class="number">0xFB</span>, <span class="number">0x12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[<span class="number">256</span>] = </span><br><span class="line">&#123; </span><br><span class="line">    <span class="number">0x41</span>,<span class="number">0xe8</span>,<span class="number">0x8f</span>,<span class="number">0x36</span>,<span class="number">0xdd</span>,<span class="number">0x84</span>,<span class="number">0x2b</span>,<span class="number">0xd2</span>,<span class="number">0x79</span>,<span class="number">0x20</span>,<span class="number">0xc7</span>,<span class="number">0x6e</span>,<span class="number">0x15</span>,<span class="number">0xbc</span>,<span class="number">0x63</span>,<span class="number">0xa</span>,</span><br><span class="line">    <span class="number">0xb1</span>,<span class="number">0x58</span>,<span class="number">0xff</span>,<span class="number">0xa6</span>,<span class="number">0x4d</span>,<span class="number">0xf4</span>,<span class="number">0x9b</span>,<span class="number">0x42</span>,<span class="number">0xe9</span>,<span class="number">0x90</span>,<span class="number">0x37</span>,<span class="number">0xde</span>,<span class="number">0x85</span>,<span class="number">0x2c</span>,<span class="number">0xd3</span>,<span class="number">0x7a</span>,</span><br><span class="line">    <span class="number">0x21</span>,<span class="number">0xc8</span>,<span class="number">0x6f</span>,<span class="number">0x16</span>,<span class="number">0xbd</span>,<span class="number">0x64</span>,<span class="number">0xb</span>,<span class="number">0xb2</span>,<span class="number">0x59</span>,<span class="number">0</span>,<span class="number">0xa7</span>,<span class="number">0x4e</span>,<span class="number">0xf5</span>,<span class="number">0x9c</span>,<span class="number">0x43</span>,<span class="number">0xea</span>,<span class="number">0x91</span>,</span><br><span class="line">    <span class="number">0x38</span>,<span class="number">0xdf</span>,<span class="number">0x86</span>,<span class="number">0x2d</span>,<span class="number">0xd4</span>,<span class="number">0x7b</span>,<span class="number">0x22</span>,<span class="number">0xc9</span>,<span class="number">0x70</span>,<span class="number">0x17</span>,<span class="number">0xbe</span>,<span class="number">0x65</span>,<span class="number">0xc</span>,<span class="number">0xb3</span>,<span class="number">0x5a</span>,<span class="number">0x1</span>,<span class="number">0xa8</span></span><br><span class="line">    ,<span class="number">0x4f</span>,<span class="number">0xf6</span>,<span class="number">0x9d</span>,<span class="number">0x44</span>,<span class="number">0xeb</span>,<span class="number">0x92</span>,<span class="number">0x39</span>,<span class="number">0xe0</span>,<span class="number">0x87</span>,<span class="number">0x2e</span>,<span class="number">0xd5</span>,<span class="number">0x7c</span>,<span class="number">0x23</span>,<span class="number">0xca</span>,<span class="number">0x71</span>,<span class="number">0x18</span>,</span><br><span class="line">    <span class="number">0xbf</span>,<span class="number">0x66</span>,<span class="number">0xd</span>,<span class="number">0xb4</span>,<span class="number">0x5b</span>,<span class="number">0x2</span>,<span class="number">0xa9</span>,<span class="number">0x50</span>,<span class="number">0xf7</span>,<span class="number">0x9e</span>,<span class="number">0x45</span>,<span class="number">0xec</span>,<span class="number">0x93</span>,<span class="number">0x3a</span>,<span class="number">0xe1</span>,<span class="number">0x88</span>,<span class="number">0x2f</span></span><br><span class="line">    ,<span class="number">0xd6</span>,<span class="number">0x7d</span>,<span class="number">0x24</span>,<span class="number">0xcb</span>,<span class="number">0x72</span>,<span class="number">0x19</span>,<span class="number">0xc0</span>,<span class="number">0x67</span>,<span class="number">0xe</span>,<span class="number">0xb5</span>,<span class="number">0x5c</span>,<span class="number">0x3</span>,<span class="number">0xaa</span>,<span class="number">0x51</span>,<span class="number">0xf8</span>,<span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x46</span>,<span class="number">0xed</span>,<span class="number">0x94</span>,<span class="number">0x3b</span>,<span class="number">0xe2</span>,<span class="number">0x89</span>,<span class="number">0x30</span>,<span class="number">0xd7</span>,<span class="number">0x7e</span>,<span class="number">0x25</span>,<span class="number">0xcc</span>,<span class="number">0x73</span>,<span class="number">0x1a</span>,<span class="number">0xc1</span>,<span class="number">0x68</span>,<span class="number">0xf</span>,</span><br><span class="line">    <span class="number">0xb6</span>,<span class="number">0x5d</span>,<span class="number">0x4</span>,<span class="number">0xab</span>,<span class="number">0x52</span>,<span class="number">0xf9</span>,<span class="number">0xa0</span>,<span class="number">0x47</span>,<span class="number">0xee</span>,<span class="number">0x95</span>,<span class="number">0x3c</span>,<span class="number">0xe3</span>,<span class="number">0x8a</span>,<span class="number">0x31</span>,<span class="number">0xd8</span>,<span class="number">0x7f</span>,</span><br><span class="line">    <span class="number">0x26</span>,<span class="number">0xcd</span>,<span class="number">0x74</span>,<span class="number">0x1b</span>,<span class="number">0xc2</span>,<span class="number">0x69</span>,<span class="number">0x10</span>,<span class="number">0xb7</span>,<span class="number">0x5e</span>,<span class="number">0x5</span>,<span class="number">0xac</span>,<span class="number">0x53</span>,<span class="number">0xfa</span>,<span class="number">0xa1</span>,<span class="number">0x48</span>,<span class="number">0xef</span>,</span><br><span class="line">    <span class="number">0x96</span>,<span class="number">0x3d</span>,<span class="number">0xe4</span>,<span class="number">0x8b</span>,<span class="number">0x32</span>,<span class="number">0xd9</span>,<span class="number">0x80</span>,<span class="number">0x27</span>,<span class="number">0xce</span>,<span class="number">0x75</span>,<span class="number">0x1c</span>,<span class="number">0xc3</span>,<span class="number">0x6a</span>,<span class="number">0x11</span>,<span class="number">0xb8</span>,<span class="number">0x5f</span>,</span><br><span class="line">    <span class="number">0x6</span>,<span class="number">0xad</span>,<span class="number">0x54</span>,<span class="number">0xfb</span>,<span class="number">0xa2</span>,<span class="number">0x49</span>,<span class="number">0xf0</span>,<span class="number">0x97</span>,<span class="number">0x3e</span>,<span class="number">0xe5</span>,<span class="number">0x8c</span>,<span class="number">0x33</span>,<span class="number">0xda</span>,<span class="number">0x81</span>,<span class="number">0x28</span>,<span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0x76</span>,<span class="number">0x1d</span>,<span class="number">0xc4</span>,<span class="number">0x6b</span>,<span class="number">0x12</span>,<span class="number">0xb9</span>,<span class="number">0x60</span>,<span class="number">0x7</span>,<span class="number">0xae</span>,<span class="number">0x55</span>,<span class="number">0xfc</span>,<span class="number">0xa3</span>,<span class="number">0x4a</span>,<span class="number">0xf1</span>,<span class="number">0x98</span>,<span class="number">0x3f</span>,</span><br><span class="line">    <span class="number">0xe6</span>,<span class="number">0x8d</span>,<span class="number">0x34</span>,<span class="number">0xdb</span>,<span class="number">0x82</span>,<span class="number">0x29</span>,<span class="number">0xd0</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0xc5</span>,<span class="number">0x6c</span>,<span class="number">0x13</span>,<span class="number">0xba</span>,<span class="number">0x61</span>,<span class="number">0x8</span>,<span class="number">0xaf</span>,</span><br><span class="line">    <span class="number">0x56</span>,<span class="number">0xfd</span>,<span class="number">0xa4</span>,<span class="number">0x4b</span>,<span class="number">0xf2</span>,<span class="number">0x99</span>,<span class="number">0x40</span>,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x35</span>,<span class="number">0xdc</span>,<span class="number">0x83</span>,<span class="number">0x2a</span>,<span class="number">0xd1</span>,<span class="number">0x78</span>,<span class="number">0x1f</span>,</span><br><span class="line">    <span class="number">0xc6</span>,<span class="number">0x6d</span>,<span class="number">0x14</span>,<span class="number">0xbb</span>,<span class="number">0x62</span>,<span class="number">0x9</span>,<span class="number">0xb0</span>,<span class="number">0x57</span>,<span class="number">0xfe</span>,<span class="number">0xa5</span>,<span class="number">0x4c</span>,<span class="number">0xf3</span>,<span class="number">0x9a</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy in[16] to state[4][4] */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[j][i] = *in++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to out[16] */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            *out++ = state[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥扩展</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, AesKey* aesKey)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == aesKey) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion param is NULL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen != <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion keyLen = %d, Not support.\n&quot;</span>, keyLen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span>* w = aesKey-&gt;eK;  <span class="comment">//加密秘钥</span></span><br><span class="line">    <span class="type">uint32_t</span>* v = aesKey-&gt;dK;  <span class="comment">//解密秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* keyLen is 16 Bytes, generate uint32_t W[44]. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[0-3] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        LOAD32H(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[4-43] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ MIX(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">        w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">        w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">        w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">        w += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w = aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//解密秘钥矩阵为加密秘钥矩阵的倒序，方便使用，把ek的11个矩阵倒序排列分配给dk作为解密秘钥</span></span><br><span class="line">    <span class="comment">//即dk[0-3]=ek[41-44], dk[4-7]=ek[37-40]... dk[41-44]=ek[0-3]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            v[i] = w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        w -= <span class="number">4</span>;</span><br><span class="line">        v += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮秘钥加</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            k[i][j] = (<span class="type">uint8_t</span>)BYTE(key[j], <span class="number">3</span> - i);  <span class="comment">/* 把 uint32 key[4] 先转换为矩阵 uint8 k[4][4] */</span></span><br><span class="line">            state[i][j] ^= k[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字节替换</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">subBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = S[state[i][j]]; <span class="comment">//直接使用原始字节作为S盒数据下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆字节替换</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">invSubBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = inv_S[state[i][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//行移位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">//便于行循环移位，先把一行4字节拼成uint_32结构，移位后再转成独立的4个字节uint8_t</span></span><br><span class="line">        LOAD32H(block[i], state[i]);</span><br><span class="line">        block[i] = ROF32(block[i], <span class="number">8</span> * i);</span><br><span class="line">        STORE32H(block[i], state[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆行移位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">invShiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        LOAD32H(block[i], state[i]);</span><br><span class="line">        block[i] = ROR32(block[i], <span class="number">8</span> * i);</span><br><span class="line">        STORE32H(block[i], state[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Galois Field (256) Multiplication of two Bytes */</span></span><br><span class="line"><span class="comment">// 两字节的伽罗华域乘法运算</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;    <span class="comment">//</span></span><br><span class="line">            p ^= v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">        v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            v ^= <span class="number">0x1B</span>; <span class="comment">/* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            tmp[i][j] = state[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;  <span class="comment">//伽罗华域加法和乘法</span></span><br><span class="line">            state[i][j] = GMul(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ GMul(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">                ^ GMul(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ GMul(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆列混合</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">invMixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>&#125; &#125;;  <span class="comment">//使用列混合矩阵的逆矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            tmp[i][j] = state[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = GMul(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ GMul(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">                ^ GMul(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ GMul(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES-128加密接口，输入key应为16字节长度，输入长度应该是16字节整倍数，</span></span><br><span class="line"><span class="comment">// 这样输出长度与输入长度相同，函数调用外部为输出数据分配内存</span></span><br><span class="line"><span class="comment">//pt是原始数据 ct是加密后的数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aesEncrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* pt, <span class="type">uint8_t</span>* ct, <span class="type">uint32_t</span> len)</span> &#123;</span><br><span class="line"></span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span>* pos = ct;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.eK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == pt || <span class="literal">NULL</span> == ct) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    keyExpansion(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">// 秘钥扩展</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用ECB模式循环加密多个分组长度的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="comment">// 把16字节的明文转换为4x4状态矩阵来进行处理</span></span><br><span class="line">        loadStateArray(state, pt);</span><br><span class="line">        <span class="comment">// 轮秘钥加</span></span><br><span class="line">        addRoundKey(state, rk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            subBytes(state);   <span class="comment">// 字节替换</span></span><br><span class="line">            shiftRows(state);  <span class="comment">// 行移位</span></span><br><span class="line">            mixColumns(state); <span class="comment">// 列混合</span></span><br><span class="line">            addRoundKey(state, rk); <span class="comment">// 轮秘钥加</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        subBytes(state);    <span class="comment">// 字节替换</span></span><br><span class="line">        shiftRows(state);  <span class="comment">// 行移位</span></span><br><span class="line">        <span class="comment">// 此处不进行列混合</span></span><br><span class="line">        addRoundKey(state, rk + <span class="number">4</span>); <span class="comment">// 轮秘钥加</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把4x4状态矩阵转换为uint8_t一维数组输出保存</span></span><br><span class="line">        storeStateArray(state, pos);</span><br><span class="line"></span><br><span class="line">        pos += BLOCKSIZE;  <span class="comment">// 加密数据内存指针移动到下一个分组</span></span><br><span class="line">        pt += BLOCKSIZE;   <span class="comment">// 明文数据指针移动到下一个分组</span></span><br><span class="line">        rk = aesKey.eK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES128解密， 参数要求同加密 ct是加密数据 pt是解密后的数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* ct, <span class="type">uint8_t</span>* pt, <span class="type">uint32_t</span> len)</span> &#123;</span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span>* pos = pt;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.dK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == ct || <span class="literal">NULL</span> == pt) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    keyExpansion(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">//秘钥扩展，同加密</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="comment">// 把16字节的密文转换为4x4状态矩阵来进行处理</span></span><br><span class="line">        loadStateArray(state, ct);</span><br><span class="line">        <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line">        addRoundKey(state, rk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            invShiftRows(state);    <span class="comment">// 逆行移位</span></span><br><span class="line">            invSubBytes(state);     <span class="comment">// 逆字节替换，这两步顺序可以颠倒</span></span><br><span class="line">            addRoundKey(state, rk); <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line">            invMixColumns(state);   <span class="comment">// 逆列混合</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        invSubBytes(state);   <span class="comment">// 逆字节替换</span></span><br><span class="line">        invShiftRows(state);  <span class="comment">// 逆行移位</span></span><br><span class="line">        <span class="comment">// 此处没有逆列混合</span></span><br><span class="line">        addRoundKey(state, rk + <span class="number">4</span>);  <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line"></span><br><span class="line">        storeStateArray(state, pos);  <span class="comment">// 保存明文数据</span></span><br><span class="line">        pos += BLOCKSIZE;  <span class="comment">// 输出数据内存指针移位分组长度</span></span><br><span class="line">        ct += BLOCKSIZE;   <span class="comment">// 输入数据内存指针移位分组长度</span></span><br><span class="line">        rk = aesKey.dK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>] = <span class="string">&quot;Re_1s_eaSy123456&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">16</span>] = &#123; <span class="number">0x2B</span>, <span class="number">0xC8</span>, <span class="number">0x20</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0x0D</span>, <span class="number">0xA7</span>, <span class="number">0x9B</span>, <span class="number">0x2A</span>, <span class="number">0x51</span>, <span class="number">0x3A</span>, <span class="number">0xD2</span>, <span class="number">0x71</span>, <span class="number">0x71</span>, <span class="number">0xCA</span>, <span class="number">0x50</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> passwd[<span class="number">17</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    aesDecrypt(key,<span class="number">16</span>,enc,passwd,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, passwd);<span class="comment">//_eZ_Rc4_@nd_AES!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以flag: <strong>WMCTF{Re_1s_eaSy_eZ_Rc4_@nd_AES!}</strong></p>
<h1 id="正向还原"><a href="#正向还原" class="headerlink" title="正向还原"></a>正向还原</h1><p>程序基本逻辑</p>
<ol>
<li>初始化全局变量</li>
<li>JNI_OnLoad动态注册Native函数</li>
<li>CheckUserName用魔改RC4检测</li>
<li>CheckPassword用替换Sbox的AES检测</li>
</ol>
<p>值得一提的是该程序初始化数据的操作定义在.init_array区域</p>
<p><img src="/2023/08/22/WMCTF2023/WMCTF2023-ezAndorid/InitArrayFunc.png"></p>
<p>这里利用到了**_<em>attribute</em>_(constructor)**关键字</p>
<p>使用该关键字可以将函数注册为构造函数,当程序启动时自动执行,一般用于变量初始化的操作</p>
<p>所以在附加调试时下断点无法在这些函数处断下,推测是由于运行app时so文件已经加载进内存</p>
<p>加载时已经调用过这些函数,如果要断点可能需要使用命令以debug模式启动app</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell am Start -D -n</span><br></pre></td></tr></table></figure>

<p>效果</p>
<h2 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezandroidre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AlertDialog;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.zip.Inflater;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">CheckUserName</span><span class="params">(String str)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">CheckPassword</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;ezandroidre&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EditText name,passwd;</span><br><span class="line">    Button check,exit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messagebox</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        AlertDialog.Builder dialog=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">        dialog.setMessage(message);</span><br><span class="line">        dialog.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Check</span><span class="params">(View view)</span>&#123;</span><br><span class="line">        String UserName=name.getText().toString();</span><br><span class="line">        String Password=passwd.getText().toString();</span><br><span class="line">        <span class="keyword">if</span>(UserName.equals(<span class="string">&quot;&quot;</span>)||Password.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            messagebox(<span class="string">&quot;UserName or Password is empty!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(CheckUserName(UserName)!=<span class="number">1</span>)</span><br><span class="line">            messagebox(<span class="string">&quot;Wrong UserName!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(CheckPassword(Password)!=<span class="number">1</span>)&#123;</span><br><span class="line">            messagebox(<span class="string">&quot;Wrong Password!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            messagebox(<span class="string">&quot;Flag is:&quot;</span>+<span class="string">&quot;WMCTF&#123;&quot;</span>+UserName+Password+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        name=(EditText) findViewById(R.id.name);</span><br><span class="line">        passwd=(EditText) findViewById(R.id.passwd);</span><br><span class="line">        check=(Button)findViewById(R.id.check);</span><br><span class="line">        exit=(Button)findViewById(R.id.exit);</span><br><span class="line"></span><br><span class="line">        check.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                Check(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        exit.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];    <span class="comment">// encKey, decKey</span></span><br><span class="line">    <span class="type">int</span> Nr; <span class="comment">// 10 rounds</span></span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCKSIZE 16  <span class="comment">//AES-128分组长度为16字节</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint8_t y[4] -&gt; uint32_t x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (x) = ((uint32_t)((y)[0] &amp; 0xff)&lt;&lt;24) | ((uint32_t)((y)[1] &amp; 0xff)&lt;&lt;16) | \</span></span><br><span class="line"><span class="meta">             ((uint32_t)((y)[2] &amp; 0xff)&lt;&lt;8)  | ((uint32_t)((y)[3] &amp; 0xff));&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x -&gt; uint8_t y[4]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从uint32_t x中提取从低位开始的第n个字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used for keyExpansion */</span></span><br><span class="line"><span class="comment">// 字节替换然后循环左移1位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((AesSbox[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((AesSbox[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((AesSbox[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (AesSbox[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x循环左移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"><span class="comment">// uint32_t x循环右移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for 128-bit blocks, Rijndael never uses more than 10 rcon values */</span></span><br><span class="line"><span class="comment">// AES-128轮常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> rcon[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x01000000</span>UL, <span class="number">0x02000000</span>UL, <span class="number">0x04000000</span>UL, <span class="number">0x08000000</span>UL, <span class="number">0x10000000</span>UL,</span><br><span class="line">        <span class="number">0x20000000</span>UL, <span class="number">0x40000000</span>UL, <span class="number">0x80000000</span>UL, <span class="number">0x1B000000</span>UL, <span class="number">0x36000000</span>UL</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> AesSbox[<span class="number">256</span>] = &#123;</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">        <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">        <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">        <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">        <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">        <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">        <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">        <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">        <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">        <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">        <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> NewAesSbox[<span class="number">256</span>] = &#123;</span><br><span class="line">        <span class="number">0x29</span>, <span class="number">0x40</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0xCA</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0xF5</span>, <span class="number">0x0C</span>, <span class="number">0x23</span>, <span class="number">0x3A</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x7F</span>, <span class="number">0x96</span>, <span class="number">0xAD</span>, <span class="number">0xC4</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x37</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x93</span>, <span class="number">0xAA</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xD8</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x90</span>,</span><br><span class="line">        <span class="number">0xA7</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xEC</span>, <span class="number">0x03</span>, <span class="number">0x1A</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x5F</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xBB</span>, <span class="number">0xD2</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x2E</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0xA1</span>, <span class="number">0xB8</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0xFD</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0x9E</span>, <span class="number">0xB5</span>, <span class="number">0xCC</span>, <span class="number">0xE3</span>, <span class="number">0xFA</span>, <span class="number">0x11</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x84</span>, <span class="number">0x9B</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x25</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x6A</span>, <span class="number">0x81</span>, <span class="number">0x98</span>, <span class="number">0xAF</span>, <span class="number">0xC6</span>, <span class="number">0xDD</span>, <span class="number">0xF4</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x22</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x36</span>, <span class="number">0x4D</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xA9</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x33</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x75</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0xD1</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x16</span>, <span class="number">0x2D</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xB7</span>, <span class="number">0xCE</span>, <span class="number">0xE5</span>, <span class="number">0xFC</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xCB</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x83</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x97</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x4C</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x60</span>, <span class="number">0x77</span>, <span class="number">0x8E</span>, <span class="number">0xA5</span>, <span class="number">0xBC</span>,</span><br><span class="line">        <span class="number">0xD3</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0xB9</span>, <span class="number">0xD0</span>, <span class="number">0xE7</span>, <span class="number">0xFE</span>, <span class="number">0x15</span>, <span class="number">0x2C</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x88</span>,</span><br><span class="line">        <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xCD</span>, <span class="number">0xE4</span>, <span class="number">0xFB</span>, <span class="number">0x12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> EncUserName[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncUserNameData[<span class="number">10</span>]=&#123;<span class="number">47</span>, <span class="number">54</span>, <span class="number">165</span>, <span class="number">17</span>, <span class="number">82</span>, <span class="number">2</span>, <span class="number">242</span>, <span class="number">159</span>, <span class="number">113</span>, <span class="number">127</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> encPasswdData[<span class="number">16</span>] = &#123; <span class="number">0x2B</span>, <span class="number">0xC8</span>, <span class="number">0x20</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0x0D</span>, <span class="number">0xA7</span>, <span class="number">0x9B</span>, <span class="number">0x2A</span>, <span class="number">0x51</span>, <span class="number">0x3A</span>, <span class="number">0xD2</span>, <span class="number">0x71</span>, <span class="number">0x71</span>, <span class="number">0xCA</span>, <span class="number">0x50</span> &#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> encPasswd[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">/* copy in[16] to state[4][4] */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[j][i] = *in++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to out[16] */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            *out++ = state[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥扩展</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, AesKey* aesKey)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == aesKey) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion param is NULL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen != <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion keyLen = %d, Not support.\n&quot;</span>, keyLen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span>* w = aesKey-&gt;eK;  <span class="comment">//加密秘钥</span></span><br><span class="line">    <span class="type">uint32_t</span>* v = aesKey-&gt;dK;  <span class="comment">//解密秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* keyLen is 16 Bytes, generate uint32_t W[44]. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[0-3] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">LOAD32H</span>(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[4-43] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ <span class="built_in">MIX</span>(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">        w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">        w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">        w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">        w += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w = aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//解密秘钥矩阵为加密秘钥矩阵的倒序，方便使用，把ek的11个矩阵倒序排列分配给dk作为解密秘钥</span></span><br><span class="line">    <span class="comment">//即dk[0-3]=ek[41-44], dk[4-7]=ek[37-40]... dk[41-44]=ek[0-3]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            v[i] = w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        w -= <span class="number">4</span>;</span><br><span class="line">        v += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮秘钥加</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            k[i][j] = (<span class="type">uint8_t</span>)<span class="built_in">BYTE</span>(key[j], <span class="number">3</span> - i);  <span class="comment">/* 把 uint32 key[4] 先转换为矩阵 uint8 k[4][4] */</span></span><br><span class="line">            state[i][j] ^= k[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字节替换</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">subBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = AesSbox[state[i][j]]; <span class="comment">//直接使用原始字节作为S盒数据下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//行移位</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">shiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">//便于行循环移位，先把一行4字节拼成uint_32结构，移位后再转成独立的4个字节uint8_t</span></span><br><span class="line">        <span class="built_in">LOAD32H</span>(block[i], state[i]);</span><br><span class="line">        block[i] = <span class="built_in">ROF32</span>(block[i], <span class="number">8</span> * i);</span><br><span class="line">        <span class="built_in">STORE32H</span>(block[i], state[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Galois Field (256) Multiplication of two Bytes */</span></span><br><span class="line"><span class="comment">// 两字节的伽罗华域乘法运算</span></span><br><span class="line"><span class="function"><span class="type">uint8_t</span> <span class="title">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;    <span class="comment">//</span></span><br><span class="line">            p ^= v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">        v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            v ^= <span class="number">0x1B</span>; <span class="comment">/* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            tmp[i][j] = state[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;  <span class="comment">//伽罗华域加法和乘法</span></span><br><span class="line">            state[i][j] = <span class="built_in">GMul</span>(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">                          ^ <span class="built_in">GMul</span>(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">aesEncrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* pt, <span class="type">uint8_t</span>* ct, <span class="type">uint32_t</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span>* pos = ct;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.eK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == pt || <span class="literal">NULL</span> == ct) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    <span class="built_in">keyExpansion</span>(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">// 秘钥扩展</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用ECB模式循环加密多个分组长度的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="comment">// 把16字节的明文转换为4x4状态矩阵来进行处理</span></span><br><span class="line">        <span class="built_in">loadStateArray</span>(state, pt);</span><br><span class="line">        <span class="comment">// 轮秘钥加</span></span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">subBytes</span>(state);   <span class="comment">// 字节替换</span></span><br><span class="line">            <span class="built_in">shiftRows</span>(state);  <span class="comment">// 行移位</span></span><br><span class="line">            <span class="built_in">mixColumns</span>(state); <span class="comment">// 列混合</span></span><br><span class="line">            <span class="built_in">addRoundKey</span>(state, rk); <span class="comment">// 轮秘钥加</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">subBytes</span>(state);    <span class="comment">// 字节替换</span></span><br><span class="line">        <span class="built_in">shiftRows</span>(state);  <span class="comment">// 行移位</span></span><br><span class="line">        <span class="comment">// 此处不进行列混合</span></span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk + <span class="number">4</span>); <span class="comment">// 轮秘钥加</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把4x4状态矩阵转换为uint8_t一维数组输出保存</span></span><br><span class="line">        <span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line"></span><br><span class="line">        pos += BLOCKSIZE;  <span class="comment">// 加密数据内存指针移动到下一个分组</span></span><br><span class="line">        pt += BLOCKSIZE;   <span class="comment">// 明文数据指针移动到下一个分组</span></span><br><span class="line">        rk = aesKey.eK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> RC4Sbox[<span class="number">256</span>] = &#123;<span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>&amp; a, <span class="type">unsigned</span> <span class="type">char</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_sbox</span><span class="params">( <span class="type">unsigned</span> <span class="type">char</span> key[],<span class="type">unsigned</span> <span class="type">int</span> keyLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)<span class="comment">//赋值</span></span><br><span class="line">        RC4Sbox[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Ttable[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        Ttable[i] = key[i % keyLen];<span class="comment">//根据初始化t表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + RC4Sbox[i] + Ttable[i]) % <span class="number">256</span>;	<span class="comment">//打乱s盒</span></span><br><span class="line">        <span class="built_in">swap</span>(RC4Sbox[i], RC4Sbox[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4_enc_dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data[],<span class="type">unsigned</span> <span class="type">int</span> dataLen,<span class="type">unsigned</span> <span class="type">char</span> key[],<span class="type">unsigned</span> <span class="type">int</span> keyLen)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">init_sbox</span>(key,keyLen);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> h = <span class="number">0</span>; h &lt; dataLen; h++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + RC4Sbox[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(RC4Sbox[i], RC4Sbox[j]);</span><br><span class="line">        t = (RC4Sbox[i] + RC4Sbox[j]) % <span class="number">256</span>;</span><br><span class="line">        k = RC4Sbox[t];	<span class="comment">//求密钥流,并对明文加密</span></span><br><span class="line">        data[h] =data[h]^k^h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//较小的先执行</span></span><br><span class="line"><span class="comment">//初始化加密后的用户名</span></span><br><span class="line">__attribute__ ((<span class="built_in">constructor</span>(<span class="number">101</span>))) <span class="function"><span class="type">void</span> <span class="title">initEncName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">        encPasswd[i]=encPasswdData[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化替换后的AESSbox</span></span><br><span class="line">__attribute__ ((<span class="built_in">constructor</span>(<span class="number">102</span>))) <span class="function"><span class="type">void</span> <span class="title">initAesSbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">        AesSbox[i]=NewAesSbox[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化加密后的密码</span></span><br><span class="line">__attribute__ ((<span class="built_in">constructor</span>(<span class="number">103</span>))) <span class="function"><span class="type">void</span> <span class="title">initEncPasswd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">        EncUserName[i]=EncUserNameData[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">CheckUserName</span><span class="params">(JNIEnv* env,jobject obj,jstring str)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* UserName=(<span class="type">unsigned</span> <span class="type">char</span>*)env-&gt;<span class="built_in">GetStringUTFChars</span>(str, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">11</span>]=<span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">    <span class="built_in">RC4_enc_dec</span>(UserName, <span class="number">10</span>, key, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(UserName, EncUserName, <span class="number">10</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">CheckPassword</span><span class="params">(JNIEnv* env,jobject obj,jstring str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* passwd=(<span class="type">unsigned</span> <span class="type">char</span>*)env-&gt;<span class="built_in">GetStringUTFChars</span>(str,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">17</span>]=<span class="string">&quot;Re_1s_eaSy123456&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">aesEncrypt</span>(key,<span class="number">16</span>,passwd,enc,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(enc,encPasswd,<span class="number">16</span>)==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*  className=<span class="string">&quot;com/example/ezandroidre/MainActivity&quot;</span>;</span><br><span class="line"><span class="type">static</span> JNINativeMethod methods[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;CheckUserName&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)I&quot;</span>,(<span class="type">void</span>*) CheckUserName&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;CheckPassword&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)I&quot;</span>,(<span class="type">void</span>*) CheckPassword&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="type">void</span> *reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv* env=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;<span class="built_in">GetEnv</span>((<span class="type">void</span>**)&amp;env,JNI_VERSION_1_6)==JNI_OK)&#123;</span><br><span class="line">        jclass clazz=env-&gt;<span class="built_in">FindClass</span>(className);</span><br><span class="line">        <span class="keyword">if</span>(clazz)&#123;</span><br><span class="line">            env-&gt;<span class="built_in">RegisterNatives</span>(clazz,methods,<span class="built_in">sizeof</span>(methods)/<span class="built_in">sizeof</span>(methods[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;204dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;UserName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/passwd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;276dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/check&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;352dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;CheckOut&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/exit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;432dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Exit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="总结收获"><a href="#总结收获" class="headerlink" title="总结收获"></a>总结收获</h1><ol>
<li>JNI_OnLoad动态注册原理和实现方法</li>
<li>AES加密基本流程 逆解AES</li>
<li>_<em>attribute</em>_(constructor())  func() 注册构造函数方法</li>
</ol>
]]></content>
      <categories>
        <category>WMCTF2023</category>
      </categories>
      <tags>
        <tag>AES</tag>
        <tag>RC4</tag>
        <tag>OLLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>植物大战僵尸修改器制作</title>
    <url>/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><ol>
<li><p>CheatEngine工具的基本使用 </p>
<p>推荐视频<a href="https://www.bilibili.com/video/BV1nR4y1u7PZ/?spm_id_from=333.999.0.0&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">你能学会的Cheat Engine零基础入门教程</a></p>
<p>将ce官方给的闯关游戏通关即可</p>
</li>
<li><p>C&#x2F;C++和汇编语言基础</p>
<p>附上<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">汇编代码转换网站</a></p>
</li>
<li><p>WIN32开发基础</p>
<p>了解WIN32命名规则,会使用GPT和查找微软官方文档即可</p>
<p>推荐通过看微软官方文档<a href="https://learn.microsoft.com/en-us/windows/win32/learnwin32/learn-to-program-for-windows">Win32 和 C++ 入门</a> 能创建第一个windows程序即可</p>
</li>
</ol>
<p>示例游戏版本: 中文年度加强版1.1.0.1056</p>
<p>主要参考资料</p>
<ol>
<li><p><a href="https://www.bilibili.com/video/BV1te4y1U7Jn?p=1&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">【补档】豪哥植物大战僵尸修改教程视频合集</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1By4y1r7Cq/?p=156&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">C&#x2F;C++全栈软件安全课（调试、反调试、游戏反外挂、软件逆向）持续更新中~~~~</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Jb411p7fU/?p=25&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">逆向工程实战 揭秘汇编&#x2F;反汇编（win32+游戏逆向实战）</a></p>
</li>
</ol>
<h1 id="基址偏移表"><a href="#基址偏移表" class="headerlink" title="基址偏移表"></a>基址偏移表</h1><p>部分参考: <a href="https://tieba.baidu.com/f?z=870532241&ct=335544320&lm=0&sc=0&rn=30&tn=baiduPostBrowser&word=%D6%B2%EF%BF%BD%EF%BF%BD%EF%BF%BD%D5%BD%EF%BF%BD%EF%BF%BD%CA%AC&pn=0&red_tag=0372117949">公布我所找到的所有基址及各种功能实现方法</a></p>
<p>基址 0x00355E0C</p>
<p>阳光 +868 +5578</p>
<p>金钱 +950 +50</p>
<p>花肥 +950 +220</p>
<p>巧克力 +950 +250</p>
<p>树肥 +950 +258</p>
<p>树高 +950 +11C</p>
<p>杀虫剂 +950 +224</p>
<p>卡槽数 +868 +15C +24</p>
<p>卡槽栏 +868 +15C +5C 此后每个植物栏相隔0x50</p>
<p>植物当前冷却值 +868 +15C +4C 此后每个植物冷却相隔0x50</p>
<p>植物冷却值上限 +868 +15C +50 此后每个植物冷却上限相隔0x50</p>
<p>植物当前数量 +868 +D4</p>
<p>植物种植函数EBP +868</p>
<p>僵尸当前数量 +868 +B8</p>
<p>僵尸种植函数EBP +868 +178</p>
<h1 id="常规项目"><a href="#常规项目" class="headerlink" title="常规项目"></a>常规项目</h1><p>根据变量的变化使用CE寻找,找到之后再通过指针扫描寻找可用的基址</p>
<p>阳光 内存实际值&#x3D;游戏显示值</p>
<p>智慧树高度 内存实际值&#x3D;游戏显示值</p>
<p>金钱 内存实际值&#x3D;游戏显示值&#x2F;10</p>
<p>花肥,杀虫剂,巧克力,树肥  内存实际值&#x3D;游戏显示值+1000</p>
<p>关键函数和变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Type</span> &#123;</span></span><br><span class="line">    Sunlight, Money, TreeHeight, Chocolate, TreeFood, FlowerFood, Insecticide</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义映射表用于保存各项偏移值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offsetTable[<span class="number">10</span>] = &#123; <span class="number">0x5578</span>,<span class="number">0x50</span>,<span class="number">0x11c</span>,<span class="number">0x250</span>,<span class="number">0x258</span>,<span class="number">0x220</span>,<span class="number">0x224</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取某些项目的值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">getSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr,<span class="type">unsigned</span> <span class="type">int</span> type)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight) </span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置某些项目的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr,<span class="type">unsigned</span> <span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    WriteProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="卡槽植物"><a href="#卡槽植物" class="headerlink" title="卡槽植物"></a>卡槽植物</h1><p>十个卡槽,每个卡槽对应一个植物,可以在坚果保龄球2中根据卡槽1(最左边的卡槽)的坚果变化来找到卡槽的地址,之后再寻找基址</p>
<p>具体方法: 初值未知,如果卡槽1的植物和新的卡槽1(原卡槽2)的植物相同,则扫不变的值,否则扫变化的值</p>
<p>卡槽之间的偏移可以通过浏览卡槽1内存区域看出,为0x50</p>
<p>坚果植物卡槽编号:</p>
<p>普通坚果 3</p>
<p>爆炸坚果 49</p>
<p>巨型坚果 50</p>
<p>设置卡槽植物函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置卡槽植物</span></span><br><span class="line">BOOL <span class="title function_">SetPlantCard</span><span class="params">(HANDLE hProcess,DWORD BaseAddr,DWORD nCard,DWORD plantType)</span> &#123;</span><br><span class="line">    DWORD cardAddr = BaseAddr + <span class="number">0x355E0C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x868</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x15C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x5C</span>+nCard*<span class="number">0x50</span>;<span class="comment">//卡槽偏移</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessMemory(hProcess, cardAddr, &amp;plantType, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="种植无冷却"><a href="#种植无冷却" class="headerlink" title="种植无冷却"></a>种植无冷却</h1><p>具体方法: 仅针对一个卡槽,初始值未知,种植后持续变化,冷却完毕后不变,反复扫描并查找基址,查看对应内存区域再对照植物编号可以发现卡槽间的偏移为0x50</p>
<p>冷却特点: 可种植状态冷却值为0,种植后冷却值持续增长,到达冷却上限后,冷却值清零,植物重新可种植</p>
<p>注意: 直接将冷却值置0会导致无法种植</p>
<p>修改方法: </p>
<ol>
<li>修改冷却结束后恢复的速度,将inc指令修改为mov一个较大值 这个</li>
<li>直接跳转到冷却值和冷却上限比较成功的函数</li>
</ol>
<p>以方法2为例 </p>
<p>7E 16 对应汇编指令为  jle   0x18</p>
<p>修改为jmp $+2 即  eb 00  (相对当前指令2字节后的指令)</p>
<p>直接执行冷却值达到冷却上限后的函数(冷却值清零,植物冷却完毕可种植)</p>
<p>附上<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">汇编代码转换网站</a></p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/1_%E5%86%B7%E5%8D%B4%E6%AF%94%E8%BE%83%E9%80%BB%E8%BE%91.png" alt="1 冷却比较逻辑"></p>
<p>关键代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限冷却</span></span><br><span class="line">BOOL <span class="title function_">Uncooled</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> code[<span class="number">2</span>] = &#123; <span class="number">0xeb</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, code, <span class="number">2</span>);<span class="comment">//jle 0x18修改为jmp $+2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复冷却</span></span><br><span class="line">BOOL <span class="title function_">RecoveryCooling</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">2</span>] = &#123; <span class="number">0x7E</span> ,<span class="number">0x16</span> &#125;;<span class="comment">//jmp $+2恢复为jle 0x18</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, OriginalCode, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="无限阳光"><a href="#无限阳光" class="headerlink" title="无限阳光"></a>无限阳光</h1><p>前文已经给出了阳光的地址 基址为0x355E0C 偏移+868 +5578</p>
<p>查找对阳光修改的代码即可</p>
<p>阳光减少代码</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/5_%E9%98%B3%E5%85%89%E5%87%8F%E5%B0%91%E4%BB%A3%E7%A0%81-%E4%BF%AE%E5%A4%8D%E7%89%88.png" alt="5 阳光减少代码-修复版"></p>
<p>阳光增加代码</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/4_%E9%98%B3%E5%85%89%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81.png" alt="4 阳光增加代码"></p>
<p>基本过程: </p>
<ol>
<li><p>设置阳光值为9999</p>
</li>
<li><p>修改阳光减少代码使得种植物不消耗阳光</p>
</li>
<li><p>修改阳光增加代码使得阳光不变化(防止阳光过多导致溢出)</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无限阳光,锁定阳光为9999</span></span><br><span class="line">BOOL <span class="title function_">UnlimitedSun</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Code[<span class="number">3</span>] = &#123; <span class="number">0x29</span>,<span class="number">0xdb</span>,<span class="number">0</span> &#125;;<span class="comment">//cmp ebx,eax 修改为sub ebx,ebx   and ecx,0x32修改为and ecx,0</span></span><br><span class="line">    BOOL flag;</span><br><span class="line">    flag = setSomething(hProcess, BaseAddr, Sunlight, <span class="number">9999</span>);<span class="comment">//修改阳光</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, Code, <span class="number">2</span>);<span class="comment">//修改阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;Code[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//修改阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复阳光消耗</span></span><br><span class="line">BOOL <span class="title function_">RecoverySunConsume</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">3</span>] = &#123; <span class="number">0x3B</span>,<span class="number">0xD8</span>,<span class="number">0x32</span> &#125;;<span class="comment">//sub ebx,ebx恢复为cmp ebx,eax and ecx,0恢复为and ecx,0x32</span></span><br><span class="line">    BOOL flag = WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, OriginalCode, <span class="number">2</span>);<span class="comment">//恢复阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;OriginalCode[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//恢复阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="浓雾透视"><a href="#浓雾透视" class="headerlink" title="浓雾透视"></a>浓雾透视</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>具体方法: 在生存模式浓雾进行,初值未知,通过在雾区种植和铲除路灯花引起的变化来判断,最终可以发现是4字节数据,数值代表雾的浓度,255代表浓雾,0代表没雾,再查找修改雾值的代码</p>
<p>寻找浓雾地址</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/6_%E5%AF%BB%E6%89%BE%E6%B5%93%E9%9B%BE%E5%9C%B0%E5%9D%80.png" alt="6 寻找浓雾地址"></p>
<p>浓雾修改代码 </p>
<p>mov [ecx],edx这行代码修改了雾值,可以改为mov [ecx],0 </p>
<p>注意硬编码为0xc7,0x01,0x00,0x00,0x00,0x00 由于较长无法直接修改代码,所以这里选择使用hook技术</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/7_%E6%B5%93%E9%9B%BE%E4%BB%A3%E7%A0%81.png" alt="7 浓雾代码"></p>
<h2 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h2><p>hook的基本过程</p>
<ol>
<li>读取并保存目的地址原始代码</li>
<li>申请空间(PVZ游戏进程空间)用于存储原始代码 hook代码 jmp返回代码</li>
<li>向申请的空间中写入原始代码 hook代码 jmp返回代码</li>
<li>修改目的地址的代码为jmp HookCode</li>
<li>返回HookCode首地址 用于解除hook</li>
</ol>
<p>值得一提的是jmp指令后跟的偏移值是以jmp的下一条指令首地址计算</p>
<p>jmp指令偏移值&#x3D;目的地址-(jmp指令首地址+5)  这里的5是jmp指令本身的长度 +5便是下一条指令</p>
<p>offset&#x3D;desAddr-(jmpAddr+5)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hook指定地址,申请新空间保存原始代码并写入hookcode,返回申请空间的地址</span></span><br><span class="line">LPVOID <span class="title function_">SetHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, LPCVOID hookCode, SIZE_T hookCodeSize, SIZE_T origCodeSize)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, jmpCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 读取并保存原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, desAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 申请空间用于存储原始代码,hook代码,jmp返回代码</span></span><br><span class="line">    LPVOID allocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, hookCodeSize + origCodeSize + <span class="number">5</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!allocAddr)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向申请空间写入原始代码,hook代码,jmp返回代码  jmp xxx 偏移为目的地址-jmp下一条指令地址</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = (DWORD)desAddr + <span class="number">5</span> - ((DWORD)allocAddr + hookCodeSize + origCodeSize + <span class="number">5</span>);<span class="comment">//hook返回地址的偏移</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, allocAddr, origCode, origCodeSize)                      <span class="comment">//写入原始代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize, hookCode, hookCodeSize)<span class="comment">//写入hook代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize + hookCodeSize, jmpCode, <span class="number">5</span>))<span class="comment">//写入jmpcode</span></span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入失败则释放空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 修改目的地址处的代码  jmp xxx偏移 原始代码后才是需要执行的hook代码</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = ((DWORD)allocAddr + origCodeSize) - ((DWORD)desAddr + <span class="number">5</span>);</span><br><span class="line">    WriteProcessCodeMemory(hProcess, desAddr, jmpCode, <span class="number">5</span>);<span class="comment">//在源地址处写入跳转代码</span></span><br><span class="line">    <span class="keyword">if</span> (origCodeSize &gt; <span class="number">5</span>)<span class="comment">//原始代码长度大于5时nop多余字节</span></span><br><span class="line">    &#123;</span><br><span class="line">        BYTE nopCode[<span class="number">5</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, (DWORD)desAddr + <span class="number">5</span>, nopCode, origCodeSize - <span class="number">5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入nopcode失败则释放空间并返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. hook成功则返回hookCode所在地址</span></span><br><span class="line">    <span class="keyword">return</span> allocAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消hook指定地址,写回原始代码并释放申请空间</span></span><br><span class="line">BOOL <span class="title function_">UnHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, SIZE_T origCodeSize, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 从申请空间中读出原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, allocAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//2. 将原始代码写回目的地址</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, desAddr, origCode, origCodeSize))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//3. 释放申请空间</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="除雾代码"><a href="#除雾代码" class="headerlink" title="除雾代码"></a>除雾代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//除雾 注意保留hook代码首地址</span></span><br><span class="line">LPVOID <span class="title function_">DeFogByHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hookCode[<span class="number">9</span>] = &#123;</span><br><span class="line">        <span class="number">0xc7</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">//mov [ecx],0</span></span><br><span class="line">        <span class="number">0x83</span>,<span class="number">0xc1</span>,<span class="number">0x04</span>                  <span class="comment">//add ecx,0x4</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//写入hook代码进行hook</span></span><br><span class="line">    <span class="keyword">return</span> SetHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, hookCode, <span class="keyword">sizeof</span>(hookCode), <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复雾</span></span><br><span class="line">BOOL <span class="title function_">RecoveryFogByUnHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UnHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, <span class="number">5</span>, allocAddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>hook前 指令为mov [ecx],edx add ecx,04</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/8_%E9%99%A4%E9%9B%BEhook%E5%89%8D.png" alt="8 除雾hook前"></p>
<p>hook后 指令被修改为jmp</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/8.2_%E9%99%A4%E9%9B%BEhook%E5%90%8E.png" alt="8.2 除雾hook后"></p>
<p>hookcode 新分配空间前5个字节正是原始代码 之后是hook代码和jmp返回代码</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/8.3_%E9%99%A4%E9%9B%BEhook%E5%90%8Ehookcode.png" alt="8.3 除雾hook后hookcode"></p>
<h1 id="种植植物"><a href="#种植植物" class="headerlink" title="种植植物"></a>种植植物</h1><h2 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h2><p>程序是执行种植植物的函数后再执行增加植物数量的功能</p>
<p>首先查找草坪上的植物数量,初值0,随着种植个数增加 基址0x355E0C 偏移+868 +D4</p>
<p>再查找是什么修改了植物数量,下断点之后再种植一个植物</p>
<p>断下后查看调用堆栈中的返回地址,即可找到种植函数</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/9.1_%E6%89%BE%E5%88%B0%E7%A7%8D%E6%A4%8Dcall%E5%87%BD%E6%95%B0.png" alt="9.1 找到种植call函数"></p>
<p>这个功能最初使用远程线程注入dll来实现,注入dll虽然比较简单但是却并不通用,在此仅做介绍,比较推荐使用远程代码注入的方式实现</p>
<h2 id="远程线程注入dll函数"><a href="#远程线程注入dll函数" class="headerlink" title="远程线程注入dll函数"></a>远程线程注入dll函数</h2><p>远程线程是当前进程在目标进程中创建一个线程并执行特定代码(这段代码必须在目标进程中而不是当前进程中)</p>
<p>注入dll是因为dll在被进程或线程加载时执行dll的DllMain函数,通过这一特点我们可以实现一些特殊功能</p>
<p>优点: 便于实现</p>
<p>缺点: dll注入容易被检测到</p>
<p>基本过程:</p>
<ol>
<li>打开进程获取进程句柄</li>
<li>在目标进程中申请空间用于存储dll路径名</li>
<li>将dll路径名写入申请的空间中</li>
<li>创建远程线程,执行LoadLibrary函数(加载dll)</li>
<li>目标进程加载dll后自动执行dll的DllMain函数</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建远程线程方式向指定进程注入dll</span></span><br><span class="line">BOOL <span class="title function_">InjectDllByRemoteThread</span><span class="params">(DWORD desProcId,WCHAR* dllPath)</span> &#123;</span><br><span class="line">    <span class="comment">//打开进程获取进程句柄</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, desProcId);</span><br><span class="line">    <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请空间</span></span><br><span class="line">    DWORD pathSize = (wcslen(dllPath) + <span class="number">1</span>) * <span class="number">2</span>; </span><br><span class="line">    LPVOID newMemAddr = VirtualAllocEx(hProcess, <span class="number">0</span>, pathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!newMemAddr)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入dll路径</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, newMemAddr, dllPath, pathSize, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//创建远程线程</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)LoadLibraryW, newMemAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hThread)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);<span class="comment">//等待线程信号,保证成功注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回收资源</span></span><br><span class="line">    VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回成功</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="远程线程卸载dll函数"><a href="#远程线程卸载dll函数" class="headerlink" title="远程线程卸载dll函数"></a>远程线程卸载dll函数</h2><p>很多教程只给出了如何注入dll,没有演示如何卸载</p>
<p>如果只注入不卸载会导致下次再注入时不会执行特定函数(由于dll已经被加载过) 不方便实时调试更新dll等问题</p>
<p>基本过程: </p>
<ol>
<li>在目标进程申请内存,将需要卸载的dll模块名称写入该内存</li>
<li>通过枚举模块来查找指定模块</li>
<li>成功查找到dll模块则创建远程线程执行<strong>FreeLibrary</strong>函数卸载dll</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">UnLoadDllByRemoteThread</span><span class="params">(DWORD dwProcessId, LPCWSTR lpDllName)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标进程中申请一块内存，并将需要卸载的DLL模块的名称写入该内存</span></span><br><span class="line">    LPVOID lpRemoteDllName = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpRemoteDllName == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, lpRemoteDllName, lpDllName, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找dll模块</span></span><br><span class="line">    HMODULE hModules[<span class="number">1024</span>],DesModule=<span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!EnumProcessModules(hProcess, hModules, <span class="keyword">sizeof</span>(hModules), &amp;dwSize))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，查找需要卸载的DLL模块</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (dwSize / <span class="keyword">sizeof</span>(HMODULE)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WCHAR szModuleName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (GetModuleFileNameExW(hProcess, hModules[i], szModuleName, MAX_PATH) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取模块句柄</span></span><br><span class="line">            <span class="keyword">if</span> (wcsicmp(szModuleName, lpDllName) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DesModule = hModules[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有查找到模块</span></span><br><span class="line">    <span class="keyword">if</span> (!DesModule) &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在目标进程中创建远程线程，执行FreeLibrary函数</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)FreeLibrary, DesModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程执行完成</span></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭句柄</span></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="关键dll函数"><a href="#关键dll函数" class="headerlink" title="关键dll函数"></a>关键dll函数</h2><p>这里使用了三种方法</p>
<p>注意: 不要将代码写入switch(reason)之外,否则可能会导致多次执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">BOOL <span class="title function_">GrowPlant</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD TypePlant)</span> &#123;</span><br><span class="line">    LPVOID PlantFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad</span><br><span class="line">        push <span class="number">-1</span>         <span class="comment">//-1</span></span><br><span class="line">        push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">        mov eax, y       <span class="comment">//y</span></span><br><span class="line">        push x           <span class="comment">//x</span></span><br><span class="line">        mov ecx, BaseAddr</span><br><span class="line">        mov ecx, [ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx, [ecx + <span class="number">0x868</span>]</span><br><span class="line">        push ecx		<span class="comment">//植物种植ebp</span></span><br><span class="line">        call PlantFunc</span><br><span class="line">        popad</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HMODULE hInstance, DWORD fdwReason, LPVOID lpReserved)</span> &#123;</span><br><span class="line">    DWORD BaseAddr = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    DWORD pid = GetCurrentProcessId();</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">    LPVOID PlantFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">    DWORD ebpAddr = BaseAddr+<span class="number">0x355E0C</span>,num=<span class="number">0</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, ebpAddr, &amp;ebpAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    ebpAddr += <span class="number">0x868</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, ebpAddr, &amp;ebpAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);<span class="comment">//必须使用带hProcess参数的才能正确读取到地址,NULL不可以</span></span><br><span class="line">    DWORD x = <span class="number">1</span>, y = <span class="number">1</span>, TypePlant = <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意不要写到switch外,否则可能会一次种多株植物,猜测是dll被多个线程加载导致的</span></span><br><span class="line">    <span class="keyword">switch</span> (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:    <span class="comment">//当进程加载dll模块时执行</span></span><br><span class="line">        <span class="comment">//MessageBoxW(0, L&quot;ProcessAttach!&quot;, L&quot;window2&quot;, 0);</span></span><br><span class="line">        <span class="comment">//1.直接通过使用ReadProcessMemory函数读取内存获取ebp参数</span></span><br><span class="line">        __asm &#123;</span><br><span class="line">            pushad</span><br><span class="line">            push - <span class="number">1</span>         <span class="comment">//-1</span></span><br><span class="line">            push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">            mov eax, y       <span class="comment">//y</span></span><br><span class="line">            push x           <span class="comment">//x</span></span><br><span class="line">            push  ebpAddr    <span class="comment">//ebp</span></span><br><span class="line">            call PlantFunc   </span><br><span class="line">            popad</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过利用寄存器获取ebp(推荐)</span></span><br><span class="line">        x = <span class="number">3</span>, y = <span class="number">2</span>, TypePlant = <span class="number">18</span>;</span><br><span class="line">        __asm &#123;</span><br><span class="line">            pushad</span><br><span class="line">            push - <span class="number">1</span>         <span class="comment">//-1</span></span><br><span class="line">            push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">            mov eax, y       <span class="comment">//y</span></span><br><span class="line">            push x           <span class="comment">//x</span></span><br><span class="line">            mov ecx, BaseAddr</span><br><span class="line">            mov ecx, [ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">            mov ecx, [ecx + <span class="number">0x868</span>]</span><br><span class="line">            push ecx</span><br><span class="line">            call PlantFunc</span><br><span class="line">            popad</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//3. 通过调用函数(推荐)     </span></span><br><span class="line">        GrowPlant(BaseAddr,<span class="number">7</span>,<span class="number">3</span>,<span class="number">23</span>);         </span><br><span class="line">                     </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//case DLL_THREAD_ATTACH:        </span></span><br><span class="line">    <span class="comment">//    printf(&quot;ThreadAttach!\n&quot;);</span></span><br><span class="line">    <span class="comment">//    break;</span></span><br><span class="line">    <span class="comment">//case DLL_THREAD_DETACH:       </span></span><br><span class="line">    <span class="comment">//  if (lpReserved == NULL)</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        FreeLibrary(hInstance);</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:        <span class="comment">//当进程卸载dll模块时执行</span></span><br><span class="line">        MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;ProcessDeTachDll!&quot;</span>, <span class="string">L&quot;window2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>执行结果</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/9.3_%E6%88%90%E5%8A%9F%E7%A7%8D%E6%A4%8D%E4%B8%89%E7%A7%8D%E6%A4%8D%E7%89%A9.png" alt="9.3 成功种植三种植物"></p>
<h2 id="失败代码"><a href="#失败代码" class="headerlink" title="失败代码"></a>失败代码</h2><p>这是写dll函数时遇到的问题 如果直接用 mov ecx,[BaseAddr+0x355E0C]会导致代码执行失败,推测是这条指令访存过慢所以无效</p>
<p>建议mov ecx,BaseAddr之后通过对寄存器操作达到目的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__asm &#123;</span><br><span class="line">        pushad</span><br><span class="line">        push - <span class="number">1</span>         <span class="comment">//-1</span></span><br><span class="line">        push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">        mov eax, y       <span class="comment">//y</span></span><br><span class="line">        push x           <span class="comment">//x</span></span><br><span class="line">        mov ecx,[BaseAddr+ <span class="number">0x355E0C</span>]<span class="comment">//这样不行,推测是访存过慢</span></span><br><span class="line">        mov ecx,[ecx+<span class="number">0x868</span>]</span><br><span class="line">        mov num, ecx</span><br><span class="line">        push ecx</span><br><span class="line">        call PlantFunc</span><br><span class="line">        popad</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="远程线程代码注入-推荐"><a href="#远程线程代码注入-推荐" class="headerlink" title="远程线程代码注入(推荐)"></a>远程线程代码注入(推荐)</h2><p>和远程线程dll注入类似,CreateRemoteThread函数要求的函数原型是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_ LPVOID lpParameter<span class="comment">//使用CreateThread函数传递的参数 该参数是一个指向其他数据的指针,当然也可以强转为其他类型直接使用</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>基本过程:</p>
<ol>
<li>打开进程</li>
<li>定义注入代码(函数)</li>
<li>在目标进程中申请空间并写入注入代码</li>
<li>创建远程线程执行注入代码(函数)</li>
<li>执行完毕释放空间</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以创建远程线程方式种植植物</span></span><br><span class="line">BOOL <span class="title function_">GrowPlantByInjectCode</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr,DWORD x,DWORD y,DWORD PlantType)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);    </span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;                     <span class="comment">//汇编指令              //修正点偏移</span></span><br><span class="line">            <span class="number">0x55</span>,                                   <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                             <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                   <span class="comment">//3 pushad                </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,           <span class="comment">//4 push -1           </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//9 push PlantType        //10     </span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//14 mov eax,y             //15</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//19 push x                //20</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//24 mov ecx,BaseAddr      //25</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,     <span class="comment">//29 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">//35 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x51</span>,                                   <span class="comment">//41 push ecx</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//42 call PlantFunc        //43     //被调方平栈</span></span><br><span class="line">            <span class="number">0x61</span>,                                   <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                   <span class="comment">//48 leave</span></span><br><span class="line">            <span class="number">0xC3</span>                                    <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = PlantType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">25</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc-((DWORD)lpRemoteCodeMem+<span class="number">42</span>+<span class="number">5</span>) ;</span><br><span class="line">        <span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,offset=des-(source+5),减去call自身长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem,<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="种植僵尸"><a href="#种植僵尸" class="headerlink" title="种植僵尸"></a>种植僵尸</h1><h2 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h2><p>与种植植物思路类似</p>
<p>首先在头脑风暴中通过种植僵尸来找到僵尸数量地址</p>
<p>然后找到僵尸数量增加代码</p>
<p>再通过查看调用堆栈和参数找到种植僵尸call</p>
<p>参数应该也是x y type ebp (注意没有-1)</p>
<p>僵尸种植函数的x值在一个call上方,这个call是个switch结构,没有参数,所以x值也没被修改</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/10.1_%E5%83%B5%E5%B0%B8%E7%A7%8D%E6%A4%8D%E4%BB%A3%E7%A0%81.png" alt="10.1 僵尸种植代码"></p>
<h2 id="种植僵尸函数–dll注入版"><a href="#种植僵尸函数–dll注入版" class="headerlink" title="种植僵尸函数–dll注入版"></a>种植僵尸函数–dll注入版</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">GrowZombie</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line">    LPVOID PlantZombieFunc = BaseAddr + <span class="number">0x35390</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad </span><br><span class="line">        push x</span><br><span class="line">        push ZombieType</span><br><span class="line">        mov eax,y</span><br><span class="line">        mov ecx,BaseAddr</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x868</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x178</span>]    <span class="comment">//ebp</span></span><br><span class="line">        call PlantZombieFunc</span><br><span class="line">        popad </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="远程代码注入版"><a href="#远程代码注入版" class="headerlink" title="远程代码注入版"></a>远程代码注入版</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以创建远程线程方式种植僵尸</span></span><br><span class="line">BOOL <span class="title function_">GrowZombieByRemoteThread</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line"></span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;</span><br><span class="line">            <span class="number">0x55</span>,                                       <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                                 <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                       <span class="comment">//3 pushad</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//4 push x</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//9 push ZombieType</span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//14 mov eax,y</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//19 mov ecx,BaseAddr</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,         <span class="comment">//24 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//30 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//36 mov ecx,[ecx+0x178]</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//42 call PlantZombieFunc</span></span><br><span class="line">            <span class="number">0x61</span>,                                       <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                       <span class="comment">//48 leave </span></span><br><span class="line">            <span class="number">0xC3</span>                                        <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x35390</span>; <span class="comment">//种植僵尸函数</span></span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">5</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = ZombieType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc - ((DWORD)lpRemoteCodeMem + <span class="number">42</span> + <span class="number">5</span>);<span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,要减去call长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shlwapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;psapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Type</span> &#123;</span></span><br><span class="line">    Sunlight, Money, TreeHeight, Chocolate, TreeFood, FlowerFood, Insecticide</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offsetTable[<span class="number">10</span>] = &#123; <span class="number">0x5578</span>,<span class="number">0x50</span>,<span class="number">0x11c</span>,<span class="number">0x250</span>,<span class="number">0x258</span>,<span class="number">0x220</span>,<span class="number">0x224</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据进程名获取进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* processName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);<span class="comment">// 创建一个进程快照</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果创建失败，返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 PROCESSENTRY32 结构体，用于存储进程信息</span></span><br><span class="line">    PROCESSENTRY32 processEntry = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);   <span class="comment">//必须初始化,否则调用Process32First会失败</span></span><br><span class="line">    <span class="keyword">if</span> (!Process32First(snapshot, &amp;processEntry)) &#123;</span><br><span class="line">        CloseHandle(snapshot);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果获取第一个进程信息失败，关闭进程快照句柄并返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历进程列表</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">wchar_t</span> currentProcessName[MAX_PATH];                           <span class="comment">// 获取当前进程的名称</span></span><br><span class="line">        wcscpy_s(currentProcessName, MAX_PATH, processEntry.szExeFile); <span class="comment">//szExeFile存储了进程对应可执行文件的名称</span></span><br><span class="line">        <span class="keyword">if</span> (wcscmp(currentProcessName, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">            CloseHandle(snapshot);                                  <span class="comment">// 如果当前进程名称和指定的进程名称相同，返回进程 ID</span></span><br><span class="line">            <span class="keyword">return</span> processEntry.th32ProcessID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (Process32Next(snapshot, &amp;processEntry));               <span class="comment">//获取快照中下一个进程的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遍历完整个进程列表都没有找到指定进程，关闭进程快照句柄并返回 0</span></span><br><span class="line">    CloseHandle(snapshot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据进程模块名获取基址</span></span><br><span class="line">LPVOID <span class="title function_">GetModuleBaseAddress</span><span class="params">(DWORD processId, LPCWSTR moduleName)</span> &#123;</span><br><span class="line">    LPVOID lpBaseAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId); <span class="comment">// 打开进程句柄</span></span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 枚举进程中的所有模块</span></span><br><span class="line">        HMODULE hMods[<span class="number">1024</span>];</span><br><span class="line">        DWORD cbNeeded;</span><br><span class="line">        <span class="keyword">if</span> (EnumProcessModules(hProcess, hMods, <span class="keyword">sizeof</span>(hMods), &amp;cbNeeded)) &#123;</span><br><span class="line">            DWORD dwModuleCount = cbNeeded / <span class="keyword">sizeof</span>(HMODULE);<span class="comment">// 计算模块数量</span></span><br><span class="line">            <span class="comment">// 获取指定模块的信息</span></span><br><span class="line">            <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; dwModuleCount; i++) &#123;</span><br><span class="line">                TCHAR szModName[MAX_PATH];</span><br><span class="line">                <span class="comment">//获取指定模块的完整路径名</span></span><br><span class="line">                <span class="keyword">if</span> (GetModuleFileNameEx(hProcess, hMods[i], szModName, MAX_PATH)) &#123;<span class="comment">//函数成功返回字符串长度,注意第四个参数的单位为字符而非字节</span></span><br><span class="line">                    <span class="keyword">if</span> (wcsstr(szModName, moduleName)) &#123;<span class="comment">//查找模块名,若成功则返回子串第一次出现的指针</span></span><br><span class="line">                        MODULEINFO modInfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                        <span class="keyword">if</span> (GetModuleInformation(hProcess, hMods[i], &amp;modInfo, <span class="keyword">sizeof</span>(MODULEINFO))) &#123;<span class="comment">//获取模块信息并保存到modInfo中</span></span><br><span class="line">                            lpBaseAddress = modInfo.lpBaseOfDll;<span class="comment">//模块基地址</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess); <span class="comment">// 关闭进程句柄</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lpBaseAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hook指定地址,申请新空间保存原始代码并写入hookcode,返回申请空间的地址</span></span><br><span class="line">LPVOID <span class="title function_">SetHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, LPCVOID hookCode, SIZE_T hookCodeSize, SIZE_T origCodeSize)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, jmpCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 读取并保存原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, desAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 申请空间用于存储原始代码,hook代码,jmp返回代码</span></span><br><span class="line">    LPVOID allocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, hookCodeSize + origCodeSize + <span class="number">5</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!allocAddr)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向申请空间写入原始代码,hook代码,jmp返回代码  jmp xxx 偏移为目的地址-jmp下一条指令地址</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = (DWORD)desAddr + <span class="number">5</span> - ((DWORD)allocAddr + hookCodeSize + origCodeSize + <span class="number">5</span>);<span class="comment">//hook返回地址的偏移</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, allocAddr, origCode, origCodeSize)                      <span class="comment">//写入原始代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize, hookCode, hookCodeSize)<span class="comment">//写入hook代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize + hookCodeSize, jmpCode, <span class="number">5</span>))<span class="comment">//写入jmpcode</span></span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入失败则释放空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 修改目的地址处的代码  jmp xxx偏移 原始代码后才是需要执行的hook代码</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = ((DWORD)allocAddr + origCodeSize) - ((DWORD)desAddr + <span class="number">5</span>);</span><br><span class="line">    WriteProcessCodeMemory(hProcess, desAddr, jmpCode, <span class="number">5</span>);<span class="comment">//在源地址处写入跳转代码</span></span><br><span class="line">    <span class="keyword">if</span> (origCodeSize &gt; <span class="number">5</span>)<span class="comment">//原始代码长度大于5时nop多余字节</span></span><br><span class="line">    &#123;</span><br><span class="line">        BYTE nopCode[<span class="number">5</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, (DWORD)desAddr + <span class="number">5</span>, nopCode, origCodeSize - <span class="number">5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入nopcode失败则释放空间并返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. hook成功则返回hookCode所在地址</span></span><br><span class="line">    <span class="keyword">return</span> allocAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消hook指定地址,写回原始代码并释放申请空间</span></span><br><span class="line">BOOL <span class="title function_">UnHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, SIZE_T origCodeSize, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 从申请空间中读出原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, allocAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//2. 将原始代码写回目的地址</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, desAddr, origCode, origCodeSize))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//3. 释放申请空间</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取某些项目的值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">getSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr, <span class="type">unsigned</span> <span class="type">int</span> type)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置某些项目的值</span></span><br><span class="line">BOOL <span class="title function_">setSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr, <span class="type">unsigned</span> <span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    <span class="keyword">return</span> WriteProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限冷却</span></span><br><span class="line">BOOL <span class="title function_">Uncooled</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> code[<span class="number">2</span>] = &#123; <span class="number">0xeb</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, code, <span class="number">2</span>);<span class="comment">//jle 0x18修改为jmp $+2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复冷却</span></span><br><span class="line">BOOL <span class="title function_">RecoveryCooling</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">2</span>] = &#123; <span class="number">0x7E</span> ,<span class="number">0x16</span> &#125;;<span class="comment">//jmp $+2修改为jle 0x18</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, OriginalCode, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限阳光,锁定阳光为9999</span></span><br><span class="line">BOOL <span class="title function_">UnlimitedSun</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Code[<span class="number">3</span>] = &#123; <span class="number">0x29</span>,<span class="number">0xdb</span>,<span class="number">0</span> &#125;;<span class="comment">//cmp ebx,eax 修改为sub ebx,ebx   and ecx,0x32修改为and ecx,0</span></span><br><span class="line">    BOOL flag;</span><br><span class="line">    flag = setSomething(hProcess, BaseAddr, Sunlight, <span class="number">9999</span>);<span class="comment">//修改阳光</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, Code, <span class="number">2</span>);<span class="comment">//修改阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;Code[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//修改阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复阳光消耗</span></span><br><span class="line">BOOL <span class="title function_">RecoverySunConsume</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">3</span>] = &#123; <span class="number">0x3B</span>,<span class="number">0xD8</span>,<span class="number">0x32</span> &#125;;<span class="comment">//sub ebx,ebx恢复为cmp ebx,eax and ecx,0恢复为and ecx,0x32</span></span><br><span class="line">    BOOL flag = WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, OriginalCode, <span class="number">2</span>);<span class="comment">//恢复阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;OriginalCode[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//恢复阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除雾</span></span><br><span class="line">LPVOID <span class="title function_">DeFogByHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hookCode[<span class="number">9</span>] = &#123;</span><br><span class="line">        <span class="number">0xc7</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">//mov [ecx],0</span></span><br><span class="line">        <span class="number">0x83</span>,<span class="number">0xc1</span>,<span class="number">0x04</span>                  <span class="comment">//add ecx,0x4</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//写hook代码进行hook</span></span><br><span class="line">    <span class="keyword">return</span> SetHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, hookCode, <span class="keyword">sizeof</span>(hookCode), <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复雾</span></span><br><span class="line">BOOL <span class="title function_">RecoveryFogByUnHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UnHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, <span class="number">5</span>, allocAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程向指定进程注入dll</span></span><br><span class="line">BOOL <span class="title function_">InjectDllByRemoteThread</span><span class="params">(DWORD desProcId,WCHAR* dllPath)</span> &#123;</span><br><span class="line">    <span class="comment">//打开进程获取进程句柄</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, desProcId);</span><br><span class="line">    <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请空间</span></span><br><span class="line">    DWORD pathSize = (wcslen(dllPath) + <span class="number">1</span>) * <span class="number">2</span>; </span><br><span class="line">    LPVOID newMemAddr = VirtualAllocEx(hProcess, <span class="number">0</span>, pathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!newMemAddr)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入dll路径</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, newMemAddr, dllPath, pathSize, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//创建远程线程</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)LoadLibraryW, newMemAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hThread)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);<span class="comment">//等待线程信号,保证成功注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回收资源</span></span><br><span class="line">    VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回成功</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程释放指定进程dll</span></span><br><span class="line">BOOL <span class="title function_">UnLoadDllByRemoteThread</span><span class="params">(DWORD dwProcessId, LPCWSTR lpDllName)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标进程中申请一块内存，并将需要卸载的DLL模块的名称写入该内存</span></span><br><span class="line">    LPVOID lpRemoteDllName = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpRemoteDllName == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, lpRemoteDllName, lpDllName, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找dll模块</span></span><br><span class="line">    HMODULE hModules[<span class="number">1024</span>],DesModule=<span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!EnumProcessModules(hProcess, hModules, <span class="keyword">sizeof</span>(hModules), &amp;dwSize))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，查找需要卸载的DLL模块</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (dwSize / <span class="keyword">sizeof</span>(HMODULE)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WCHAR szModuleName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (GetModuleFileNameExW(hProcess, hModules[i], szModuleName, MAX_PATH) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取模块句柄</span></span><br><span class="line">            <span class="keyword">if</span> (wcsicmp(szModuleName, lpDllName) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DesModule = hModules[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有查找到模块</span></span><br><span class="line">    <span class="keyword">if</span> (!DesModule) &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在目标进程中创建远程线程，执行FreeLibrary函数</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)FreeLibrary, DesModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程执行完成</span></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭句柄</span></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以创建远程线程方式种植植物</span></span><br><span class="line">BOOL <span class="title function_">GrowPlantByInjectCode</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr,DWORD x,DWORD y,DWORD PlantType)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);    </span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;                     <span class="comment">//汇编指令              //修正点偏移</span></span><br><span class="line">            <span class="number">0x55</span>,                                   <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                             <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                   <span class="comment">//3 pushad                </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,           <span class="comment">//4 push -1           </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//9 push PlantType        //10     </span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//14 mov eax,y             //15</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//19 push x                //20</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//24 mov ecx,BaseAddr      //25</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,     <span class="comment">//29 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">//35 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x51</span>,                                   <span class="comment">//41 push ecx</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//42 call PlantFunc        //43     //被调方平栈</span></span><br><span class="line">            <span class="number">0x61</span>,                                   <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                   <span class="comment">//48 leave</span></span><br><span class="line">            <span class="number">0xC3</span>                                    <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = PlantType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">25</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc-((DWORD)lpRemoteCodeMem+<span class="number">42</span>+<span class="number">5</span>) ;</span><br><span class="line">        <span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,offset=des-(source+5),减去call自身长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem,<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以创建远程线程方式种植僵尸</span></span><br><span class="line">BOOL <span class="title function_">GrowZombieByInjectCode</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line"></span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;</span><br><span class="line">            <span class="number">0x55</span>,                                       <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                                 <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                       <span class="comment">//3 pushad</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//4 push x</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//9 push ZombieType</span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//14 mov eax,y</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//19 mov ecx,BaseAddr</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,         <span class="comment">//24 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//30 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//36 mov ecx,[ecx+0x178]</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//42 call PlantZombieFunc</span></span><br><span class="line">            <span class="number">0x61</span>,                                       <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                       <span class="comment">//48 leave </span></span><br><span class="line">            <span class="number">0xC3</span>                                        <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x35390</span>; <span class="comment">//种植僵尸函数</span></span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">5</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = ZombieType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc - ((DWORD)lpRemoteCodeMem + <span class="number">42</span> + <span class="number">5</span>);<span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,要减去call长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置卡槽植物</span></span><br><span class="line">BOOL <span class="title function_">SetPlantCard</span><span class="params">(HANDLE hProcess,DWORD BaseAddr,DWORD nCard,DWORD plantType)</span> &#123;</span><br><span class="line">    DWORD cardAddr = BaseAddr + <span class="number">0x355E0C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x868</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x15C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x5C</span>+nCard*<span class="number">0x50</span>;<span class="comment">//卡槽偏移</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessMemory(hProcess, cardAddr, &amp;plantType, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">choiceMenu</span><span class="params">(HANDLE hProcess,DWORD Pid, LPVOID BaseAddr)</span> &#123;</span><br><span class="line">    DWORD choice = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    DWORD fogAddr = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x, y, Type;</span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\tWelcome to PVZ Modifier!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t0.退出\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t1.修改阳光数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t2.修改金钱数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t3.修改智慧树高\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t4.修改巧克力数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t5.修改树肥\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t6.修改花肥\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t7.修改杀虫剂\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t8.无限冷却\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t9.恢复冷却\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t10.无限阳光\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t11.恢复阳光消耗\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t12.除雾\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t13.恢复雾\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t14.种植植物\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t15.生成僵尸\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\tPlease choose your option:[ ]\b\b&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\tPlease input Num:&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">            setSomething(hProcess, BaseAddr, choice - <span class="number">1</span>, num);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            Uncooled(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            RecoveryCooling(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            UnlimitedSun(hProcess,BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            RecoverySunConsume(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            fogAddr=(DWORD)DeFogByHook(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">            RecoveryFogByUnHook(hProcess, BaseAddr,fogAddr );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入X Y PlantType: &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;Type);</span><br><span class="line">            GrowPlantByInjectCode(Pid, BaseAddr,x,y,Type );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入X Y ZombieType: &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;Type);</span><br><span class="line">            GrowZombieByInjectCode(Pid, BaseAddr, x, y, Type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取进程pid</span></span><br><span class="line">    DWORD Pid = GetProcessIdByName(<span class="string">L&quot;PlantsVsZombies.exe&quot;</span>);</span><br><span class="line">	<span class="comment">//打开进程,获取进程句柄</span></span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE,Pid);</span><br><span class="line">    <span class="comment">//获取进程基址</span></span><br><span class="line">    DWORD BaseAddr=GetModuleBaseAddress(Pid, <span class="string">L&quot;PlantsVsZombies.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    choiceMenu(hProcess, Pid, BaseAddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//dll注入</span></span><br><span class="line">    <span class="comment">//InjectDllByRemoteThread(Pid, L&quot;E:\\MyProject\\vsProjects\\Project1\\Debug\\DllPlant3.dll&quot;);</span></span><br><span class="line">    <span class="comment">//int op = 1;</span></span><br><span class="line">    <span class="comment">//printf(&quot;输入0卸载dll:&quot;);</span></span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;op);</span></span><br><span class="line">    <span class="comment">//if(op==0)</span></span><br><span class="line">    <span class="comment">//    UnLoadDllByRemoteThread(Pid, L&quot;E:\\MyProject\\vsProjects\\Project1\\Debug\\DllPlant3.dll&quot;);//加载完dll之后释放掉</span></span><br><span class="line"></span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>DLL代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">BOOL <span class="title function_">GrowPlant</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD TypePlant)</span> &#123;</span><br><span class="line">    LPVOID PlantFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad</span><br><span class="line">        push <span class="number">-1</span>         <span class="comment">//-1</span></span><br><span class="line">        push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">        mov eax, y       <span class="comment">//y</span></span><br><span class="line">        push x           <span class="comment">//x</span></span><br><span class="line">        mov ecx, BaseAddr</span><br><span class="line">        mov ecx, [ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx, [ecx + <span class="number">0x868</span>]</span><br><span class="line">        push ecx</span><br><span class="line">        call PlantFunc</span><br><span class="line">        popad</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">GrowZombie</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line">    LPVOID PlantZombieFunc = BaseAddr + <span class="number">0x35390</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad </span><br><span class="line">        push x</span><br><span class="line">        push ZombieType</span><br><span class="line">        mov eax,y</span><br><span class="line">        mov ecx,BaseAddr</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x868</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x178</span>]    <span class="comment">//ebp</span></span><br><span class="line">        call PlantZombieFunc</span><br><span class="line">        popad </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HMODULE hInstance, DWORD fdwReason, LPVOID lpReserved)</span> &#123;</span><br><span class="line">    DWORD BaseAddr = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    DWORD pid = GetCurrentProcessId();</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:    </span><br><span class="line">        MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;ProcessAttachDll!&quot;</span>, <span class="string">L&quot;window2&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        GrowPlant(BaseAddr,<span class="number">5</span>,<span class="number">3</span>,<span class="number">23</span>);        </span><br><span class="line">        GrowZombie(BaseAddr, <span class="number">6</span>, <span class="number">2</span>, <span class="number">23</span>);</span><br><span class="line">                     </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   <span class="comment">/* case DLL_THREAD_ATTACH:        </span></span><br><span class="line"><span class="comment">        printf(&quot;ThreadAttach!\n&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    case DLL_THREAD_DETACH:       </span></span><br><span class="line"><span class="comment">        if (lpReserved == NULL)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            FreeLibrary(hInstance);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        break;*/</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:        </span><br><span class="line">        MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;ProcessDeTachDll!&quot;</span>, <span class="string">L&quot;window2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1nR4y1u7PZ/?spm_id_from=333.999.0.0&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">你能学会的Cheat Engine零基础入门教程</a></li>
<li><a href="https://www.bilibili.com/video/BV1te4y1U7Jn?p=1&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">【补档】豪哥植物大战僵尸修改教程视频合集</a></li>
<li><a href="https://tieba.baidu.com/f?z=870532241&ct=335544320&lm=0&sc=0&rn=30&tn=baiduPostBrowser&word=%D6%B2%EF%BF%BD%EF%BF%BD%EF%BF%BD%D5%BD%EF%BF%BD%EF%BF%BD%CA%AC&pn=0&red_tag=0372117949">公布我所找到的所有基址及各种功能实现方法</a></li>
<li><a href="https://www.bilibili.com/video/BV1By4y1r7Cq/?p=156&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">C&#x2F;C++全栈软件安全课（调试、反调试、游戏反外挂、软件逆向）持续更新中~~~~</a></li>
<li><a href="https://www.bilibili.com/video/BV1Jb411p7fU/?p=25&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">逆向工程实战 揭秘汇编&#x2F;反汇编（win32+游戏逆向实战）</a></li>
<li><a href="https://bbs.kanxue.com/thread-269910.htm">[原创]常见的几种DLL注入技术</a></li>
<li><a href="https://blog.csdn.net/Sakuya__/article/details/105403172">C++ 调用dll的方法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/602937642">初探DLL注入</a></li>
<li><a href="https://b0ldfrev.gitbook.io/note/windows_operating_system/dll-zhu-ru-zhi-yuan-cheng-xian-cheng-zhu-ru">Dll注入之远程线程注入</a></li>
</ol>
]]></content>
      <categories>
        <category>GameReverse</category>
      </categories>
  </entry>
  <entry>
    <title>2023-08-22日报</title>
    <url>/2023/08/22/%E6%97%A5%E6%8A%A5/2023-08/2023-08-22%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="一-利用GitHubPage搭建了个人博客"><a href="#一-利用GitHubPage搭建了个人博客" class="headerlink" title="一. 利用GitHubPage搭建了个人博客"></a>一. 利用GitHubPage搭建了个人博客</h2><p>   博客用到了hexo框架和butterfly主题美化<br>   参考资料:<br>   <a href="https://blog.juanertu.com/archives/e3dc5cbb.html">Hexo 框架 (一)：使用 Hexo 快速搭建个人博客</a><br>   <a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E4%BA%AE%E4%B8%BB%E9%A1%8C">Butterfly 安装文档(三) 主题配置</a><br>   <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p>
<h2 id="二-Andorid使用Intent进行活动跳转"><a href="#二-Andorid使用Intent进行活动跳转" class="headerlink" title="二. Andorid使用Intent进行活动跳转"></a>二. Andorid使用Intent进行活动跳转</h2><p>Intent跳转分为显示跳转和隐式跳转</p>
<ol>
<li>显式跳转<br>显式跳转顾名思义显式的在代码中进行跳转<br>关键代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button button1=(Button)findViewById(R.id.Button1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;<span class="comment">//显式intent 很明显可以看到跳转逻辑</span></span><br><span class="line">            Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,SecondActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li>
<li>隐式跳转<br>隐式跳转需要在AndoridManifest文件中,给活动的intent-filter中设置action和categories<br>每个intent只能指定一个action,可以指定多个categories<br>必须所有指定的action和categories都匹配成功才能跳转<br>关键代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button button2=(Button)findViewById(R.id.Button2);</span><br><span class="line">     button2.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">             <span class="comment">//每个intent只能指定一个action</span></span><br><span class="line">             Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.MainActivity.ACTION_START&quot;</span>);</span><br><span class="line">             <span class="comment">//可以指定多个category</span></span><br><span class="line">             intent.addCategory(<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>);</span><br><span class="line">             startActivity(intent);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.MainActivity.ACTION_START&quot;</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>搭建个人博客方便分类归纳整理文章,本地管理还是有点乱<br>今天起得比较晚,希望晚上睡早一点明天早起<br>今天主要就是搭建博客,明天需要复现题目以及写CS修改器<br>2023-08-22在此立下Flag以后坚持写日报</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>JNI初探</title>
    <url>/2023/08/22/Android/NDK/JNI%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.jianshu.com/p/aba734d5b5cd">Android JNI编程—JNI基础</a></li>
<li><a href="https://bbs.kanxue.com/thread-278219.htm">[原创]《安卓逆向这档事》十二、大佬帮我分析一下</a></li>
<li><a href="https://www.jianshu.com/p/b71aeb4ed13d">Android JNI学习(三)——Java与Native相互调用</a></li>
</ol>
<h1 id="JNI开发流程"><a href="#JNI开发流程" class="headerlink" title="JNI开发流程"></a>JNI开发流程</h1><ol>
<li><p>Java层: 定义JavaNative方法</p>
</li>
<li><p>JNI层 定义与JavaNative方法对应的JNINative方法</p>
<p>静态注册JNI方法: 包名+方法名建立关联</p>
<p>动态注册JNI方法: 建立方法表将他们关联</p>
</li>
<li><p>C&#x2F;C++层</p>
<p>在JNi的Native方法中调用实现功能的C&#x2F;C++方法</p>
</li>
</ol>
<h2 id="静态注册JNI"><a href="#静态注册JNI" class="headerlink" title="静态注册JNI"></a>静态注册JNI</h2><p>java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.nativetest1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.nativetest1.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;<span class="comment">//java层注册JNI方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;nativetest1&quot;</span>);<span class="comment">//导入库文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;<span class="comment">//注册绑定类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = ActivityMainBinding.inflate(getLayoutInflater());<span class="comment">//绑定布局</span></span><br><span class="line">        setContentView(binding.getRoot());<span class="comment">//将根视图作为主视图</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> binding.sampleText;<span class="comment">//通过binding类直接获取组件</span></span><br><span class="line">        tv.setText(stringFromJNI());<span class="comment">//调用native方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cpp代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//静态注册需要保证以C形式导出 且函数名=Java_PackageName_ClassName_MethodName才能正常被加载</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL<span class="comment">//指定以c方式编译 指定JNI导出函数 返回值类型 调用方式</span></span><br><span class="line"><span class="built_in">Java_com_example_nativetest1_MainActivity_stringFromJNI</span>(</span><br><span class="line">        JNIEnv* env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>布局文件代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/sample_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="逆向分析结果"><a href="#逆向分析结果" class="headerlink" title="逆向分析结果"></a>逆向分析结果</h3><p>根据函数名找到JNI函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_example_nativetest1_MainActivity_stringFromJNI</span><span class="params">(_JNIEnv *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">24</span>]; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v4, <span class="string">&quot;Hello from C++&quot;</span>);</span><br><span class="line">  v1 = (<span class="type">const</span> <span class="type">char</span> *)sub_20CC0((__int64)v4);</span><br><span class="line">  v3 = _JNIEnv::NewStringUTF(a1, v1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v4);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>恢复符号后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_example_nativetest1_MainActivity_stringFromJNI</span><span class="params">(_JNIEnv *env)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> str[<span class="number">24</span>]; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(str, <span class="string">&quot;Hello from C++&quot;</span>);</span><br><span class="line">  v1 = (<span class="type">const</span> <span class="type">char</span> *)strTocstr((__int64)str);</span><br><span class="line">  v3 = _JNIEnv::NewStringUTF(env, v1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(str);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h2 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h2><p><em><em>jint RegisterNatives(jclass clazz, const JNINativeMethod</em> methods, jint nMethods)</em>*</p>
<p>参数：</p>
<p>clazz：指定的类，即 native 方法所属的类<br>methods：方法数组，这里需要了解一下 JNINativeMethod 结构体<br>nMethods：方法数组的长度</p>
<p><strong>JNINativeMethod结构体</strong></p>
<p>该结构体用于保存java层函数和native层函数映射关系</p>
<p>第一个参数是java层声明函数的函数名</p>
<p>第二个参数是函数的方法签名 与函数参数类型和返回值类型有关</p>
<p>第三个参数是native层函数实例的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name;	   <span class="comment">// java层的方法名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* signature; <span class="comment">// 方法签名，例如 ()Ljava/lang/String;</span></span><br><span class="line">    <span class="type">void</span>*       fnPtr; 	   <span class="comment">//  native层的函数指针</span></span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure>

<p>例如有函数,他们的方法签名对应关系如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>;<span class="comment">//&quot;()V&quot;</span></span><br><span class="line">jint <span class="title function_">add</span><span class="params">(jint x,jint y)</span>;<span class="comment">//&quot;(II)I&quot;</span></span><br><span class="line">jstring <span class="title function_">stringFromJNI</span><span class="params">()</span>;<span class="comment">//&quot;()Ljava/lang/String;&quot; 注意String后要跟;</span></span><br></pre></td></tr></table></figure>

<p>其中”()” 中的字符表示参数，后面的则代表返回值类型,具体的每一个字符的对应关系如下：</p>
<p>字符    Java类型        C&#x2F;C++类型<br>V          void                  void<br>Z        jboolean           boolean<br>I           jint                     int<br>J         jlong                  long<br>D         jdouble            double<br>F           jfloat               float<br>B           jbyte              byte<br>C           jchar               char<br>S           jshort             short</p>
<p>数组则以”[“开始，用两个字符表示：</p>
<p>字符      java类型                     c&#x2F;c++类型<br>[Z          jbooleanArray                boolean[]<br>[I           jintArray                         int[]<br>[F          jfloatArray                      float[]<br>[B          jbyteArray                      byte[]<br>[C          jcharArray                      char[]<br>[S          jshortArray                     short[]<br>[D          jdoubleArray                double[]<br>[J           jlongArray                   long[]</p>
<p>上面的都是基本类型，如果参数是Java类，则以”L”开头，以”;”结尾，中间是用”&#x2F;“隔开包及类名，而其对应的C函数的参数则为jobject，一个例外是String类，它对应C类型jstring，例如：<strong>Ljava&#x2F;lang &#x2F;String;</strong> 、Ljava&#x2F;net&#x2F;Socket; 等，如果JAVA函数位于一个嵌入类（也被称为内部类），则用$作为类名间的分隔符，例如：”Landroid&#x2F;os&#x2F;FileUtils$FileStatus;”。</p>
<p>使用registerNativeMethods方法不仅仅是为了改变那丑陋的长方法名，最重要的是可以提高效率，因为当Java类别透过VM呼叫到本地函数时，通常是依靠VM去动态寻找.so中的本地函数(因此它们才需要特定规则的命名格式)，如果某方法需要连续呼叫很多次，则每次都要寻找一遍，所以使用RegisterNatives将本地函数向VM进行登记，可以让其更有效率的找到函数。</p>
<p>registerNativeMethods方法的另一个重要用途是，运行时动态调整本地函数与Java函数值之间的映射关系，只需要多次调用registerNativeMethods()方法，并传入不同的映射表参数即可。</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态注册</span></span><br><span class="line"><span class="comment">//类名</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *ClassName=<span class="string">&quot;com/example/nativetest1/MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">jint <span class="title function_">add</span><span class="params">(JNIEnv* env,jobject obj,jint x,jint y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">jint <span class="title function_">sub</span><span class="params">(JNIEnv* env,jobject obj,jint x,jint y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义本地方法数组 建立映射关系</span></span><br><span class="line"><span class="type">static</span> JNINativeMethod methods[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;add&quot;</span>,<span class="string">&quot;(II)I&quot;</span>,(<span class="type">void</span>*)add&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;sub&quot;</span>,<span class="string">&quot;(II)I&quot;</span>,(<span class="type">void</span>*)sub&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写加载注册方法</span></span><br><span class="line">jint <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM* vm,<span class="type">void</span>* reserved)</span>&#123;</span><br><span class="line">    JNIEnv* env=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//获取JNI环境对象</span></span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;GetEnv((<span class="type">void</span>**)&amp;env,JNI_VERSION_1_6)!=JNI_OK)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//获取需要动态注册的类对象</span></span><br><span class="line">    jclass clazz=env-&gt;FindClass(ClassName);</span><br><span class="line">    <span class="comment">//调用RegisterNatives注册方法</span></span><br><span class="line">    <span class="keyword">if</span>(clazz)&#123;</span><br><span class="line">        env-&gt;RegisterNatives(clazz,methods,<span class="keyword">sizeof</span>(methods)/<span class="keyword">sizeof</span>(methods[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">return</span> JNI_VERSION_1_6;<span class="comment">//注意这里必须返回版本</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意: JNI_OnLoad函数最后一定要返回JNI_VERSION才能成功执行,否则程序会崩溃</strong></p>
<p>java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.nativetest1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.nativetest1.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;nativetest1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;<span class="comment">//注册绑定类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = ActivityMainBinding.inflate(getLayoutInflater());<span class="comment">//绑定布局</span></span><br><span class="line">        setContentView(binding.getRoot());<span class="comment">//将根视图作为主视图</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> binding.sampleText;<span class="comment">//通过binding类直接获取组件</span></span><br><span class="line">        Log.d(<span class="string">&quot;add&quot;</span>,<span class="string">&quot;&quot;</span>+add(<span class="number">51</span>,<span class="number">5</span>));</span><br><span class="line">        tv.setText(stringFromJNI()+add(<span class="number">7</span>,<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml代码同上</p>
<h3 id="逆向分析结果-1"><a href="#逆向分析结果-1" class="headerlink" title="逆向分析结果"></a>逆向分析结果</h3><p>恢复符号后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">JNI_OnLoad</span><span class="params">(_JavaVM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 clazz; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// [rsp+30h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  env = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)_JavaVM::GetEnv(vm, (<span class="type">void</span> **)&amp;env, <span class="number">0x10006</span>) )<span class="comment">// vm &amp;env JNI_VERSION</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    clazz = _JNIEnv::FindClass(env, className);</span><br><span class="line">    <span class="keyword">if</span> ( clazz )</span><br><span class="line">    &#123;</span><br><span class="line">      _JNIEnv::RegisterNatives(env, clazz, methods, <span class="number">2LL</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">65542</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中methods数组如下:</p>
<p>第一个是Java层函数名 第二个是方法签名 第三个是函数地址</p>
<p><img src="/2023/08/22/Android/NDK/JNI%E5%88%9D%E6%8E%A2/1_methods%E6%95%B0%E7%BB%84.png"></p>
<p>跟进查看函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">add</span><span class="params">(__int64 env, __int64 obj, <span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)(y + x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JNI数据类型"><a href="#JNI数据类型" class="headerlink" title="JNI数据类型"></a>JNI数据类型</h2><table>
<thead>
<tr>
<th>Java类型</th>
<th>本地类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>jboolean</td>
<td>C&#x2F;C++8位整型</td>
</tr>
<tr>
<td>byte</td>
<td>jbyte</td>
<td>C&#x2F;C++带符号的8位整型</td>
</tr>
<tr>
<td>char</td>
<td>jchar</td>
<td>C&#x2F;C++无符号的16位整型</td>
</tr>
<tr>
<td>short</td>
<td>jshort</td>
<td>C&#x2F;C++带符号的16位整型</td>
</tr>
<tr>
<td>int</td>
<td>jint</td>
<td>C&#x2F;C++带符号的32位整型</td>
</tr>
<tr>
<td>long</td>
<td>jlong</td>
<td>C&#x2F;C++带符号的64位整型</td>
</tr>
<tr>
<td>float</td>
<td>jfloat</td>
<td>C&#x2F;C++32位浮点型</td>
</tr>
<tr>
<td>double</td>
<td>jdouble</td>
<td>C&#x2F;C++64位浮点型</td>
</tr>
<tr>
<td>Object</td>
<td>jobject</td>
<td>任何Java对象，或者没有对应java类型的对象</td>
</tr>
<tr>
<td>Class</td>
<td>jclass</td>
<td>Class对象</td>
</tr>
<tr>
<td>String</td>
<td>jstring</td>
<td>字符串对象</td>
</tr>
<tr>
<td>Object[]</td>
<td>jobjectArray</td>
<td>任何对象的数组</td>
</tr>
<tr>
<td>boolean[]</td>
<td>jbooleanArray</td>
<td>布尔型数组</td>
</tr>
<tr>
<td>byte[]</td>
<td>jbyteArray</td>
<td>比特型数组</td>
</tr>
<tr>
<td>char[]</td>
<td>jcharArray</td>
<td>字符型数组</td>
</tr>
<tr>
<td>short[]</td>
<td>jshortArray</td>
<td>短整型数组</td>
</tr>
<tr>
<td>int[]</td>
<td>jintArray</td>
<td>整型数组</td>
</tr>
<tr>
<td>long[]</td>
<td>jlongArray</td>
<td>长整型数组</td>
</tr>
<tr>
<td>float[]</td>
<td>jfloatArray</td>
<td>浮点型数组</td>
</tr>
<tr>
<td>double[]</td>
<td>jdoubleArray</td>
<td>双浮点型数组</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Andorid</category>
      </categories>
      <tags>
        <tag>NDK</tag>
      </tags>
  </entry>
  <entry>
    <title>简单计算器APP开发练习</title>
    <url>/2023/08/23/Android/AndoridStudy/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8APP%E5%BC%80%E5%8F%91%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p>显示效果如下<br><img src="/2023/08/23/Android/AndoridStudy/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8APP%E5%BC%80%E5%8F%91%E7%BB%83%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%99%A8%E5%B8%83%E5%B1%80.png"><br>基本思路是用线性布局包裹一个两个文本框和一个网格布局,网格布局内部设置多个计算器按钮</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#EEEEEE&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/result&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;right|bottom&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:lines</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GridLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:columnCount</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:rowCount</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/back&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;@string/clear&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/divide&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;÷&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/multi&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;×&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/clear&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;C&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/seven&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;7&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/eight&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/nine&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;9&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/plus&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;+&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/four&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/five&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/six&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;6&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/sub&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;－&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/one&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/two&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/three&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/sqrt&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;√&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/reciprocal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;1/X&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/zero&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/point&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;.&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/equal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;=&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Java层代码"><a href="#Java层代码" class="headerlink" title="Java层代码"></a>Java层代码</h1><p>由于是简单计算器,功能并不是十分完善<br>主要就是实现两个操作数的运算,仍有不少bug<br>注意点:</p>
<ol>
<li><p>可以设置MainActivity为多个按钮的监听器<br>但是要注意实现View.OnClickListener接口,否则程序会崩溃</p>
</li>
<li><p>一些特殊情况判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.calculator;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意要先实现View.OnClickListener接口,否则会崩溃</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView result;<span class="comment">//文本框</span></span><br><span class="line">    <span class="keyword">private</span> String firstNum=<span class="string">&quot;&quot;</span>;<span class="comment">//第一个操作数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">operate</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;<span class="comment">//操作符</span></span><br><span class="line">    <span class="keyword">private</span> String secondNum=<span class="string">&quot;&quot;</span>;<span class="comment">//第二个操作数</span></span><br><span class="line">    <span class="keyword">private</span> String resultNow=<span class="string">&quot;&quot;</span>;<span class="comment">//当前结果</span></span><br><span class="line">    <span class="keyword">private</span> String showText=<span class="string">&quot;&quot;</span>;<span class="comment">//文本框显示的内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        result=findViewById(R.id.result);</span><br><span class="line">        findViewById(R.id.clear).setOnClickListener(MainActivity.<span class="built_in">this</span>);<span class="comment">//将监听器设置为该类</span></span><br><span class="line">        findViewById(R.id.divide).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.multi).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.seven).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.eight).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.nine).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.plus).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.sub).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.four).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.five).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.six).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.one).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.two).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.three).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.sqrt).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.reciprocal).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.zero).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.point).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.equal).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写onClick方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        String inputText;<span class="comment">//点击按钮的输入字符</span></span><br><span class="line">        <span class="type">int</span> id=v.getId();<span class="comment">//判断id</span></span><br><span class="line">        <span class="keyword">if</span>(id==R.id.sqrt)<span class="comment">//如果是根号,做特殊处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            inputText=<span class="string">&quot;√&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//除了根号之外都可以用toString</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取点击按钮的文本内容</span></span><br><span class="line">            inputText=((TextView)v).getText().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span>(id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//点击清除按钮</span></span><br><span class="line">            <span class="keyword">case</span> R.id.clear:</span><br><span class="line">                clear();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//点击回退按钮</span></span><br><span class="line">            <span class="keyword">case</span> R.id.back:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//点击加减乘除</span></span><br><span class="line">            <span class="keyword">case</span> R.id.plus:</span><br><span class="line">            <span class="keyword">case</span> R.id.sub:</span><br><span class="line">            <span class="keyword">case</span> R.id.multi:</span><br><span class="line">            <span class="keyword">case</span> R.id.divide:</span><br><span class="line">                <span class="comment">//运算符</span></span><br><span class="line">                operate=inputText;</span><br><span class="line">                reFlashText(showText+operate);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//点击等号 进行运算</span></span><br><span class="line">            <span class="keyword">case</span> R.id.equal:</span><br><span class="line">                <span class="comment">//没有第二个操作数,按等号直接设置为第一个操作数</span></span><br><span class="line">                <span class="keyword">if</span>(secondNum==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    reFlashText(firstNum);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                reFlashResult(String.valueOf(calculateFour()));</span><br><span class="line">                reFlashText(showText+<span class="string">&quot;=&quot;</span>+resultNow);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//根号</span></span><br><span class="line">            <span class="keyword">case</span> R.id.sqrt:</span><br><span class="line">                <span class="type">double</span> sqrt_result=Math.sqrt(Double.parseDouble(firstNum));</span><br><span class="line">                reFlashResult(String.valueOf(sqrt_result));</span><br><span class="line">                reFlashText(showText+<span class="string">&quot;=&quot;</span>+resultNow);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//取倒数</span></span><br><span class="line">            <span class="keyword">case</span> R.id.reciprocal:</span><br><span class="line">                <span class="type">double</span> reci_result=<span class="number">1.0</span>/Double.parseDouble(firstNum);</span><br><span class="line">                reFlashResult(String.valueOf(reci_result));</span><br><span class="line">                reFlashText(showText+<span class="string">&quot;=&quot;</span>+resultNow);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//上次运算结果已经得到,并且没有输入操作符,则是一次新的计算 清空内容</span></span><br><span class="line">                <span class="keyword">if</span>(resultNow.length()&gt;<span class="number">0</span>&amp;&amp;operate.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">                    clear();</span><br><span class="line">                <span class="comment">//没有操作符,是在输入第一个操作数,直接拼接操作数即可</span></span><br><span class="line">                <span class="keyword">if</span>(operate.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    firstNum+=inputText;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//有操作符,是在输入第二个操作数</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    secondNum+=inputText;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//整数不需要前导零,小数需要前导零</span></span><br><span class="line">                <span class="comment">//第一个字符默认为0 此时输入0不应该添加新的0,直接将输入数据刷新即可</span></span><br><span class="line">                <span class="comment">//如果是小数点那么0需要拼接小数点,否则不用</span></span><br><span class="line">                <span class="keyword">if</span>(showText.equals(<span class="string">&quot;0&quot;</span>)&amp;&amp;!inputText.equals(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                    reFlashText(inputText);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//拼接上输入字符</span></span><br><span class="line">                    reFlashText(showText+inputText);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateFour</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operate)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)+Double.parseDouble(secondNum);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;－&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)-Double.parseDouble(secondNum);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)*Double.parseDouble(secondNum);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;÷&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)/Double.parseDouble(secondNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">        reFlashText(<span class="string">&quot;0&quot;</span>);<span class="comment">//清空文本框内容</span></span><br><span class="line">        reFlashResult(<span class="string">&quot;&quot;</span>);<span class="comment">//运算结果清空</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//刷新运算结果 每次运算后应该只保留一个运算结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reFlashResult</span><span class="params">(String new_result)</span>&#123;</span><br><span class="line">        resultNow=new_result;</span><br><span class="line">        firstNum=new_result;</span><br><span class="line">        secondNum=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        operate=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//刷新文本显示</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reFlashText</span><span class="params">(String text)</span></span><br><span class="line">    &#123;</span><br><span class="line">        showText=text;</span><br><span class="line">        result.setText(showText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
  </entry>
  <entry>
    <title>2023-08-23日报</title>
    <url>/2023/08/23/%E6%97%A5%E6%8A%A5/2023-08/2023-08-23%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="一-回顾了安卓简易计算器开发"><a href="#一-回顾了安卓简易计算器开发" class="headerlink" title="一. 回顾了安卓简易计算器开发"></a>一. 回顾了安卓简易计算器开发</h2><p>之前学习安卓开发时已经做得差不多,但是java层代码实现有点不太理解就慢慢忘了,今天跟着教学视频继续实现了一下并且做了一些修改</p>
<p>可以给一个类设置为多个按钮的监听器,要注意实现接口和对应方法<br>java的一些数据类型转换方法例如:<br>**Double.parseDouble()**可以将字符串转换为Double类型<br>可以将字符串,颜色,大小等参数写到特定的xml文件中,后期修改维护比较方便<br>安卓引用的图片名不能有中文,引用时直接输入图片名即可,不需要带文件后缀</p>
<h2 id="二-so附加调试可以直接查找模块"><a href="#二-so附加调试可以直接查找模块" class="headerlink" title="二. so附加调试可以直接查找模块"></a>二. so附加调试可以直接查找模块</h2><p>不使用数据库文件,直接附加调试,搜索模块名</p>
<p><img src="/2023/08/23/%E6%97%A5%E6%8A%A5/2023-08/2023-08-23%E6%97%A5%E6%8A%A5/%E9%99%84%E5%8A%A0%E8%B0%83%E8%AF%95%E6%9F%A5%E6%89%BE%E6%A8%A1%E5%9D%97.png" alt="附加调试查找模块"></p>
<p>拿到搜索到模块后点击模块可以看到模块的函数列表,点击之后可以查看函数</p>
<p><img src="/2023/08/23/%E6%97%A5%E6%8A%A5/2023-08/2023-08-23%E6%97%A5%E6%8A%A5/%E7%82%B9%E5%87%BB%E6%A8%A1%E5%9D%97%E5%87%BD%E6%95%B0%E5%8D%B3%E5%8F%AF%E6%9F%A5%E7%9C%8B.png" alt="点击模块函数即可查看"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可能是最近睡得比较晚以及想的太多,今天起得晚还没什么精神,一天也没做多少东西<br>急也没用哈哈哈,把握好现有基本盘稳扎稳打,放平心态不要被影响目标干就完了</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
</search>
