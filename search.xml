<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建</title>
    <url>/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/">https://git-scm.com/</a></p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p>
<p>选择LTS版本</p>
<h2 id="配置Github仓库"><a href="#配置Github仓库" class="headerlink" title="配置Github仓库"></a>配置Github仓库</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>新建仓库为username.github.io</p>
<p>orientalglass.github.io</p>
<p>点击创建即可</p>
<h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><p>首先打开安装的GitBash</p>
<h4 id="配置Github账户信息"><a href="#配置Github账户信息" class="headerlink" title="配置Github账户信息"></a>配置Github账户信息</h4><p>按如下方式设置用户名和GitHub绑定的邮箱</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3_%E8%AE%BE%E7%BD%AE%E8%B4%A6%E6%88%B7.png" alt="3  设置账户"></p>
<h4 id="生成SHH密钥"><a href="#生成SHH密钥" class="headerlink" title="生成SHH密钥"></a>生成SHH密钥</h4><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>之后会生成一个文件夹,打开该文件夹</p>
<p>在GitBash窗口按三次回车后会在文件夹生成id_rsa.pub密钥文件</p>
<p>记事本打开密钥文件复制密钥</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4_%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5.png" alt="4 生成密钥"></p>
<h4 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加SSH Key</h4><p>Github上点击头像 选择settings 选择 SSH And GPG Keys</p>
<p>点击New SHH Key</p>
<p>复制密钥内容 AddShhKey即可</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/6_SiginKey.png" alt="6 SiginKey"></p>
<h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>创建Blog文件夹,用VsCode打开,通过终端输入命令</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用命令安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>终端运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1_hexoinit.png"></p>
<h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h2 id="打开本地服务器进行预览"><a href="#打开本地服务器进行预览" class="headerlink" title="打开本地服务器进行预览"></a>打开本地服务器进行预览</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>浏览器打开<a href="http://localhost:4000/%E5%8D%B3%E5%8F%AF">http://localhost:4000/即可</a></p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2_hexo%E7%95%8C%E9%9D%A2.png"></p>
<h2 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h2><p>首先设置_config.yml文件 翻到最下方设置如下 </p>
<p>注意这里的repo链接是github.com&#x2F;github用户名&#x2F;仓库名.git</p>
<p>branch要使用master</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/7_config.png" alt="7 config"></p>
<p>再在终端安装deployer插件</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/8_%E5%AE%89%E8%A3%85deployer%E6%8F%92%E4%BB%B6.png" alt="8 安装deployer插件"></p>
<p>依次执行下面三个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>最后出现Deploy done:git则说明上传成功</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/9_%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png" alt="9 上传成功"></p>
<p>此时Github仓库已经加载文件,等待一会后即可查看网页</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10_%E6%B5%8F%E8%A7%88github.io.png" alt="10 浏览github.io"></p>
<h1 id="安装配置Bufferfly主题"><a href="#安装配置Bufferfly主题" class="headerlink" title="安装配置Bufferfly主题"></a>安装配置Bufferfly主题</h1><h2 id="安装Butterfly主题"><a href="#安装Butterfly主题" class="headerlink" title="安装Butterfly主题"></a>安装Butterfly主题</h2><ol>
<li>根目录打开终端使用命令安装</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>下载 pug 以及 stylus 的渲染器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置默认主题</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/11_%E5%90%AF%E5%8A%A8butterfly%E4%B8%BB%E9%A2%98.png" alt="11 启动butterfly主题"></p>
</li>
</ol>
<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><p>Hexo 是一个基于 Node.js 的静态博客生成器，它使用 Markdown 文件来创建博客文章，并通过主题来渲染生成静态网页。下面是一些常用的 Hexo 主题命令：</p>
<ol>
<li><p>安装 Hexo 主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-&lt;theme-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用 Hexo 主题：<br>在 Hexo 的配置文件 <code>_config.yml</code> 中，将 <code>theme</code> 属性设置为主题名称：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">&lt;theme-name&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成静态网页：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动本地服务器并预览网站：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除缓存文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一篇文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布草稿（将草稿状态的文章发布为正式文章）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除一篇文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo delete &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑一篇文章：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo edit &lt;post-title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用草稿模式（创建草稿状态的文章）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;post-title&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这些是一些常用的 Hexo 主题命令，你可以根据自己的需求和具体的主题进行相应的操作。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Connection-was-Reset"><a href="#Connection-was-Reset" class="headerlink" title="Connection was Reset"></a>Connection was Reset</h2><p>问题描述: hexo d 上传文件时报错</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%981_%E8%BF%9E%E6%8E%A5reset.png" alt="问题1 连接reset"></p>
<p>解决办法: 由于github的http链接被墙,http链接改为git链接即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:OrientalGlass/orientalglass.github.io.git</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/OrientalGlass/orientalglass.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="上传图片问题"><a href="#上传图片问题" class="headerlink" title="上传图片问题"></a>上传图片问题</h2><p><strong>注意: 图片名不要有空格,否则会导致hexo无法解析,可将空格替换为下划线</strong></p>
<p>参考文章: </p>
<p><a href="https://juejin.cn/post/6882619951857811469">hexo博客中如何插入图片</a></p>
<p><a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E5%85%A8%E5%B1%80%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">资源文件夹</a></p>
<ol>
<li><p>设置post_asset_folder</p>
<p>将根目录配置中的<strong>post_asset_folder</strong>设置为true</p>
<p>之后每次使用hexo new “filename”创建文章时会自动生成同名文件夹用于存储图片</p>
</li>
<li><p>安装renderer插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>

<p>安装后修改根目录配置如下</p>
<p>添加marked这两个字段并设置为true</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%982_%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png"></p>
<p>该插件用于解析图片路径</p>
</li>
<li><p>修改typora插入图片设置</p>
<p>这样设置之后每次复制图片都会自动存储到markdown文件的同名文件夹下,方便复制图片</p>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%982_%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.png" alt="问题2_偏好设置"></p>
</li>
<li><p>复制markdown文件时,将所有图片路径中的**文件名&#x2F;**去除</p>
<p>这是由于经过上述设置后文章会自动转换为index.html文件,同时<strong>图片和html文件在同一文件夹内</strong></p>
<p>故直接用图片文件名即可引用图片,不需要加文件夹名</p>
<p>删除方法: ctrl+f 查找引用 找到后右键更改所有匹配项即可</p>
</li>
</ol>
<p><img src="/2023/08/22/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%97%AE%E9%A2%982_%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="问题2_生成文件路径"></p>
]]></content>
      <categories>
        <category>经验总结</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>植物大战僵尸修改器制作</title>
    <url>/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><ol>
<li><p>CheatEngine工具的基本使用 </p>
<p>推荐视频<a href="https://www.bilibili.com/video/BV1nR4y1u7PZ/?spm_id_from=333.999.0.0&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">你能学会的Cheat Engine零基础入门教程</a></p>
<p>将ce官方给的闯关游戏通关即可</p>
</li>
<li><p>C&#x2F;C++和汇编语言基础</p>
<p>附上<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">汇编代码转换网站</a></p>
</li>
<li><p>WIN32开发基础</p>
<p>了解WIN32命名规则,会使用GPT和查找微软官方文档即可</p>
<p>推荐通过看微软官方文档<a href="https://learn.microsoft.com/en-us/windows/win32/learnwin32/learn-to-program-for-windows">Win32 和 C++ 入门</a> 能创建第一个windows程序即可</p>
</li>
</ol>
<p>示例游戏版本: 中文年度加强版1.1.0.1056</p>
<p>主要参考资料</p>
<ol>
<li><p><a href="https://www.bilibili.com/video/BV1te4y1U7Jn?p=1&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">【补档】豪哥植物大战僵尸修改教程视频合集</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1By4y1r7Cq/?p=156&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">C&#x2F;C++全栈软件安全课（调试、反调试、游戏反外挂、软件逆向）持续更新中~~~~</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Jb411p7fU/?p=25&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">逆向工程实战 揭秘汇编&#x2F;反汇编（win32+游戏逆向实战）</a></p>
</li>
</ol>
<h1 id="基址偏移表"><a href="#基址偏移表" class="headerlink" title="基址偏移表"></a>基址偏移表</h1><p>部分参考: <a href="https://tieba.baidu.com/f?z=870532241&ct=335544320&lm=0&sc=0&rn=30&tn=baiduPostBrowser&word=%D6%B2%EF%BF%BD%EF%BF%BD%EF%BF%BD%D5%BD%EF%BF%BD%EF%BF%BD%CA%AC&pn=0&red_tag=0372117949">公布我所找到的所有基址及各种功能实现方法</a></p>
<p>基址 0x00355E0C</p>
<p>阳光 +868 +5578</p>
<p>金钱 +950 +50</p>
<p>花肥 +950 +220</p>
<p>巧克力 +950 +250</p>
<p>树肥 +950 +258</p>
<p>树高 +950 +11C</p>
<p>杀虫剂 +950 +224</p>
<p>卡槽数 +868 +15C +24</p>
<p>卡槽栏 +868 +15C +5C 此后每个植物栏相隔0x50</p>
<p>植物当前冷却值 +868 +15C +4C 此后每个植物冷却相隔0x50</p>
<p>植物冷却值上限 +868 +15C +50 此后每个植物冷却上限相隔0x50</p>
<p>植物当前数量 +868 +D4</p>
<p>植物种植函数EBP +868</p>
<p>僵尸当前数量 +868 +B8</p>
<p>僵尸种植函数EBP +868 +178</p>
<h1 id="常规项目"><a href="#常规项目" class="headerlink" title="常规项目"></a>常规项目</h1><p>根据变量的变化使用CE寻找,找到之后再通过指针扫描寻找可用的基址</p>
<p>阳光 内存实际值&#x3D;游戏显示值</p>
<p>智慧树高度 内存实际值&#x3D;游戏显示值</p>
<p>金钱 内存实际值&#x3D;游戏显示值&#x2F;10</p>
<p>花肥,杀虫剂,巧克力,树肥  内存实际值&#x3D;游戏显示值+1000</p>
<p>关键函数和变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Type</span> &#123;</span></span><br><span class="line">    Sunlight, Money, TreeHeight, Chocolate, TreeFood, FlowerFood, Insecticide</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义映射表用于保存各项偏移值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offsetTable[<span class="number">10</span>] = &#123; <span class="number">0x5578</span>,<span class="number">0x50</span>,<span class="number">0x11c</span>,<span class="number">0x250</span>,<span class="number">0x258</span>,<span class="number">0x220</span>,<span class="number">0x224</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取某些项目的值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">getSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr,<span class="type">unsigned</span> <span class="type">int</span> type)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight) </span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置某些项目的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr,<span class="type">unsigned</span> <span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    WriteProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="卡槽植物"><a href="#卡槽植物" class="headerlink" title="卡槽植物"></a>卡槽植物</h1><p>十个卡槽,每个卡槽对应一个植物,可以在坚果保龄球2中根据卡槽1(最左边的卡槽)的坚果变化来找到卡槽的地址,之后再寻找基址</p>
<p>具体方法: 初值未知,如果卡槽1的植物和新的卡槽1(原卡槽2)的植物相同,则扫不变的值,否则扫变化的值</p>
<p>卡槽之间的偏移可以通过浏览卡槽1内存区域看出,为0x50</p>
<p>坚果植物卡槽编号:</p>
<p>普通坚果 3</p>
<p>爆炸坚果 49</p>
<p>巨型坚果 50</p>
<p>设置卡槽植物函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置卡槽植物</span></span><br><span class="line">BOOL <span class="title function_">SetPlantCard</span><span class="params">(HANDLE hProcess,DWORD BaseAddr,DWORD nCard,DWORD plantType)</span> &#123;</span><br><span class="line">    DWORD cardAddr = BaseAddr + <span class="number">0x355E0C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x868</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x15C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x5C</span>+nCard*<span class="number">0x50</span>;<span class="comment">//卡槽偏移</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessMemory(hProcess, cardAddr, &amp;plantType, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="种植无冷却"><a href="#种植无冷却" class="headerlink" title="种植无冷却"></a>种植无冷却</h1><p>具体方法: 仅针对一个卡槽,初始值未知,种植后持续变化,冷却完毕后不变,反复扫描并查找基址,查看对应内存区域再对照植物编号可以发现卡槽间的偏移为0x50</p>
<p>冷却特点: 可种植状态冷却值为0,种植后冷却值持续增长,到达冷却上限后,冷却值清零,植物重新可种植</p>
<p>注意: 直接将冷却值置0会导致无法种植</p>
<p>修改方法: </p>
<ol>
<li>修改冷却结束后恢复的速度,将inc指令修改为mov一个较大值 这个</li>
<li>直接跳转到冷却值和冷却上限比较成功的函数</li>
</ol>
<p>以方法2为例 </p>
<p>7E 16 对应汇编指令为  jle   0x18</p>
<p>修改为jmp $+2 即  eb 00  (相对当前指令2字节后的指令)</p>
<p>直接执行冷却值达到冷却上限后的函数(冷却值清零,植物冷却完毕可种植)</p>
<p>附上<a href="https://defuse.ca/online-x86-assembler.htm#disassembly">汇编代码转换网站</a></p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/1_%E5%86%B7%E5%8D%B4%E6%AF%94%E8%BE%83%E9%80%BB%E8%BE%91.png" alt="1 冷却比较逻辑"></p>
<p>关键代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限冷却</span></span><br><span class="line">BOOL <span class="title function_">Uncooled</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> code[<span class="number">2</span>] = &#123; <span class="number">0xeb</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, code, <span class="number">2</span>);<span class="comment">//jle 0x18修改为jmp $+2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复冷却</span></span><br><span class="line">BOOL <span class="title function_">RecoveryCooling</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">2</span>] = &#123; <span class="number">0x7E</span> ,<span class="number">0x16</span> &#125;;<span class="comment">//jmp $+2恢复为jle 0x18</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, OriginalCode, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="无限阳光"><a href="#无限阳光" class="headerlink" title="无限阳光"></a>无限阳光</h1><p>前文已经给出了阳光的地址 基址为0x355E0C 偏移+868 +5578</p>
<p>查找对阳光修改的代码即可</p>
<p>阳光减少代码</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/5_%E9%98%B3%E5%85%89%E5%87%8F%E5%B0%91%E4%BB%A3%E7%A0%81-%E4%BF%AE%E5%A4%8D%E7%89%88.png" alt="5 阳光减少代码-修复版"></p>
<p>阳光增加代码</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/4_%E9%98%B3%E5%85%89%E5%A2%9E%E5%8A%A0%E4%BB%A3%E7%A0%81.png" alt="4 阳光增加代码"></p>
<p>基本过程: </p>
<ol>
<li><p>设置阳光值为9999</p>
</li>
<li><p>修改阳光减少代码使得种植物不消耗阳光</p>
</li>
<li><p>修改阳光增加代码使得阳光不变化(防止阳光过多导致溢出)</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无限阳光,锁定阳光为9999</span></span><br><span class="line">BOOL <span class="title function_">UnlimitedSun</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Code[<span class="number">3</span>] = &#123; <span class="number">0x29</span>,<span class="number">0xdb</span>,<span class="number">0</span> &#125;;<span class="comment">//cmp ebx,eax 修改为sub ebx,ebx   and ecx,0x32修改为and ecx,0</span></span><br><span class="line">    BOOL flag;</span><br><span class="line">    flag = setSomething(hProcess, BaseAddr, Sunlight, <span class="number">9999</span>);<span class="comment">//修改阳光</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, Code, <span class="number">2</span>);<span class="comment">//修改阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;Code[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//修改阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复阳光消耗</span></span><br><span class="line">BOOL <span class="title function_">RecoverySunConsume</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">3</span>] = &#123; <span class="number">0x3B</span>,<span class="number">0xD8</span>,<span class="number">0x32</span> &#125;;<span class="comment">//sub ebx,ebx恢复为cmp ebx,eax and ecx,0恢复为and ecx,0x32</span></span><br><span class="line">    BOOL flag = WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, OriginalCode, <span class="number">2</span>);<span class="comment">//恢复阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;OriginalCode[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//恢复阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="浓雾透视"><a href="#浓雾透视" class="headerlink" title="浓雾透视"></a>浓雾透视</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>具体方法: 在生存模式浓雾进行,初值未知,通过在雾区种植和铲除路灯花引起的变化来判断,最终可以发现是4字节数据,数值代表雾的浓度,255代表浓雾,0代表没雾,再查找修改雾值的代码</p>
<p>寻找浓雾地址</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/6_%E5%AF%BB%E6%89%BE%E6%B5%93%E9%9B%BE%E5%9C%B0%E5%9D%80.png" alt="6 寻找浓雾地址"></p>
<p>浓雾修改代码 </p>
<p>mov [ecx],edx这行代码修改了雾值,可以改为mov [ecx],0 </p>
<p>注意硬编码为0xc7,0x01,0x00,0x00,0x00,0x00 由于较长无法直接修改代码,所以这里选择使用hook技术</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/7_%E6%B5%93%E9%9B%BE%E4%BB%A3%E7%A0%81.png" alt="7 浓雾代码"></p>
<h2 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h2><p>hook的基本过程</p>
<ol>
<li>读取并保存目的地址原始代码</li>
<li>申请空间(PVZ游戏进程空间)用于存储原始代码 hook代码 jmp返回代码</li>
<li>向申请的空间中写入原始代码 hook代码 jmp返回代码</li>
<li>修改目的地址的代码为jmp HookCode</li>
<li>返回HookCode首地址 用于解除hook</li>
</ol>
<p>值得一提的是jmp指令后跟的偏移值是以jmp的下一条指令首地址计算</p>
<p>jmp指令偏移值&#x3D;目的地址-(jmp指令首地址+5)  这里的5是jmp指令本身的长度 +5便是下一条指令</p>
<p>offset&#x3D;desAddr-(jmpAddr+5)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hook指定地址,申请新空间保存原始代码并写入hookcode,返回申请空间的地址</span></span><br><span class="line">LPVOID <span class="title function_">SetHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, LPCVOID hookCode, SIZE_T hookCodeSize, SIZE_T origCodeSize)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, jmpCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 读取并保存原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, desAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 申请空间用于存储原始代码,hook代码,jmp返回代码</span></span><br><span class="line">    LPVOID allocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, hookCodeSize + origCodeSize + <span class="number">5</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!allocAddr)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向申请空间写入原始代码,hook代码,jmp返回代码  jmp xxx 偏移为目的地址-jmp下一条指令地址</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = (DWORD)desAddr + <span class="number">5</span> - ((DWORD)allocAddr + hookCodeSize + origCodeSize + <span class="number">5</span>);<span class="comment">//hook返回地址的偏移</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, allocAddr, origCode, origCodeSize)                      <span class="comment">//写入原始代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize, hookCode, hookCodeSize)<span class="comment">//写入hook代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize + hookCodeSize, jmpCode, <span class="number">5</span>))<span class="comment">//写入jmpcode</span></span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入失败则释放空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 修改目的地址处的代码  jmp xxx偏移 原始代码后才是需要执行的hook代码</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = ((DWORD)allocAddr + origCodeSize) - ((DWORD)desAddr + <span class="number">5</span>);</span><br><span class="line">    WriteProcessCodeMemory(hProcess, desAddr, jmpCode, <span class="number">5</span>);<span class="comment">//在源地址处写入跳转代码</span></span><br><span class="line">    <span class="keyword">if</span> (origCodeSize &gt; <span class="number">5</span>)<span class="comment">//原始代码长度大于5时nop多余字节</span></span><br><span class="line">    &#123;</span><br><span class="line">        BYTE nopCode[<span class="number">5</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, (DWORD)desAddr + <span class="number">5</span>, nopCode, origCodeSize - <span class="number">5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入nopcode失败则释放空间并返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. hook成功则返回hookCode所在地址</span></span><br><span class="line">    <span class="keyword">return</span> allocAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消hook指定地址,写回原始代码并释放申请空间</span></span><br><span class="line">BOOL <span class="title function_">UnHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, SIZE_T origCodeSize, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 从申请空间中读出原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, allocAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//2. 将原始代码写回目的地址</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, desAddr, origCode, origCodeSize))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//3. 释放申请空间</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="除雾代码"><a href="#除雾代码" class="headerlink" title="除雾代码"></a>除雾代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//除雾 注意保留hook代码首地址</span></span><br><span class="line">LPVOID <span class="title function_">DeFogByHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hookCode[<span class="number">9</span>] = &#123;</span><br><span class="line">        <span class="number">0xc7</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">//mov [ecx],0</span></span><br><span class="line">        <span class="number">0x83</span>,<span class="number">0xc1</span>,<span class="number">0x04</span>                  <span class="comment">//add ecx,0x4</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//写入hook代码进行hook</span></span><br><span class="line">    <span class="keyword">return</span> SetHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, hookCode, <span class="keyword">sizeof</span>(hookCode), <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复雾</span></span><br><span class="line">BOOL <span class="title function_">RecoveryFogByUnHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UnHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, <span class="number">5</span>, allocAddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>hook前 指令为mov [ecx],edx add ecx,04</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/8_%E9%99%A4%E9%9B%BEhook%E5%89%8D.png" alt="8 除雾hook前"></p>
<p>hook后 指令被修改为jmp</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/8.2_%E9%99%A4%E9%9B%BEhook%E5%90%8E.png" alt="8.2 除雾hook后"></p>
<p>hookcode 新分配空间前5个字节正是原始代码 之后是hook代码和jmp返回代码</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/8.3_%E9%99%A4%E9%9B%BEhook%E5%90%8Ehookcode.png" alt="8.3 除雾hook后hookcode"></p>
<h1 id="种植植物"><a href="#种植植物" class="headerlink" title="种植植物"></a>种植植物</h1><h2 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h2><p>程序是执行种植植物的函数后再执行增加植物数量的功能</p>
<p>首先查找草坪上的植物数量,初值0,随着种植个数增加 基址0x355E0C 偏移+868 +D4</p>
<p>再查找是什么修改了植物数量,下断点之后再种植一个植物</p>
<p>断下后查看调用堆栈中的返回地址,即可找到种植函数</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/9.1_%E6%89%BE%E5%88%B0%E7%A7%8D%E6%A4%8Dcall%E5%87%BD%E6%95%B0.png" alt="9.1 找到种植call函数"></p>
<p>这个功能最初使用远程线程注入dll来实现,注入dll虽然比较简单但是却并不通用,在此仅做介绍,比较推荐使用远程代码注入的方式实现</p>
<h2 id="远程线程注入dll函数"><a href="#远程线程注入dll函数" class="headerlink" title="远程线程注入dll函数"></a>远程线程注入dll函数</h2><p>远程线程是当前进程在目标进程中创建一个线程并执行特定代码(这段代码必须在目标进程中而不是当前进程中)</p>
<p>注入dll是因为dll在被进程或线程加载时执行dll的DllMain函数,通过这一特点我们可以实现一些特殊功能</p>
<p>优点: 便于实现</p>
<p>缺点: dll注入容易被检测到</p>
<p>基本过程:</p>
<ol>
<li>打开进程获取进程句柄</li>
<li>在目标进程中申请空间用于存储dll路径名</li>
<li>将dll路径名写入申请的空间中</li>
<li>创建远程线程,执行LoadLibrary函数(加载dll)</li>
<li>目标进程加载dll后自动执行dll的DllMain函数</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建远程线程方式向指定进程注入dll</span></span><br><span class="line">BOOL <span class="title function_">InjectDllByRemoteThread</span><span class="params">(DWORD desProcId,WCHAR* dllPath)</span> &#123;</span><br><span class="line">    <span class="comment">//打开进程获取进程句柄</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, desProcId);</span><br><span class="line">    <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请空间</span></span><br><span class="line">    DWORD pathSize = (wcslen(dllPath) + <span class="number">1</span>) * <span class="number">2</span>; </span><br><span class="line">    LPVOID newMemAddr = VirtualAllocEx(hProcess, <span class="number">0</span>, pathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!newMemAddr)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入dll路径</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, newMemAddr, dllPath, pathSize, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//创建远程线程</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)LoadLibraryW, newMemAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hThread)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);<span class="comment">//等待线程信号,保证成功注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回收资源</span></span><br><span class="line">    VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回成功</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="远程线程卸载dll函数"><a href="#远程线程卸载dll函数" class="headerlink" title="远程线程卸载dll函数"></a>远程线程卸载dll函数</h2><p>很多教程只给出了如何注入dll,没有演示如何卸载</p>
<p>如果只注入不卸载会导致下次再注入时不会执行特定函数(由于dll已经被加载过) 不方便实时调试更新dll等问题</p>
<p>基本过程: </p>
<ol>
<li>在目标进程申请内存,将需要卸载的dll模块名称写入该内存</li>
<li>通过枚举模块来查找指定模块</li>
<li>成功查找到dll模块则创建远程线程执行<strong>FreeLibrary</strong>函数卸载dll</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">UnLoadDllByRemoteThread</span><span class="params">(DWORD dwProcessId, LPCWSTR lpDllName)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标进程中申请一块内存，并将需要卸载的DLL模块的名称写入该内存</span></span><br><span class="line">    LPVOID lpRemoteDllName = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpRemoteDllName == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, lpRemoteDllName, lpDllName, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找dll模块</span></span><br><span class="line">    HMODULE hModules[<span class="number">1024</span>],DesModule=<span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!EnumProcessModules(hProcess, hModules, <span class="keyword">sizeof</span>(hModules), &amp;dwSize))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，查找需要卸载的DLL模块</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (dwSize / <span class="keyword">sizeof</span>(HMODULE)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WCHAR szModuleName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (GetModuleFileNameExW(hProcess, hModules[i], szModuleName, MAX_PATH) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取模块句柄</span></span><br><span class="line">            <span class="keyword">if</span> (wcsicmp(szModuleName, lpDllName) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DesModule = hModules[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有查找到模块</span></span><br><span class="line">    <span class="keyword">if</span> (!DesModule) &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在目标进程中创建远程线程，执行FreeLibrary函数</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)FreeLibrary, DesModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程执行完成</span></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭句柄</span></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="关键dll函数"><a href="#关键dll函数" class="headerlink" title="关键dll函数"></a>关键dll函数</h2><p>这里使用了三种方法</p>
<p>注意: 不要将代码写入switch(reason)之外,否则可能会导致多次执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">BOOL <span class="title function_">GrowPlant</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD TypePlant)</span> &#123;</span><br><span class="line">    LPVOID PlantFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad</span><br><span class="line">        push <span class="number">-1</span>         <span class="comment">//-1</span></span><br><span class="line">        push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">        mov eax, y       <span class="comment">//y</span></span><br><span class="line">        push x           <span class="comment">//x</span></span><br><span class="line">        mov ecx, BaseAddr</span><br><span class="line">        mov ecx, [ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx, [ecx + <span class="number">0x868</span>]</span><br><span class="line">        push ecx		<span class="comment">//植物种植ebp</span></span><br><span class="line">        call PlantFunc</span><br><span class="line">        popad</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HMODULE hInstance, DWORD fdwReason, LPVOID lpReserved)</span> &#123;</span><br><span class="line">    DWORD BaseAddr = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    DWORD pid = GetCurrentProcessId();</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">    LPVOID PlantFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">    DWORD ebpAddr = BaseAddr+<span class="number">0x355E0C</span>,num=<span class="number">0</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, ebpAddr, &amp;ebpAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    ebpAddr += <span class="number">0x868</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, ebpAddr, &amp;ebpAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);<span class="comment">//必须使用带hProcess参数的才能正确读取到地址,NULL不可以</span></span><br><span class="line">    DWORD x = <span class="number">1</span>, y = <span class="number">1</span>, TypePlant = <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意不要写到switch外,否则可能会一次种多株植物,猜测是dll被多个线程加载导致的</span></span><br><span class="line">    <span class="keyword">switch</span> (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:    <span class="comment">//当进程加载dll模块时执行</span></span><br><span class="line">        <span class="comment">//MessageBoxW(0, L&quot;ProcessAttach!&quot;, L&quot;window2&quot;, 0);</span></span><br><span class="line">        <span class="comment">//1.直接通过使用ReadProcessMemory函数读取内存获取ebp参数</span></span><br><span class="line">        __asm &#123;</span><br><span class="line">            pushad</span><br><span class="line">            push - <span class="number">1</span>         <span class="comment">//-1</span></span><br><span class="line">            push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">            mov eax, y       <span class="comment">//y</span></span><br><span class="line">            push x           <span class="comment">//x</span></span><br><span class="line">            push  ebpAddr    <span class="comment">//ebp</span></span><br><span class="line">            call PlantFunc   </span><br><span class="line">            popad</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过利用寄存器获取ebp(推荐)</span></span><br><span class="line">        x = <span class="number">3</span>, y = <span class="number">2</span>, TypePlant = <span class="number">18</span>;</span><br><span class="line">        __asm &#123;</span><br><span class="line">            pushad</span><br><span class="line">            push - <span class="number">1</span>         <span class="comment">//-1</span></span><br><span class="line">            push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">            mov eax, y       <span class="comment">//y</span></span><br><span class="line">            push x           <span class="comment">//x</span></span><br><span class="line">            mov ecx, BaseAddr</span><br><span class="line">            mov ecx, [ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">            mov ecx, [ecx + <span class="number">0x868</span>]</span><br><span class="line">            push ecx</span><br><span class="line">            call PlantFunc</span><br><span class="line">            popad</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//3. 通过调用函数(推荐)     </span></span><br><span class="line">        GrowPlant(BaseAddr,<span class="number">7</span>,<span class="number">3</span>,<span class="number">23</span>);         </span><br><span class="line">                     </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//case DLL_THREAD_ATTACH:        </span></span><br><span class="line">    <span class="comment">//    printf(&quot;ThreadAttach!\n&quot;);</span></span><br><span class="line">    <span class="comment">//    break;</span></span><br><span class="line">    <span class="comment">//case DLL_THREAD_DETACH:       </span></span><br><span class="line">    <span class="comment">//  if (lpReserved == NULL)</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        FreeLibrary(hInstance);</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:        <span class="comment">//当进程卸载dll模块时执行</span></span><br><span class="line">        MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;ProcessDeTachDll!&quot;</span>, <span class="string">L&quot;window2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>执行结果</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/9.3_%E6%88%90%E5%8A%9F%E7%A7%8D%E6%A4%8D%E4%B8%89%E7%A7%8D%E6%A4%8D%E7%89%A9.png" alt="9.3 成功种植三种植物"></p>
<h2 id="失败代码"><a href="#失败代码" class="headerlink" title="失败代码"></a>失败代码</h2><p>这是写dll函数时遇到的问题 如果直接用 mov ecx,[BaseAddr+0x355E0C]会导致代码执行失败,推测是这条指令访存过慢所以无效</p>
<p>建议mov ecx,BaseAddr之后通过对寄存器操作达到目的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__asm &#123;</span><br><span class="line">        pushad</span><br><span class="line">        push - <span class="number">1</span>         <span class="comment">//-1</span></span><br><span class="line">        push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">        mov eax, y       <span class="comment">//y</span></span><br><span class="line">        push x           <span class="comment">//x</span></span><br><span class="line">        mov ecx,[BaseAddr+ <span class="number">0x355E0C</span>]<span class="comment">//这样不行,推测是访存过慢</span></span><br><span class="line">        mov ecx,[ecx+<span class="number">0x868</span>]</span><br><span class="line">        mov num, ecx</span><br><span class="line">        push ecx</span><br><span class="line">        call PlantFunc</span><br><span class="line">        popad</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="远程线程代码注入-推荐"><a href="#远程线程代码注入-推荐" class="headerlink" title="远程线程代码注入(推荐)"></a>远程线程代码注入(推荐)</h2><p>和远程线程dll注入类似,CreateRemoteThread函数要求的函数原型是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_ LPVOID lpParameter<span class="comment">//使用CreateThread函数传递的参数 该参数是一个指向其他数据的指针,当然也可以强转为其他类型直接使用</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>基本过程:</p>
<ol>
<li>打开进程</li>
<li>定义注入代码(函数)</li>
<li>在目标进程中申请空间并写入注入代码</li>
<li>创建远程线程执行注入代码(函数)</li>
<li>执行完毕释放空间</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以创建远程线程方式种植植物</span></span><br><span class="line">BOOL <span class="title function_">GrowPlantByInjectCode</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr,DWORD x,DWORD y,DWORD PlantType)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);    </span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;                     <span class="comment">//汇编指令              //修正点偏移</span></span><br><span class="line">            <span class="number">0x55</span>,                                   <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                             <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                   <span class="comment">//3 pushad                </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,           <span class="comment">//4 push -1           </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//9 push PlantType        //10     </span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//14 mov eax,y             //15</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//19 push x                //20</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//24 mov ecx,BaseAddr      //25</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,     <span class="comment">//29 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">//35 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x51</span>,                                   <span class="comment">//41 push ecx</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//42 call PlantFunc        //43     //被调方平栈</span></span><br><span class="line">            <span class="number">0x61</span>,                                   <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                   <span class="comment">//48 leave</span></span><br><span class="line">            <span class="number">0xC3</span>                                    <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = PlantType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">25</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc-((DWORD)lpRemoteCodeMem+<span class="number">42</span>+<span class="number">5</span>) ;</span><br><span class="line">        <span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,offset=des-(source+5),减去call自身长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem,<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="种植僵尸"><a href="#种植僵尸" class="headerlink" title="种植僵尸"></a>种植僵尸</h1><h2 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h2><p>与种植植物思路类似</p>
<p>首先在头脑风暴中通过种植僵尸来找到僵尸数量地址</p>
<p>然后找到僵尸数量增加代码</p>
<p>再通过查看调用堆栈和参数找到种植僵尸call</p>
<p>参数应该也是x y type ebp (注意没有-1)</p>
<p>僵尸种植函数的x值在一个call上方,这个call是个switch结构,没有参数,所以x值也没被修改</p>
<p><img src="/2023/08/22/GameReverse/PlantsVsZombies/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8%E4%BF%AE%E6%94%B9%E5%99%A8%E5%88%B6%E4%BD%9C/10.1_%E5%83%B5%E5%B0%B8%E7%A7%8D%E6%A4%8D%E4%BB%A3%E7%A0%81.png" alt="10.1 僵尸种植代码"></p>
<h2 id="种植僵尸函数–dll注入版"><a href="#种植僵尸函数–dll注入版" class="headerlink" title="种植僵尸函数–dll注入版"></a>种植僵尸函数–dll注入版</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">GrowZombie</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line">    LPVOID PlantZombieFunc = BaseAddr + <span class="number">0x35390</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad </span><br><span class="line">        push x</span><br><span class="line">        push ZombieType</span><br><span class="line">        mov eax,y</span><br><span class="line">        mov ecx,BaseAddr</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x868</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x178</span>]    <span class="comment">//ebp</span></span><br><span class="line">        call PlantZombieFunc</span><br><span class="line">        popad </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="远程代码注入版"><a href="#远程代码注入版" class="headerlink" title="远程代码注入版"></a>远程代码注入版</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以创建远程线程方式种植僵尸</span></span><br><span class="line">BOOL <span class="title function_">GrowZombieByRemoteThread</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line"></span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;</span><br><span class="line">            <span class="number">0x55</span>,                                       <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                                 <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                       <span class="comment">//3 pushad</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//4 push x</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//9 push ZombieType</span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//14 mov eax,y</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//19 mov ecx,BaseAddr</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,         <span class="comment">//24 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//30 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//36 mov ecx,[ecx+0x178]</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//42 call PlantZombieFunc</span></span><br><span class="line">            <span class="number">0x61</span>,                                       <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                       <span class="comment">//48 leave </span></span><br><span class="line">            <span class="number">0xC3</span>                                        <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x35390</span>; <span class="comment">//种植僵尸函数</span></span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">5</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = ZombieType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc - ((DWORD)lpRemoteCodeMem + <span class="number">42</span> + <span class="number">5</span>);<span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,要减去call长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shlwapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;psapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Type</span> &#123;</span></span><br><span class="line">    Sunlight, Money, TreeHeight, Chocolate, TreeFood, FlowerFood, Insecticide</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offsetTable[<span class="number">10</span>] = &#123; <span class="number">0x5578</span>,<span class="number">0x50</span>,<span class="number">0x11c</span>,<span class="number">0x250</span>,<span class="number">0x258</span>,<span class="number">0x220</span>,<span class="number">0x224</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据进程名获取进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* processName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);<span class="comment">// 创建一个进程快照</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果创建失败，返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 PROCESSENTRY32 结构体，用于存储进程信息</span></span><br><span class="line">    PROCESSENTRY32 processEntry = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);   <span class="comment">//必须初始化,否则调用Process32First会失败</span></span><br><span class="line">    <span class="keyword">if</span> (!Process32First(snapshot, &amp;processEntry)) &#123;</span><br><span class="line">        CloseHandle(snapshot);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果获取第一个进程信息失败，关闭进程快照句柄并返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历进程列表</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">wchar_t</span> currentProcessName[MAX_PATH];                           <span class="comment">// 获取当前进程的名称</span></span><br><span class="line">        wcscpy_s(currentProcessName, MAX_PATH, processEntry.szExeFile); <span class="comment">//szExeFile存储了进程对应可执行文件的名称</span></span><br><span class="line">        <span class="keyword">if</span> (wcscmp(currentProcessName, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">            CloseHandle(snapshot);                                  <span class="comment">// 如果当前进程名称和指定的进程名称相同，返回进程 ID</span></span><br><span class="line">            <span class="keyword">return</span> processEntry.th32ProcessID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (Process32Next(snapshot, &amp;processEntry));               <span class="comment">//获取快照中下一个进程的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遍历完整个进程列表都没有找到指定进程，关闭进程快照句柄并返回 0</span></span><br><span class="line">    CloseHandle(snapshot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据进程模块名获取基址</span></span><br><span class="line">LPVOID <span class="title function_">GetModuleBaseAddress</span><span class="params">(DWORD processId, LPCWSTR moduleName)</span> &#123;</span><br><span class="line">    LPVOID lpBaseAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId); <span class="comment">// 打开进程句柄</span></span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 枚举进程中的所有模块</span></span><br><span class="line">        HMODULE hMods[<span class="number">1024</span>];</span><br><span class="line">        DWORD cbNeeded;</span><br><span class="line">        <span class="keyword">if</span> (EnumProcessModules(hProcess, hMods, <span class="keyword">sizeof</span>(hMods), &amp;cbNeeded)) &#123;</span><br><span class="line">            DWORD dwModuleCount = cbNeeded / <span class="keyword">sizeof</span>(HMODULE);<span class="comment">// 计算模块数量</span></span><br><span class="line">            <span class="comment">// 获取指定模块的信息</span></span><br><span class="line">            <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; dwModuleCount; i++) &#123;</span><br><span class="line">                TCHAR szModName[MAX_PATH];</span><br><span class="line">                <span class="comment">//获取指定模块的完整路径名</span></span><br><span class="line">                <span class="keyword">if</span> (GetModuleFileNameEx(hProcess, hMods[i], szModName, MAX_PATH)) &#123;<span class="comment">//函数成功返回字符串长度,注意第四个参数的单位为字符而非字节</span></span><br><span class="line">                    <span class="keyword">if</span> (wcsstr(szModName, moduleName)) &#123;<span class="comment">//查找模块名,若成功则返回子串第一次出现的指针</span></span><br><span class="line">                        MODULEINFO modInfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                        <span class="keyword">if</span> (GetModuleInformation(hProcess, hMods[i], &amp;modInfo, <span class="keyword">sizeof</span>(MODULEINFO))) &#123;<span class="comment">//获取模块信息并保存到modInfo中</span></span><br><span class="line">                            lpBaseAddress = modInfo.lpBaseOfDll;<span class="comment">//模块基地址</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess); <span class="comment">// 关闭进程句柄</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lpBaseAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line">BOOL <span class="title function_">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> &#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualProtectEx(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL bResult = WriteProcessMemory(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    VirtualProtectEx(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hook指定地址,申请新空间保存原始代码并写入hookcode,返回申请空间的地址</span></span><br><span class="line">LPVOID <span class="title function_">SetHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, LPCVOID hookCode, SIZE_T hookCodeSize, SIZE_T origCodeSize)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, jmpCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 读取并保存原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, desAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 申请空间用于存储原始代码,hook代码,jmp返回代码</span></span><br><span class="line">    LPVOID allocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, hookCodeSize + origCodeSize + <span class="number">5</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!allocAddr)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向申请空间写入原始代码,hook代码,jmp返回代码  jmp xxx 偏移为目的地址-jmp下一条指令地址</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = (DWORD)desAddr + <span class="number">5</span> - ((DWORD)allocAddr + hookCodeSize + origCodeSize + <span class="number">5</span>);<span class="comment">//hook返回地址的偏移</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, allocAddr, origCode, origCodeSize)                      <span class="comment">//写入原始代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize, hookCode, hookCodeSize)<span class="comment">//写入hook代码</span></span><br><span class="line">        || !WriteProcessCodeMemory(hProcess, (DWORD)allocAddr + origCodeSize + hookCodeSize, jmpCode, <span class="number">5</span>))<span class="comment">//写入jmpcode</span></span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入失败则释放空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 修改目的地址处的代码  jmp xxx偏移 原始代码后才是需要执行的hook代码</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = ((DWORD)allocAddr + origCodeSize) - ((DWORD)desAddr + <span class="number">5</span>);</span><br><span class="line">    WriteProcessCodeMemory(hProcess, desAddr, jmpCode, <span class="number">5</span>);<span class="comment">//在源地址处写入跳转代码</span></span><br><span class="line">    <span class="keyword">if</span> (origCodeSize &gt; <span class="number">5</span>)<span class="comment">//原始代码长度大于5时nop多余字节</span></span><br><span class="line">    &#123;</span><br><span class="line">        BYTE nopCode[<span class="number">5</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, (DWORD)desAddr + <span class="number">5</span>, nopCode, origCodeSize - <span class="number">5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入nopcode失败则释放空间并返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. hook成功则返回hookCode所在地址</span></span><br><span class="line">    <span class="keyword">return</span> allocAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消hook指定地址,写回原始代码并释放申请空间</span></span><br><span class="line">BOOL <span class="title function_">UnHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, SIZE_T origCodeSize, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 从申请空间中读出原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!ReadProcessMemory(hProcess, allocAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//2. 将原始代码写回目的地址</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessCodeMemory(hProcess, desAddr, origCode, origCodeSize))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//3. 释放申请空间</span></span><br><span class="line">    <span class="keyword">if</span> (!VirtualFreeEx(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取某些项目的值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">getSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr, <span class="type">unsigned</span> <span class="type">int</span> type)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置某些项目的值</span></span><br><span class="line">BOOL <span class="title function_">setSomething</span><span class="params">(HANDLE handle, DWORD BaseAddr, <span class="type">unsigned</span> <span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    DWORD addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    ReadProcessMemory(handle, addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    ReadProcessMemory(handle, (LPVOID)addr, &amp;addr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    <span class="keyword">return</span> WriteProcessMemory(handle, (LPVOID)addr, &amp;num, <span class="keyword">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限冷却</span></span><br><span class="line">BOOL <span class="title function_">Uncooled</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> code[<span class="number">2</span>] = &#123; <span class="number">0xeb</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, code, <span class="number">2</span>);<span class="comment">//jle 0x18修改为jmp $+2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复冷却</span></span><br><span class="line">BOOL <span class="title function_">RecoveryCooling</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">2</span>] = &#123; <span class="number">0x7E</span> ,<span class="number">0x16</span> &#125;;<span class="comment">//jmp $+2修改为jle 0x18</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x9ce02</span>, OriginalCode, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限阳光,锁定阳光为9999</span></span><br><span class="line">BOOL <span class="title function_">UnlimitedSun</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Code[<span class="number">3</span>] = &#123; <span class="number">0x29</span>,<span class="number">0xdb</span>,<span class="number">0</span> &#125;;<span class="comment">//cmp ebx,eax 修改为sub ebx,ebx   and ecx,0x32修改为and ecx,0</span></span><br><span class="line">    BOOL flag;</span><br><span class="line">    flag = setSomething(hProcess, BaseAddr, Sunlight, <span class="number">9999</span>);<span class="comment">//修改阳光</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, Code, <span class="number">2</span>);<span class="comment">//修改阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;Code[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//修改阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复阳光消耗</span></span><br><span class="line">BOOL <span class="title function_">RecoverySunConsume</span><span class="params">(HANDLE hProcess, DWORD BaseAddr)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">3</span>] = &#123; <span class="number">0x3B</span>,<span class="number">0xD8</span>,<span class="number">0x32</span> &#125;;<span class="comment">//sub ebx,ebx恢复为cmp ebx,eax and ecx,0恢复为and ecx,0x32</span></span><br><span class="line">    BOOL flag = WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x27690</span>, OriginalCode, <span class="number">2</span>);<span class="comment">//恢复阳光减少代码</span></span><br><span class="line">    flag &amp;= WriteProcessCodeMemory(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;OriginalCode[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//恢复阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除雾</span></span><br><span class="line">LPVOID <span class="title function_">DeFogByHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hookCode[<span class="number">9</span>] = &#123;</span><br><span class="line">        <span class="number">0xc7</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">//mov [ecx],0</span></span><br><span class="line">        <span class="number">0x83</span>,<span class="number">0xc1</span>,<span class="number">0x04</span>                  <span class="comment">//add ecx,0x4</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//写hook代码进行hook</span></span><br><span class="line">    <span class="keyword">return</span> SetHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, hookCode, <span class="keyword">sizeof</span>(hookCode), <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复雾</span></span><br><span class="line">BOOL <span class="title function_">RecoveryFogByUnHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr, LPVOID allocAddr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UnHook(hProcess, (DWORD)BaseAddr + <span class="number">0x26173</span>, <span class="number">5</span>, allocAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程向指定进程注入dll</span></span><br><span class="line">BOOL <span class="title function_">InjectDllByRemoteThread</span><span class="params">(DWORD desProcId,WCHAR* dllPath)</span> &#123;</span><br><span class="line">    <span class="comment">//打开进程获取进程句柄</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, desProcId);</span><br><span class="line">    <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请空间</span></span><br><span class="line">    DWORD pathSize = (wcslen(dllPath) + <span class="number">1</span>) * <span class="number">2</span>; </span><br><span class="line">    LPVOID newMemAddr = VirtualAllocEx(hProcess, <span class="number">0</span>, pathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!newMemAddr)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入dll路径</span></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, newMemAddr, dllPath, pathSize, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">//创建远程线程</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)LoadLibraryW, newMemAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hThread)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);<span class="comment">//等待线程信号,保证成功注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回收资源</span></span><br><span class="line">    VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回成功</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程释放指定进程dll</span></span><br><span class="line">BOOL <span class="title function_">UnLoadDllByRemoteThread</span><span class="params">(DWORD dwProcessId, LPCWSTR lpDllName)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标进程中申请一块内存，并将需要卸载的DLL模块的名称写入该内存</span></span><br><span class="line">    LPVOID lpRemoteDllName = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpRemoteDllName == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess, lpRemoteDllName, lpDllName, (wcslen(lpDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(WCHAR), <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找dll模块</span></span><br><span class="line">    HMODULE hModules[<span class="number">1024</span>],DesModule=<span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!EnumProcessModules(hProcess, hModules, <span class="keyword">sizeof</span>(hModules), &amp;dwSize))</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，查找需要卸载的DLL模块</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (dwSize / <span class="keyword">sizeof</span>(HMODULE)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WCHAR szModuleName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (GetModuleFileNameExW(hProcess, hModules[i], szModuleName, MAX_PATH) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取模块句柄</span></span><br><span class="line">            <span class="keyword">if</span> (wcsicmp(szModuleName, lpDllName) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DesModule = hModules[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有查找到模块</span></span><br><span class="line">    <span class="keyword">if</span> (!DesModule) &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在目标进程中创建远程线程，执行FreeLibrary函数</span></span><br><span class="line">    HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)FreeLibrary, DesModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程执行完成</span></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭句柄</span></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    VirtualFreeEx(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以创建远程线程方式种植植物</span></span><br><span class="line">BOOL <span class="title function_">GrowPlantByInjectCode</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr,DWORD x,DWORD y,DWORD PlantType)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);    </span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;                     <span class="comment">//汇编指令              //修正点偏移</span></span><br><span class="line">            <span class="number">0x55</span>,                                   <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                             <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                   <span class="comment">//3 pushad                </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,           <span class="comment">//4 push -1           </span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//9 push PlantType        //10     </span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//14 mov eax,y             //15</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//19 push x                //20</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//24 mov ecx,BaseAddr      //25</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,     <span class="comment">//29 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">//35 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x51</span>,                                   <span class="comment">//41 push ecx</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//42 call PlantFunc        //43     //被调方平栈</span></span><br><span class="line">            <span class="number">0x61</span>,                                   <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                   <span class="comment">//48 leave</span></span><br><span class="line">            <span class="number">0xC3</span>                                    <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = PlantType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">25</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc-((DWORD)lpRemoteCodeMem+<span class="number">42</span>+<span class="number">5</span>) ;</span><br><span class="line">        <span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,offset=des-(source+5),减去call自身长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem,<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以创建远程线程方式种植僵尸</span></span><br><span class="line">BOOL <span class="title function_">GrowZombieByInjectCode</span><span class="params">(DWORD dwProcessId,DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line"></span><br><span class="line">    BOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;</span><br><span class="line">            <span class="number">0x55</span>,                                       <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                                 <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                       <span class="comment">//3 pushad</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//4 push x</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//9 push ZombieType</span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//14 mov eax,y</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//19 mov ecx,BaseAddr</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,         <span class="comment">//24 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//30 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//36 mov ecx,[ecx+0x178]</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//42 call PlantZombieFunc</span></span><br><span class="line">            <span class="number">0x61</span>,                                       <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                       <span class="comment">//48 leave </span></span><br><span class="line">            <span class="number">0xC3</span>                                        <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>, desFunc = BaseAddr + <span class="number">0x35390</span>; <span class="comment">//种植僵尸函数</span></span><br><span class="line">        LPVOID lpRemoteCodeMem = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">5</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = ZombieType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = BaseAddr;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = desFunc - ((DWORD)lpRemoteCodeMem + <span class="number">42</span> + <span class="number">5</span>);<span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,要减去call长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (WriteProcessMemory(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">                    CloseHandle(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            VirtualFreeEx(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置卡槽植物</span></span><br><span class="line">BOOL <span class="title function_">SetPlantCard</span><span class="params">(HANDLE hProcess,DWORD BaseAddr,DWORD nCard,DWORD plantType)</span> &#123;</span><br><span class="line">    DWORD cardAddr = BaseAddr + <span class="number">0x355E0C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x868</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x15C</span>;</span><br><span class="line">    ReadProcessMemory(hProcess, cardAddr, &amp;cardAddr, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x5C</span>+nCard*<span class="number">0x50</span>;<span class="comment">//卡槽偏移</span></span><br><span class="line">    <span class="keyword">return</span> WriteProcessMemory(hProcess, cardAddr, &amp;plantType, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">choiceMenu</span><span class="params">(HANDLE hProcess,DWORD Pid, LPVOID BaseAddr)</span> &#123;</span><br><span class="line">    DWORD choice = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    DWORD fogAddr = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> x, y, Type;</span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\tWelcome to PVZ Modifier!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t0.退出\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t1.修改阳光数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t2.修改金钱数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t3.修改智慧树高\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t4.修改巧克力数\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t5.修改树肥\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t6.修改花肥\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t7.修改杀虫剂\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t8.无限冷却\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t9.恢复冷却\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t10.无限阳光\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t11.恢复阳光消耗\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t12.除雾\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t13.恢复雾\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t14.种植植物\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t15.生成僵尸\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\tPlease choose your option:[ ]\b\b&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\tPlease input Num:&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">            setSomething(hProcess, BaseAddr, choice - <span class="number">1</span>, num);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            Uncooled(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            RecoveryCooling(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            UnlimitedSun(hProcess,BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            RecoverySunConsume(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            fogAddr=(DWORD)DeFogByHook(hProcess, BaseAddr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">            RecoveryFogByUnHook(hProcess, BaseAddr,fogAddr );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入X Y PlantType: &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;Type);</span><br><span class="line">            GrowPlantByInjectCode(Pid, BaseAddr,x,y,Type );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入X Y ZombieType: &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;Type);</span><br><span class="line">            GrowZombieByInjectCode(Pid, BaseAddr, x, y, Type);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取进程pid</span></span><br><span class="line">    DWORD Pid = GetProcessIdByName(<span class="string">L&quot;PlantsVsZombies.exe&quot;</span>);</span><br><span class="line">	<span class="comment">//打开进程,获取进程句柄</span></span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE,Pid);</span><br><span class="line">    <span class="comment">//获取进程基址</span></span><br><span class="line">    DWORD BaseAddr=GetModuleBaseAddress(Pid, <span class="string">L&quot;PlantsVsZombies.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    choiceMenu(hProcess, Pid, BaseAddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//dll注入</span></span><br><span class="line">    <span class="comment">//InjectDllByRemoteThread(Pid, L&quot;E:\\MyProject\\vsProjects\\Project1\\Debug\\DllPlant3.dll&quot;);</span></span><br><span class="line">    <span class="comment">//int op = 1;</span></span><br><span class="line">    <span class="comment">//printf(&quot;输入0卸载dll:&quot;);</span></span><br><span class="line">    <span class="comment">//scanf(&quot;%d&quot;, &amp;op);</span></span><br><span class="line">    <span class="comment">//if(op==0)</span></span><br><span class="line">    <span class="comment">//    UnLoadDllByRemoteThread(Pid, L&quot;E:\\MyProject\\vsProjects\\Project1\\Debug\\DllPlant3.dll&quot;);//加载完dll之后释放掉</span></span><br><span class="line"></span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>DLL代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">BOOL <span class="title function_">GrowPlant</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD TypePlant)</span> &#123;</span><br><span class="line">    LPVOID PlantFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad</span><br><span class="line">        push <span class="number">-1</span>         <span class="comment">//-1</span></span><br><span class="line">        push TypePlant   <span class="comment">//植物类型</span></span><br><span class="line">        mov eax, y       <span class="comment">//y</span></span><br><span class="line">        push x           <span class="comment">//x</span></span><br><span class="line">        mov ecx, BaseAddr</span><br><span class="line">        mov ecx, [ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx, [ecx + <span class="number">0x868</span>]</span><br><span class="line">        push ecx</span><br><span class="line">        call PlantFunc</span><br><span class="line">        popad</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">GrowZombie</span><span class="params">(DWORD BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> &#123;</span><br><span class="line">    LPVOID PlantZombieFunc = BaseAddr + <span class="number">0x35390</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad </span><br><span class="line">        push x</span><br><span class="line">        push ZombieType</span><br><span class="line">        mov eax,y</span><br><span class="line">        mov ecx,BaseAddr</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x355E0C</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x868</span>]</span><br><span class="line">        mov ecx,[ecx+<span class="number">0x178</span>]    <span class="comment">//ebp</span></span><br><span class="line">        call PlantZombieFunc</span><br><span class="line">        popad </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL WINAPI <span class="title function_">DllMain</span><span class="params">(HMODULE hInstance, DWORD fdwReason, LPVOID lpReserved)</span> &#123;</span><br><span class="line">    DWORD BaseAddr = GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    DWORD pid = GetCurrentProcessId();</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:    </span><br><span class="line">        MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;ProcessAttachDll!&quot;</span>, <span class="string">L&quot;window2&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        GrowPlant(BaseAddr,<span class="number">5</span>,<span class="number">3</span>,<span class="number">23</span>);        </span><br><span class="line">        GrowZombie(BaseAddr, <span class="number">6</span>, <span class="number">2</span>, <span class="number">23</span>);</span><br><span class="line">                     </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   <span class="comment">/* case DLL_THREAD_ATTACH:        </span></span><br><span class="line"><span class="comment">        printf(&quot;ThreadAttach!\n&quot;);</span></span><br><span class="line"><span class="comment">        break;</span></span><br><span class="line"><span class="comment">    case DLL_THREAD_DETACH:       </span></span><br><span class="line"><span class="comment">        if (lpReserved == NULL)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            FreeLibrary(hInstance);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        break;*/</span></span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:        </span><br><span class="line">        MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;ProcessDeTachDll!&quot;</span>, <span class="string">L&quot;window2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.bilibili.com/video/BV1nR4y1u7PZ/?spm_id_from=333.999.0.0&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">你能学会的Cheat Engine零基础入门教程</a></li>
<li><a href="https://www.bilibili.com/video/BV1te4y1U7Jn?p=1&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">【补档】豪哥植物大战僵尸修改教程视频合集</a></li>
<li><a href="https://tieba.baidu.com/f?z=870532241&ct=335544320&lm=0&sc=0&rn=30&tn=baiduPostBrowser&word=%D6%B2%EF%BF%BD%EF%BF%BD%EF%BF%BD%D5%BD%EF%BF%BD%EF%BF%BD%CA%AC&pn=0&red_tag=0372117949">公布我所找到的所有基址及各种功能实现方法</a></li>
<li><a href="https://www.bilibili.com/video/BV1By4y1r7Cq/?p=156&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">C&#x2F;C++全栈软件安全课（调试、反调试、游戏反外挂、软件逆向）持续更新中~~~~</a></li>
<li><a href="https://www.bilibili.com/video/BV1Jb411p7fU/?p=25&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">逆向工程实战 揭秘汇编&#x2F;反汇编（win32+游戏逆向实战）</a></li>
<li><a href="https://bbs.kanxue.com/thread-269910.htm">[原创]常见的几种DLL注入技术</a></li>
<li><a href="https://blog.csdn.net/Sakuya__/article/details/105403172">C++ 调用dll的方法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/602937642">初探DLL注入</a></li>
<li><a href="https://b0ldfrev.gitbook.io/note/windows_operating_system/dll-zhu-ru-zhi-yuan-cheng-xian-cheng-zhu-ru">Dll注入之远程线程注入</a></li>
</ol>
]]></content>
      <categories>
        <category>GameReverse</category>
      </categories>
  </entry>
  <entry>
    <title>2023-08-22日报</title>
    <url>/2023/08/22/%E6%97%A5%E6%8A%A5/2023-08/2023-08-22%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="一-利用GitHubPage搭建了个人博客"><a href="#一-利用GitHubPage搭建了个人博客" class="headerlink" title="一. 利用GitHubPage搭建了个人博客"></a>一. 利用GitHubPage搭建了个人博客</h2><p>   博客用到了hexo框架和butterfly主题美化<br>   参考资料:<br>   <a href="https://blog.juanertu.com/archives/e3dc5cbb.html">Hexo 框架 (一)：使用 Hexo 快速搭建个人博客</a><br>   <a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E4%BA%AE%E4%B8%BB%E9%A1%8C">Butterfly 安装文档(三) 主题配置</a><br>   <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p>
<h2 id="二-Andorid使用Intent进行活动跳转"><a href="#二-Andorid使用Intent进行活动跳转" class="headerlink" title="二. Andorid使用Intent进行活动跳转"></a>二. Andorid使用Intent进行活动跳转</h2><p>Intent跳转分为显示跳转和隐式跳转</p>
<ol>
<li>显式跳转<br>显式跳转顾名思义显式的在代码中进行跳转<br>关键代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button button1=(Button)findViewById(R.id.Button1);</span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;<span class="comment">//显式intent 很明显可以看到跳转逻辑</span></span><br><span class="line">            Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>,SecondActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li>
<li>隐式跳转<br>隐式跳转需要在AndoridManifest文件中,给活动的intent-filter中设置action和categories<br>每个intent只能指定一个action,可以指定多个categories<br>必须所有指定的action和categories都匹配成功才能跳转<br>关键代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button button2=(Button)findViewById(R.id.Button2);</span><br><span class="line">     button2.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">             <span class="comment">//每个intent只能指定一个action</span></span><br><span class="line">             Intent intent=<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.MainActivity.ACTION_START&quot;</span>);</span><br><span class="line">             <span class="comment">//可以指定多个category</span></span><br><span class="line">             intent.addCategory(<span class="string">&quot;android.intent.category.DEFAULT&quot;</span>);</span><br><span class="line">             startActivity(intent);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.MainActivity.ACTION_START&quot;</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>搭建个人博客方便分类归纳整理文章,本地管理还是有点乱<br>今天起得比较晚,希望晚上睡早一点明天早起<br>今天主要就是搭建博客,明天需要复现题目以及写CS修改器<br>2023-08-22在此立下Flag以后坚持写日报</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>JNI函数静态注册和动态注册</title>
    <url>/2023/08/22/Android/NDK/JNI%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.jianshu.com/p/aba734d5b5cd">Android JNI编程—JNI基础</a></li>
<li><a href="https://bbs.kanxue.com/thread-278219.htm">[原创]《安卓逆向这档事》十二、大佬帮我分析一下</a></li>
<li><a href="https://www.jianshu.com/p/b71aeb4ed13d">Android JNI学习(三)——Java与Native相互调用</a></li>
</ol>
<h1 id="JNI开发流程"><a href="#JNI开发流程" class="headerlink" title="JNI开发流程"></a>JNI开发流程</h1><ol>
<li><p>Java层: 定义JavaNative方法</p>
</li>
<li><p>JNI层 定义与JavaNative方法对应的JNINative方法</p>
<p>静态注册JNI方法: 包名+方法名建立关联</p>
<p>动态注册JNI方法: 建立方法表将他们关联</p>
</li>
<li><p>C&#x2F;C++层</p>
<p>在JNi的Native方法中调用实现功能的C&#x2F;C++方法</p>
</li>
</ol>
<h2 id="静态注册JNI"><a href="#静态注册JNI" class="headerlink" title="静态注册JNI"></a>静态注册JNI</h2><h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><ol>
<li>native关键字用于声明该函数为native层函数</li>
<li>static{ System.loadLibrary(“libname”); }用于加载动态库文件</li>
<li>native函数在加载完库文件后可以直接调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.nativetest1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.nativetest1.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;<span class="comment">//java层注册JNI方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;nativetest1&quot;</span>);<span class="comment">//导入库文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;<span class="comment">//注册绑定类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = ActivityMainBinding.inflate(getLayoutInflater());<span class="comment">//绑定布局</span></span><br><span class="line">        setContentView(binding.getRoot());<span class="comment">//将根视图作为主视图</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> binding.sampleText;<span class="comment">//通过binding类直接获取组件</span></span><br><span class="line">        tv.setText(stringFromJNI());<span class="comment">//调用native方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cpp代码"><a href="#cpp代码" class="headerlink" title="cpp代码"></a>cpp代码</h3><ol>
<li>extern “C”保证以C语言命名规则导出函数,防止c++的名称粉碎影响函数绑定</li>
<li>native函数名必须&#x3D;Java_PackageName_ClassName_MethodName,加载库文件后会自动根据函数名进行绑定</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//静态注册需要保证以C形式导出 且函数名=Java_PackageName_ClassName_MethodName才能正常被加载</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL<span class="comment">//指定以c方式编译 指定JNI导出函数 返回值类型 调用方式</span></span><br><span class="line"><span class="built_in">Java_com_example_nativetest1_MainActivity_stringFromJNI</span>(</span><br><span class="line">        JNIEnv* env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="布局文件代码"><a href="#布局文件代码" class="headerlink" title="布局文件代码"></a>布局文件代码</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/sample_text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="逆向分析结果"><a href="#逆向分析结果" class="headerlink" title="逆向分析结果"></a>逆向分析结果</h3><p>根据函数名直接找到JNI函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_example_nativetest1_MainActivity_stringFromJNI</span><span class="params">(_JNIEnv *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">24</span>]; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(v4, <span class="string">&quot;Hello from C++&quot;</span>);</span><br><span class="line">  v1 = (<span class="type">const</span> <span class="type">char</span> *)sub_20CC0((__int64)v4);</span><br><span class="line">  v3 = _JNIEnv::NewStringUTF(a1, v1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v4);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>恢复符号后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_example_nativetest1_MainActivity_stringFromJNI</span><span class="params">(_JNIEnv *env)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> str[<span class="number">24</span>]; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string&lt;decltype(nullptr)&gt;(str, <span class="string">&quot;Hello from C++&quot;</span>);</span><br><span class="line">  v1 = (<span class="type">const</span> <span class="type">char</span> *)strTocstr((__int64)str);</span><br><span class="line">  v3 = _JNIEnv::NewStringUTF(env, v1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(str);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h2><p>区别于静态注册,动态注册的函数名称可以不定,并且不要求函数是导出类型,安全性高于静态注册</p>
<h3 id="RegisterNatives-函数"><a href="#RegisterNatives-函数" class="headerlink" title="RegisterNatives()函数"></a>RegisterNatives()函数</h3><p>函数原型:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jint <span class="title function_">RegisterNatives</span><span class="params">(jclass clazz, const JNINativeMethod* methods, jint nMethods)</span></span><br></pre></td></tr></table></figure>

<p>参数:</p>
<p>clazz：指定的类，即 native 方法所属的类<br>methods：方法数组，这里需要了解一下 JNINativeMethod 结构体<br>nMethods：方法数组的长度,即有多少个动态注册的导出函数</p>
<h3 id="JNINativeMethod结构体"><a href="#JNINativeMethod结构体" class="headerlink" title="JNINativeMethod结构体"></a>JNINativeMethod结构体</h3><p>该结构体用于<strong>保存java层函数和native层函数映射关系</strong></p>
<p>结构体定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name;	   <span class="comment">// java层的方法名</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* signature; <span class="comment">// 方法签名，例如 ()Ljava/lang/String;</span></span><br><span class="line">    <span class="type">void</span>*       fnPtr; 	   <span class="comment">//  native层的函数指针</span></span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure>

<p>第一个参数是java层声明函数的函数名</p>
<p>第二个参数是函数的方法签名 与函数参数类型和返回值类型有关</p>
<p>第三个参数是native层函数实例的指针</p>
<h3 id="signature方法签名"><a href="#signature方法签名" class="headerlink" title="signature方法签名"></a>signature方法签名</h3><p>有以下函数,他们的方法签名对应关系如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>;<span class="comment">//&quot;()V&quot;</span></span><br><span class="line">jint <span class="title function_">add</span><span class="params">(jint x,jint y)</span>;<span class="comment">//&quot;(II)I&quot;</span></span><br><span class="line">jstring <span class="title function_">stringFromJNI</span><span class="params">()</span>;<span class="comment">//&quot;()Ljava/lang/String;&quot; 注意String后要跟;</span></span><br></pre></td></tr></table></figure>

<p>其中”()” 中的字符表示参数，后面的则代表返回值类型,具体的每一个字符的对应关系如下：</p>
<p>字符    Java类型        C&#x2F;C++类型<br>V          void                  void<br>Z        jboolean           boolean<br>I           jint                     int<br>J         jlong                  long<br>D         jdouble            double<br>F           jfloat               float<br>B           jbyte              byte<br>C           jchar               char<br>S           jshort             short</p>
<p>数组则以”[“开始，用两个字符表示：</p>
<p>字符      java类型                     c&#x2F;c++类型<br>[Z          jbooleanArray                boolean[]<br>[I           jintArray                         int[]<br>[F          jfloatArray                      float[]<br>[B          jbyteArray                      byte[]<br>[C          jcharArray                      char[]<br>[S          jshortArray                     short[]<br>[D          jdoubleArray                double[]<br>[J           jlongArray                   long[]</p>
<p>上面的都是基本类型，如果参数是Java类，则以”L”开头，以”;”结尾，中间是用”&#x2F;“隔开包及类名，而其对应的C函数的参数则为jobject，一个例外是String类，它对应C类型jstring，例如：<strong>Ljava&#x2F;lang &#x2F;String;</strong> 、Ljava&#x2F;net&#x2F;Socket; 等，如果JAVA函数位于一个嵌入类（也被称为内部类），则用$作为类名间的分隔符，例如：”Landroid&#x2F;os&#x2F;FileUtils$FileStatus;”。</p>
<p>使用registerNativeMethods方法不仅仅是为了改变那丑陋的长方法名，最重要的是可以提高效率，因为当Java类别透过VM呼叫到本地函数时，通常是依靠VM去动态寻找.so中的本地函数(因此它们才需要特定规则的命名格式)，如果某方法需要连续呼叫很多次，则每次都要寻找一遍，所以使用RegisterNatives将本地函数向VM进行登记，可以让其更有效率的找到函数。</p>
<p>registerNativeMethods方法的另一个重要用途是，运行时动态调整本地函数与Java函数值之间的映射关系，只需要多次调用registerNativeMethods()方法，并传入不同的映射表参数即可。</p>
<h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态注册</span></span><br><span class="line"><span class="comment">//类名</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *ClassName=<span class="string">&quot;com/example/nativetest1/MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">jint <span class="title function_">add</span><span class="params">(JNIEnv* env,jobject obj,jint x,jint y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">jint <span class="title function_">sub</span><span class="params">(JNIEnv* env,jobject obj,jint x,jint y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义本地方法数组 建立映射关系</span></span><br><span class="line"><span class="type">static</span> JNINativeMethod methods[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;add&quot;</span>,<span class="string">&quot;(II)I&quot;</span>,(<span class="type">void</span>*)add&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;sub&quot;</span>,<span class="string">&quot;(II)I&quot;</span>,(<span class="type">void</span>*)sub&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写加载注册方法</span></span><br><span class="line">jint <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM* vm,<span class="type">void</span>* reserved)</span>&#123;</span><br><span class="line">    JNIEnv* env=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//获取JNI环境对象</span></span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;GetEnv((<span class="type">void</span>**)&amp;env,JNI_VERSION_1_6)!=JNI_OK)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//获取需要动态注册的类对象</span></span><br><span class="line">    jclass clazz=env-&gt;FindClass(ClassName);</span><br><span class="line">    <span class="comment">//调用RegisterNatives注册方法</span></span><br><span class="line">    <span class="keyword">if</span>(clazz)&#123;</span><br><span class="line">        env-&gt;RegisterNatives(clazz,methods,<span class="keyword">sizeof</span>(methods)/<span class="keyword">sizeof</span>(methods[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">return</span> JNI_VERSION_1_6;<span class="comment">//注意这里必须返回版本</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意: JNI_OnLoad函数最后一定要返回JNI_VERSION才能成功执行,否则程序会崩溃</strong></p>
<h3 id="java代码-1"><a href="#java代码-1" class="headerlink" title="java代码"></a>java代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.nativetest1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.nativetest1.databinding.ActivityMainBinding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;nativetest1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;<span class="comment">//注册绑定类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = ActivityMainBinding.inflate(getLayoutInflater());<span class="comment">//绑定布局</span></span><br><span class="line">        setContentView(binding.getRoot());<span class="comment">//将根视图作为主视图</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> binding.sampleText;<span class="comment">//通过binding类直接获取组件</span></span><br><span class="line">        Log.d(<span class="string">&quot;add&quot;</span>,<span class="string">&quot;&quot;</span>+add(<span class="number">51</span>,<span class="number">5</span>));</span><br><span class="line">        tv.setText(stringFromJNI()+add(<span class="number">7</span>,<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml代码同上</p>
<h3 id="逆向分析结果-1"><a href="#逆向分析结果-1" class="headerlink" title="逆向分析结果"></a>逆向分析结果</h3><p>恢复符号后</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">JNI_OnLoad</span><span class="params">(_JavaVM *vm)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 clazz; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// [rsp+30h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  env = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)_JavaVM::GetEnv(vm, (<span class="type">void</span> **)&amp;env, <span class="number">0x10006</span>) )<span class="comment">// vm &amp;env JNI_VERSION</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    clazz = _JNIEnv::FindClass(env, className);</span><br><span class="line">    <span class="keyword">if</span> ( clazz )</span><br><span class="line">    &#123;</span><br><span class="line">      _JNIEnv::RegisterNatives(env, clazz, methods, <span class="number">2LL</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">65542</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中methods数组如下:</p>
<p>第一个是Java层函数名 第二个是方法签名 第三个是函数地址</p>
<p><img src="/2023/08/22/Android/NDK/JNI%E5%88%9D%E6%8E%A2/1_methods%E6%95%B0%E7%BB%84.png"></p>
<p>跟进查看函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">add</span><span class="params">(__int64 env, __int64 obj, <span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)(y + x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="附-JNI数据类型"><a href="#附-JNI数据类型" class="headerlink" title="附:JNI数据类型"></a>附:JNI数据类型</h2><table>
<thead>
<tr>
<th>Java类型</th>
<th>本地类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>jboolean</td>
<td>C&#x2F;C++8位整型</td>
</tr>
<tr>
<td>byte</td>
<td>jbyte</td>
<td>C&#x2F;C++带符号的8位整型</td>
</tr>
<tr>
<td>char</td>
<td>jchar</td>
<td>C&#x2F;C++无符号的16位整型</td>
</tr>
<tr>
<td>short</td>
<td>jshort</td>
<td>C&#x2F;C++带符号的16位整型</td>
</tr>
<tr>
<td>int</td>
<td>jint</td>
<td>C&#x2F;C++带符号的32位整型</td>
</tr>
<tr>
<td>long</td>
<td>jlong</td>
<td>C&#x2F;C++带符号的64位整型</td>
</tr>
<tr>
<td>float</td>
<td>jfloat</td>
<td>C&#x2F;C++32位浮点型</td>
</tr>
<tr>
<td>double</td>
<td>jdouble</td>
<td>C&#x2F;C++64位浮点型</td>
</tr>
<tr>
<td>Object</td>
<td>jobject</td>
<td>任何Java对象，或者没有对应java类型的对象</td>
</tr>
<tr>
<td>Class</td>
<td>jclass</td>
<td>Class对象</td>
</tr>
<tr>
<td>String</td>
<td>jstring</td>
<td>字符串对象</td>
</tr>
<tr>
<td>Object[]</td>
<td>jobjectArray</td>
<td>任何对象的数组</td>
</tr>
<tr>
<td>boolean[]</td>
<td>jbooleanArray</td>
<td>布尔型数组</td>
</tr>
<tr>
<td>byte[]</td>
<td>jbyteArray</td>
<td>比特型数组</td>
</tr>
<tr>
<td>char[]</td>
<td>jcharArray</td>
<td>字符型数组</td>
</tr>
<tr>
<td>short[]</td>
<td>jshortArray</td>
<td>短整型数组</td>
</tr>
<tr>
<td>int[]</td>
<td>jintArray</td>
<td>整型数组</td>
</tr>
<tr>
<td>long[]</td>
<td>jlongArray</td>
<td>长整型数组</td>
</tr>
<tr>
<td>float[]</td>
<td>jfloatArray</td>
<td>浮点型数组</td>
</tr>
<tr>
<td>double[]</td>
<td>jdoubleArray</td>
<td>双浮点型数组</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Andorid</category>
      </categories>
      <tags>
        <tag>NDK</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-08-23日报</title>
    <url>/2023/08/23/%E6%97%A5%E6%8A%A5/2023-08/2023-08-23%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="一-回顾了安卓简易计算器开发"><a href="#一-回顾了安卓简易计算器开发" class="headerlink" title="一. 回顾了安卓简易计算器开发"></a>一. 回顾了安卓简易计算器开发</h2><p>之前学习安卓开发时已经做得差不多,但是java层代码实现有点不太理解就慢慢忘了,今天跟着教学视频继续实现了一下并且做了一些修改</p>
<p>可以给一个类设置为多个按钮的监听器,要注意实现接口和对应方法<br>java的一些数据类型转换方法例如:<br>**Double.parseDouble()**可以将字符串转换为Double类型<br>可以将字符串,颜色,大小等参数写到特定的xml文件中,后期修改维护比较方便<br>安卓引用的图片名不能有中文,引用时直接输入图片名即可,不需要带文件后缀</p>
<h2 id="二-so附加调试可以直接查找模块"><a href="#二-so附加调试可以直接查找模块" class="headerlink" title="二. so附加调试可以直接查找模块"></a>二. so附加调试可以直接查找模块</h2><p>不使用数据库文件,直接附加调试,搜索模块名</p>
<p><img src="/2023/08/23/%E6%97%A5%E6%8A%A5/2023-08/2023-08-23%E6%97%A5%E6%8A%A5/%E9%99%84%E5%8A%A0%E8%B0%83%E8%AF%95%E6%9F%A5%E6%89%BE%E6%A8%A1%E5%9D%97.png" alt="附加调试查找模块"></p>
<p>拿到搜索到模块后点击模块可以看到模块的函数列表,点击之后可以查看函数</p>
<p><img src="/2023/08/23/%E6%97%A5%E6%8A%A5/2023-08/2023-08-23%E6%97%A5%E6%8A%A5/%E7%82%B9%E5%87%BB%E6%A8%A1%E5%9D%97%E5%87%BD%E6%95%B0%E5%8D%B3%E5%8F%AF%E6%9F%A5%E7%9C%8B.png" alt="点击模块函数即可查看"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可能是最近睡得比较晚以及想的太多,今天起得晚还没什么精神,一天也没做多少东西<br>急也没用哈哈哈,把握好现有基本盘稳扎稳打,放平心态不要被影响目标干就完了</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-08-26日报</title>
    <url>/2023/08/26/%E6%97%A5%E6%8A%A5/2023-08/2023-08-26%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ol>
<li>蓝帽杯初赛,成功晋级半决赛</li>
<li>安装了取证大师,对取证有了初步了解</li>
<li>看了一下frida native层hook基础</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>24,25休息了两天,调整了一下心态<br>今天的蓝帽杯逆向题属实极端,一个直接给flag,另一个没什么工具下手<br>总的来说今天做的事并不是很多,下午不该继续看瓷砖计算机,浪费了时间</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>SMC</title>
    <url>/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/</url>
    <content><![CDATA[<h1 id="SMC（Self-Modified-Code）"><a href="#SMC（Self-Modified-Code）" class="headerlink" title="SMC（Self-Modified Code）"></a>SMC（Self-Modified Code）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>自修改代码</strong>（Self-Modified Code）是一类特殊的代码技术，即<strong>在运行时修改自身代码</strong>，从而使得程序实际行为与反汇编结果不符，同时修改前的代码段数据也可能非合法指令，从而无法被反汇编器识别，这加大了软件逆向工程的难度。</p>
<p>自修改代码通常有两种破解方式，第一种是根据静态分析结果直接修改程序二进制文件，第二种则是在动态调试时将解密后的程序从内存中 dump 下来。</p>
<h2 id="编写SMC程序"><a href="#编写SMC程序" class="headerlink" title="编写SMC程序"></a>编写SMC程序</h2><p>一般smc程序的执行流程(假设关键函数为func)</p>
<ol>
<li>main函数中获取func函数的地址</li>
<li>取消func函数处的页面保护</li>
<li>对func进行解密操作之后再调用func</li>
</ol>
<p>为了编写smc程序,我们需要进行如下操作</p>
<ol>
<li>先写好func函数和main函数中的解密代码(此时不能真正解密,还需要矫正)</li>
<li>编译后用ida打开exe程序,找到func地址及大小,从而修正主函数的参数</li>
<li>用ida对func函数进行patch,保存patch后的程序</li>
</ol>
<p><strong>注: 下列所有代码均在VS2022 x64 debug进行编译</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> z = <span class="number">0x12345678</span>;</span><br><span class="line">	x = y ^ z;</span><br><span class="line">	y = x ^ z;</span><br><span class="line">	<span class="type">char</span> flag[] = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">	<span class="keyword">return</span> x ^ y^z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	DWORD64 old;</span><br><span class="line">	byte* funcAddr = (byte*)func;<span class="comment">//函数地址</span></span><br><span class="line">	<span class="built_in">VirtualProtect</span>(func,<span class="number">0xE1</span>, PAGE_EXECUTE_READWRITE, &amp;old);<span class="comment">//第二个参数为大小,可以编译后通过ida查看得到</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xE1</span>; i++)<span class="comment">//解密操作 也需要修正大小 这里是修正后的</span></span><br><span class="line">		funcAddr[i] ^= <span class="number">0x12</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">func</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果直接运行该程序肯定会出错,因为此时相当于对func函数加密而非解密,所以需要用ida进行patch</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>查看反汇编可以发现,实际使用func函数地址时有个中间变量j_func跳转的过程</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/9_j_func.png"></p>
<p>跟进查看j_func 可以看到这是个jmp(e9 e7 06 00 00),会跳转到真实func函数处</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/10_jmp.png" alt="image-20230827124720651"></p>
<p>真实func函数</p>
<p><img src="/11_%E7%9C%9F%E5%AE%9Efunc%E5%87%BD%E6%95%B0" alt="image-20230827124735376"></p>
<p>所以直接用上述代码对func函数进行解密是无效的,这是由于<strong>v5并非直接保存真实func地址,而是保存了j_func的地址</strong></p>
<p>那么我们可以尝试对func函数地址进行修正,<strong>获取到真实func地址再进行解密</strong>即可</p>
<h3 id="修正后的代码"><a href="#修正后的代码" class="headerlink" title="修正后的代码"></a>修正后的代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;<span class="comment">//定义的func函数</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> z = <span class="number">0x12345678</span>;</span><br><span class="line">	x = y ^ z;</span><br><span class="line">	y = x ^ z;</span><br><span class="line">	<span class="type">char</span> flag[] = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">	<span class="keyword">return</span> x ^ y^z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	DWORD64 old;<span class="comment">//用于记录原始的页面保护属性 也可以不使用,第四个参数设置为NULL即可</span></span><br><span class="line">	VirtualProtect(func,<span class="number">0xE1</span>, PAGE_EXECUTE_READWRITE, &amp;old);</span><br><span class="line">	byte* pfunc = (byte*)func;</span><br><span class="line">	pfunc = pfunc + *(DWORD*)(pfunc+<span class="number">1</span>) + <span class="number">5</span>;<span class="comment">//加上偏移值才是真实func地址 +5是由于e9 jmp指令后的四字节是相对偏移</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xE1</span>; i++)</span><br><span class="line">		pfunc[i] ^= <span class="number">0x12</span>;</span><br><span class="line"></span><br><span class="line">	func(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对真实func地址的换算"><a href="#对真实func地址的换算" class="headerlink" title="对真实func地址的换算"></a>对真实func地址的换算</h4><p>执行pfunc&#x3D;(byte*)func时,可以发现0x07FF6390511A4地址处的值为<strong>e9 e7 06 00 00</strong>(即jmp到真实func的指令)</p>
<p>此时pfunc保存的是jmp指令的地址,并非真实func地址</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/5_%E5%81%8F%E7%A7%BB.png" alt="5_偏移"></p>
<p>执行pfunc &#x3D; pfunc + <em>(DWORD</em>)(pfunc+1) + 5后</p>
<p>观察func地址,和计算结果一致,说明成功找到真实func地址</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/6_%E6%89%BE%E5%88%B0func%E5%9C%B0%E5%9D%80.png" alt="6_找到func地址"></p>
<p>注意: +5是由于jmp指令(e9)后跟的4个字节是<strong>相对于jmp指令下一条指令的偏移值</strong></p>
<p>由于jmp自身占5字节,所以跳转<strong>目的地址&#x3D;jmp指令首地址+5+offset</strong></p>
<p>对应反汇编代码</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/0_%E5%8F%8D%E6%B1%87%E7%BC%96%E5%87%BD%E6%95%B0.png" alt="0_反汇编函数"></p>
<h4 id="ida查找函数地址及大小"><a href="#ida查找函数地址及大小" class="headerlink" title="ida查找函数地址及大小"></a>ida查找函数地址及大小</h4><p>用ida打开,找到函数地址及大小</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/1_%E6%9F%A5%E6%89%BE%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80%E5%8F%8A%E5%A4%A7%E5%B0%8F.png" alt="1_查找函数地址及大小"></p>
<h4 id="idapython脚本进行patch"><a href="#idapython脚本进行patch" class="headerlink" title="idapython脚本进行patch"></a>idapython脚本进行patch</h4><p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/2_idapython%E4%BF%AE%E6%94%B9func.png" alt="2_idapython修改func"></p>
<p>脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">addr=<span class="number">0x140011890</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xe1</span>):</span><br><span class="line">	tmp=idc.get_wide_byte(addr)</span><br><span class="line">	ida_bytes.patch_byte(addr,tmp^<span class="number">0x12</span>)</span><br><span class="line">	addr=addr+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>记得保存patch后的程序,再用ida打开patch后的程序,在解密func函数后下断点动调观察</p>
<h4 id="测试patch后的程序"><a href="#测试patch后的程序" class="headerlink" title="测试patch后的程序"></a>测试patch后的程序</h4><p>解密前的func函数,代码无法正常识别</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/7_%E5%87%BD%E6%95%B0%E8%A7%A3%E5%AF%86%E5%89%8D.png"></p>
<p>解密后还未识别的函数</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/3_%E9%87%8D%E6%96%B0%E8%AF%86%E5%88%AB%E5%89%8D.png" alt="3_重新识别前"></p>
<p>手动重新识别函数后</p>
<p><img src="/2023/08/27/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/SMC/8_%E8%A7%A3%E5%AF%86%E5%90%8E%E7%9A%84%E5%87%BD%E6%95%B0.png"></p>
]]></content>
      <categories>
        <category>逆向技术</category>
      </categories>
      <tags>
        <tag>SMC</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-08-27日报</title>
    <url>/2023/08/27/%E6%97%A5%E6%8A%A5/2023-08/2023-08-27%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="一-SMC编程"><a href="#一-SMC编程" class="headerlink" title="一. SMC编程"></a>一. SMC编程</h2><p>蓝帽杯Story这题漏了源码,其中就有SMC的操作,比较好奇为什么源码中没有给出加密后的函数,而是直接对函数进行解密操作<br>制作一个smc程序首先要明确smc的基本过程:</p>
<ol>
<li>获取关键函数func的地址</li>
<li>解密关键函数func</li>
<li>调用func</li>
</ol>
<p>制作一个smc程序的思路:</p>
<ol>
<li>编写关键函数func,在main函数中编写解密代码<br>此时func并未加密</li>
<li>编译,ida查找func的地址及其大小</li>
<li>idapython对func函数进行加密(和1中的解密可以互逆)</li>
<li>保存patch后的程序,运行该程序即可解密并执行</li>
</ol>
<p>遇到了一个神奇的问题: debug模式下获取func函数地址并不能直接获取到,而是会拿到一个j_func的地址,这是一个jmp指令,用于跳转到真实func地址<br>所以制作时还要注意换算成真实func地址</p>
<h2 id="二-回顾了Frida-Java层主动调用-写了Native基础Hook"><a href="#二-回顾了Frida-Java层主动调用-写了Native基础Hook" class="headerlink" title="二. 回顾了Frida Java层主动调用,写了Native基础Hook"></a>二. 回顾了Frida Java层主动调用,写了Native基础Hook</h2><p>Java层可以用Java.choose获取类的实例对象,获取之后可以执行各种操作,感觉Java.use能做到的Java.choose都可以做到</p>
<p>静态成员和方法可以通过Java.use获取到的类直接调用<br>实例成员和方法必须通过Java.choose获取和调用<br>注意变量的值需要用.value获取,变量本身也是引用类型,是一个地址</p>
<p>Nativehook的基础是使用Interceptor.attach() API<br>关键就是获取Native层函数的地址<br>静态注册的函数hook并不难,直接找模块名,函数名就可以获取到函数地址<br>动态注册的函数需要获取相对基地址的偏移,今天没有做出来,示例脚本有点问题</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>smc是临时起意想做的,出现了一些问题并成功解决<br>回顾frida java层hook时试了一下书上没有的操作<br>多加入自己的思考去学习</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-08-29日报</title>
    <url>/2023/08/29/%E6%97%A5%E6%8A%A5/2023-08/2023-08-29%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="一-ADB远程调试"><a href="#一-ADB远程调试" class="headerlink" title="一.ADB远程调试"></a>一.ADB远程调试</h2><p>部分系统自带adb远程调试开关,没有带的话可以安装一个WIFI ADB<br>adb connect ip:port即可连接<br>手机模拟器可以改为桥接模式进行远程调试,注意要设置好ip</p>
<h2 id="二-Smali基础"><a href="#二-Smali基础" class="headerlink" title="二.Smali基础"></a>二.Smali基础</h2><p>学习了Smali数据类型和基本结构以及基本指令<br>数据类型有基本类型和引用类型<br>结构主要是开头三行信息,.field变量声明 .method方法段<br>基本指令有 const声明常量 invoke调用方法 move赋值 if-[condition]分支判断</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>昨天卡在了一个Native层动态注册函数的hook,推测是机子的问题,下单了pixel<br>native动态注册函数hook关键是找到JNI_OnLoad中调用的RegisterNatives方法,hook该方法的methods参数可以获取到注册的函数的地址,从而计算出函数的RVA<br>今天的app破解实战也有点问题,示例程序app不弹窗,objection一开始可以带插件注入然后又不行<br>以后用frida还是linux环境比较好,今天装wallbreaker插件在win环境有问题</p>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-08-30日报</title>
    <url>/2023/08/30/%E6%97%A5%E6%8A%A5/2023-08/2023-08-30%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="QT实现PVZ修改器图形化"><a href="#QT实现PVZ修改器图形化" class="headerlink" title="QT实现PVZ修改器图形化"></a>QT实现PVZ修改器图形化</h2><p>QT的机制并没有想的那么复杂,只是之前没沉下心学<br>今天成功将PVZ修改器代码移植到QT上并实现图形化<br>遇到了强转的问题 用 <strong>reinterpret_cast &lt;quintptr &gt;</strong> 成功解决QT64位下不允许LPVOID类型强转到DWORD的问题<br>一些控件功能靠查询和GPT得到</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>编程要更加标准化<br>像BaseAddr基址就应该用LPVOID类型而不是DWORD 今天移植起来发现了不少编程设计方面的问题</p>
</li>
<li><p>尽量用面向对象设计<br>这次PVZ修改器的模块设计相对还算可以,功能间都是可以独立调用的,所以并没有什么影响,以后尽量用面向对象设计,舍去那些多余的传参,让hProcess,BaseAddr等关键参数直接内部调用</p>
</li>
<li><p>沉下心学习<br>搞qt搞到一半觉得麻烦想去搞mfc,感觉也麻烦,兜兜转转回来了,好在最后还是做出来了,不如沉下心慢慢学</p>
</li>
</ol>
]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>PVZ修改器QT图形化</title>
    <url>/2023/08/30/GameReverse/PlantsVsZombies/PVZ%E4%BF%AE%E6%94%B9%E5%99%A8QT%E5%9B%BE%E5%BD%A2%E5%8C%96/</url>
    <content><![CDATA[<p>成功将PVZ修改器代码移植到QT上,也遇到了不少问题<br>对于QT还只是基本了解,做了一点基本的点击和选择功能,其深层次的原理还值得考究</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ol>
<li>将主要代码添加到了PVZFunctions.h中<br>实际上应该将头文件声明和实现分开,创建PVZFunctions.cpp文件,这里偷懒了</li>
<li>在widget窗口中定义了Pid hProcess BaseAddr等关键变量,这些值与游戏绑定,需要启动时设置<br><img src="/2023/08/30/GameReverse/PlantsVsZombies/PVZ%E4%BF%AE%E6%94%B9%E5%99%A8QT%E5%9B%BE%E5%BD%A2%E5%8C%96/1_%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></li>
</ol>
<p>最终效果如下<br><img src="/2023/08/30/GameReverse/PlantsVsZombies/PVZ%E4%BF%AE%E6%94%B9%E5%99%A8QT%E5%9B%BE%E5%BD%A2%E5%8C%96/2_%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C.jpg"></p>
<p>主要代码:</p>
<h1 id="Widget-cpp"><a href="#Widget-cpp" class="headerlink" title="Widget.cpp"></a>Widget.cpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PVZFunctions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QCheckBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//获取进程pid</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;Pid = <span class="built_in">GetProcessIdByName</span>(<span class="string">L&quot;PlantsVsZombies.exe&quot;</span>);</span><br><span class="line">    <span class="comment">//打开进程,获取进程句柄</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE,<span class="keyword">this</span>-&gt;Pid);</span><br><span class="line">    <span class="comment">//获取进程基址</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;BaseAddr=<span class="built_in">GetModuleBaseAddress</span>(<span class="keyword">this</span>-&gt;Pid, <span class="string">L&quot;PlantsVsZombies.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限阳光</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_checkBox_UnlimitedSun_stateChanged</span><span class="params">(<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(state==Qt::Checked)<span class="comment">//勾选 执行无限阳光</span></span><br><span class="line">         <span class="built_in">UnlimitedSun</span>(hProcess,BaseAddr);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">RecoverySunConsume</span>(hProcess,BaseAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除雾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_checkBox_DeFog_stateChanged</span><span class="params">(<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(state==Qt::Checked)</span><br><span class="line">         HookAddr=<span class="built_in">DeFogByHook</span>(hProcess,BaseAddr);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">RecoveryFogByUnHook</span>(hProcess,BaseAddr,HookAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无冷却</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_checkBox_UnCooled_stateChanged</span><span class="params">(<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(state==Qt::Checked)</span><br><span class="line">         <span class="built_in">Uncooled</span>(hProcess,BaseAddr);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">RecoveryCooling</span>(hProcess,BaseAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置阳光</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_sunlight_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString sunlight= ui-&gt;lineEdit_SunLight-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(<span class="keyword">this</span>-&gt;hProcess,<span class="keyword">this</span>-&gt;BaseAddr,Sunlight,sunlight.<span class="built_in">toInt</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置金币 内存实际值=显示值/10</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_money_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString money=ui-&gt;lineEdit_Money-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(hProcess,BaseAddr,Money,money.<span class="built_in">toInt</span>()/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置树高</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_treeheight_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString treeheight=ui-&gt;lineEdit_TreeHeight-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(hProcess,BaseAddr,TreeHeight,treeheight.<span class="built_in">toInt</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//花肥 杀虫剂 巧克力 树肥 内存实际值=游戏显示值+1000</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_flowerfood_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString flowerfood=ui-&gt;lineEdit_flowerfood-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(hProcess,BaseAddr,FlowerFood,flowerfood.<span class="built_in">toInt</span>()+<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_chocolate_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString chocolate=ui-&gt;lineEdit_chocolate-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(hProcess,BaseAddr,Chocolate,chocolate.<span class="built_in">toInt</span>()+<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_insecticide_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString insecticide=ui-&gt;lineEdit_insecticide-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(hProcess,BaseAddr,Insecticide,insecticide.<span class="built_in">toInt</span>()+<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_treefood_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     QString treefood=ui-&gt;lineEdit_treefood-&gt;<span class="built_in">text</span>();</span><br><span class="line">     <span class="built_in">setSomething</span>(hProcess,BaseAddr,TreeFood,treefood.<span class="built_in">toInt</span>()+<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//种植功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_growPlant_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> plantType=ui-&gt;comboBox_plants-&gt;<span class="built_in">currentIndex</span>();<span class="comment">//获取项目索引 0开始</span></span><br><span class="line">     <span class="keyword">if</span>((plantType&lt;<span class="number">0</span>)||(plantType&gt;<span class="number">50</span>))<span class="comment">//植物范围为0-50</span></span><br><span class="line">        plantType=<span class="number">0</span>;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> x=ui-&gt;spinBox_x-&gt;<span class="built_in">value</span>(),y=ui-&gt;spinBox_y-&gt;<span class="built_in">value</span>();</span><br><span class="line">     <span class="built_in">GrowPlantByInjectCode</span>(Pid,BaseAddr,x,y,plantType);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_plantZombie_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> zombieType=ui-&gt;comboBox_zombie-&gt;<span class="built_in">currentIndex</span>();</span><br><span class="line">     <span class="keyword">if</span>( (zombieType&lt;<span class="number">0</span> )|| (zombieType&gt;<span class="number">25</span>))<span class="comment">//注意范围限制 超出范围设置为普通僵尸</span></span><br><span class="line">        zombieType=<span class="number">0</span>;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> x=ui-&gt;spinBox_x-&gt;<span class="built_in">value</span>(),y=ui-&gt;spinBox_y-&gt;<span class="built_in">value</span>();</span><br><span class="line">     <span class="built_in">GrowZombieByInjectCode</span>(Pid,BaseAddr,x,y,zombieType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_changeCard_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> card=ui-&gt;comboBox_cards-&gt;<span class="built_in">currentIndex</span>();</span><br><span class="line">     <span class="type">unsigned</span> <span class="type">int</span> plantType=ui-&gt;comboBox_plants-&gt;<span class="built_in">currentIndex</span>();</span><br><span class="line">     <span class="built_in">SetPlantCard</span>(hProcess,BaseAddr,card,plantType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="PVZFunctions-h"><a href="#PVZFunctions-h" class="headerlink" title="PVZFunctions.h"></a>PVZFunctions.h</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PVZFUNCTIONS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PVZFUNCTIONS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shlwapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;psapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;QtCore&gt;</span></span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Type</span> &#123;</span><br><span class="line">    Sunlight, Money, TreeHeight, Chocolate, TreeFood, FlowerFood, Insecticide</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> offsetTable[<span class="number">10</span>] = &#123; <span class="number">0x5578</span>,<span class="number">0x50</span>,<span class="number">0x11c</span>,<span class="number">0x250</span>,<span class="number">0x258</span>,<span class="number">0x220</span>,<span class="number">0x224</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据进程名获取进程ID</span></span><br><span class="line"><span class="function">DWORD <span class="title">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* processName)</span> </span>&#123;</span><br><span class="line">    quintptr x;</span><br><span class="line">    HANDLE snapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);<span class="comment">// 创建一个进程快照</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果创建失败，返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 PROCESSENTRY32 结构体，用于存储进程信息</span></span><br><span class="line">    PROCESSENTRY32 processEntry = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    processEntry.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);   <span class="comment">//必须初始化,否则调用Process32First会失败</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Process32First</span>(snapshot, &amp;processEntry)) &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(snapshot);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果获取第一个进程信息失败，关闭进程快照句柄并返回 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历进程列表</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">wchar_t</span> currentProcessName[MAX_PATH];                           <span class="comment">// 获取当前进程的名称</span></span><br><span class="line">        <span class="built_in">wcscpy_s</span>(currentProcessName, MAX_PATH, processEntry.szExeFile); <span class="comment">//szExeFile存储了进程对应可执行文件的名称</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">wcscmp</span>(currentProcessName, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">CloseHandle</span>(snapshot);                                  <span class="comment">// 如果当前进程名称和指定的进程名称相同，返回进程 ID</span></span><br><span class="line">            <span class="keyword">return</span> processEntry.th32ProcessID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(snapshot, &amp;processEntry));               <span class="comment">//获取快照中下一个进程的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果遍历完整个进程列表都没有找到指定进程，关闭进程快照句柄并返回 0</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(snapshot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据进程模块名获取基址</span></span><br><span class="line"><span class="function">LPVOID <span class="title">GetModuleBaseAddress</span><span class="params">(DWORD processId, LPCWSTR moduleName)</span> </span>&#123;</span><br><span class="line">    LPVOID lpBaseAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, processId); <span class="comment">// 打开进程句柄</span></span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 枚举进程中的所有模块</span></span><br><span class="line">        HMODULE hMods[<span class="number">1024</span>];</span><br><span class="line">        DWORD cbNeeded;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">EnumProcessModules</span>(hProcess, hMods, <span class="built_in">sizeof</span>(hMods), &amp;cbNeeded)) &#123;</span><br><span class="line">            DWORD dwModuleCount = cbNeeded / <span class="built_in">sizeof</span>(HMODULE);<span class="comment">// 计算模块数量</span></span><br><span class="line">            <span class="comment">// 获取指定模块的信息</span></span><br><span class="line">            <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; dwModuleCount; i++) &#123;</span><br><span class="line">                TCHAR szModName[MAX_PATH];</span><br><span class="line">                <span class="comment">//获取指定模块的完整路径名</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetModuleFileNameEx</span>(hProcess, hMods[i], szModName, MAX_PATH)) &#123;<span class="comment">//函数成功返回字符串长度,注意第四个参数的单位为字符而非字节</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">wcsstr</span>(szModName, moduleName)) &#123;<span class="comment">//查找模块名,若成功则返回子串第一次出现的指针</span></span><br><span class="line">                        MODULEINFO modInfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">GetModuleInformation</span>(hProcess, hMods[i], &amp;modInfo, <span class="built_in">sizeof</span>(MODULEINFO))) &#123;<span class="comment">//获取模块信息并保存到modInfo中</span></span><br><span class="line">                            lpBaseAddress = modInfo.lpBaseOfDll;<span class="comment">//模块基地址</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess); <span class="comment">// 关闭进程句柄</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lpBaseAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改进程代码区代码 参数: 进程句柄 修改代码起始地址 硬编码指针 代码字节数</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">WriteProcessCodeMemory</span><span class="params">(HANDLE hProcess, LPVOID lpStartAddress, LPCVOID lpBuffer, SIZE_T nSize)</span> </span>&#123;</span><br><span class="line">    DWORD dwOldProtect;</span><br><span class="line">    <span class="comment">//取消页保护</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">VirtualProtectEx</span>(hProcess, lpStartAddress, nSize, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    WINBOOL bResult = <span class="built_in">WriteProcessMemory</span>(hProcess, lpStartAddress, lpBuffer, nSize, <span class="literal">NULL</span>);<span class="comment">//写入代码</span></span><br><span class="line">    <span class="built_in">VirtualProtectEx</span>(hProcess, lpStartAddress, nSize, dwOldProtect, &amp;dwOldProtect);<span class="comment">//开启页保护</span></span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//hook指定地址,申请新空间保存原始代码并写入hookcode,返回申请空间的地址</span></span><br><span class="line"><span class="function">LPVOID <span class="title">SetHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, LPCVOID hookCode, SIZE_T hookCodeSize, SIZE_T origCodeSize)</span> </span>&#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, jmpCode[<span class="number">5</span>] = &#123; <span class="number">0xE9</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 读取并保存原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ReadProcessMemory</span>(hProcess,desAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 申请空间用于存储原始代码,hook代码,jmp返回代码</span></span><br><span class="line">    LPVOID allocAddr = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, hookCodeSize + origCodeSize + <span class="number">5</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!allocAddr)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向申请空间写入原始代码,hook代码,jmp返回代码  jmp xxx 偏移为目的地址-jmp下一条指令地址</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = <span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(desAddr) + <span class="number">5</span> - (<span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(allocAddr) + hookCodeSize + origCodeSize + <span class="number">5</span>);<span class="comment">//hook返回地址的偏移</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">WriteProcessCodeMemory</span>(hProcess, allocAddr, origCode, origCodeSize)                      <span class="comment">//写入原始代码</span></span><br><span class="line">        || !<span class="built_in">WriteProcessCodeMemory</span>(hProcess, allocAddr + origCodeSize, hookCode, hookCodeSize)<span class="comment">//写入hook代码</span></span><br><span class="line">        || !<span class="built_in">WriteProcessCodeMemory</span>(hProcess, allocAddr + origCodeSize + hookCodeSize, jmpCode, <span class="number">5</span>))<span class="comment">//写入jmpcode</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入失败则释放空间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 修改目的地址处的代码  jmp xxx偏移 原始代码后才是需要执行的hook代码</span></span><br><span class="line">    *(DWORD*)(jmpCode + <span class="number">1</span>) = (<span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(allocAddr) + origCodeSize) - (<span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(desAddr) + <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">WriteProcessCodeMemory</span>(hProcess, desAddr, jmpCode, <span class="number">5</span>);<span class="comment">//在源地址处写入跳转代码</span></span><br><span class="line">    <span class="keyword">if</span> (origCodeSize &gt; <span class="number">5</span>)<span class="comment">//原始代码长度大于5时nop多余字节</span></span><br><span class="line">    &#123;</span><br><span class="line">        BYTE nopCode[<span class="number">5</span>] = &#123; <span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">WriteProcessCodeMemory</span>(hProcess, desAddr + <span class="number">5</span>, nopCode, origCodeSize - <span class="number">5</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">VirtualFreeEx</span>(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE);<span class="comment">//写入nopcode失败则释放空间并返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. hook成功则返回hookCode所在地址</span></span><br><span class="line">    <span class="keyword">return</span> allocAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消hook指定地址,写回原始代码并释放申请空间</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">UnHook</span><span class="params">(HANDLE hProcess, LPVOID desAddr, SIZE_T origCodeSize, LPVOID allocAddr)</span> </span>&#123;</span><br><span class="line">    BYTE origCode[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">//1. 从申请空间中读出原始代码</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ReadProcessMemory</span>(hProcess, allocAddr, origCode, origCodeSize, <span class="literal">NULL</span>))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//2. 将原始代码写回目的地址</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">WriteProcessCodeMemory</span>(hProcess, desAddr, origCode, origCodeSize))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="comment">//3. 释放申请空间</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">VirtualFreeEx</span>(hProcess, allocAddr, <span class="number">0</span>, MEM_RELEASE))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取某些项目的值</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">getSomething</span><span class="params">(HANDLE handle, LPVOID BaseAddr, <span class="type">unsigned</span> <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    LPVOID addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(handle,addr, &amp;addr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(handle, addr, &amp;addr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(handle, addr, &amp;num, <span class="built_in">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置某些项目的值</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">setSomething</span><span class="params">(HANDLE handle, LPVOID BaseAddr, <span class="type">unsigned</span> <span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    LPVOID addr = BaseAddr + <span class="number">0x00355E0C</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(handle, addr, &amp;addr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (type == Sunlight)</span><br><span class="line">        addr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addr += <span class="number">0x950</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(handle, addr, &amp;addr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    addr += offsetTable[type];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">WriteProcessMemory</span>(handle, addr, &amp;num, <span class="built_in">sizeof</span>(DWORD), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限冷却</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">Uncooled</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> code[<span class="number">2</span>] = &#123; <span class="number">0xeb</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">WriteProcessCodeMemory</span>(hProcess, BaseAddr + <span class="number">0x9ce02</span>, code, <span class="number">2</span>);<span class="comment">//jle 0x18修改为jmp $+2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复冷却</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">RecoveryCooling</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">2</span>] = &#123; <span class="number">0x7E</span> ,<span class="number">0x16</span> &#125;;<span class="comment">//jmp $+2修改为jle 0x18</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">WriteProcessCodeMemory</span>(hProcess, BaseAddr + <span class="number">0x9ce02</span>, OriginalCode, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无限阳光,锁定阳光为9999</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">UnlimitedSun</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Code[<span class="number">3</span>] = &#123; <span class="number">0x29</span>,<span class="number">0xdb</span>,<span class="number">0</span> &#125;;<span class="comment">//cmp ebx,eax 修改为sub ebx,ebx   and ecx,0x32修改为and ecx,0</span></span><br><span class="line">    WINBOOL flag;</span><br><span class="line">    flag = <span class="built_in">setSomething</span>(hProcess, BaseAddr, Sunlight, <span class="number">9999</span>);<span class="comment">//修改阳光</span></span><br><span class="line">    flag &amp;= <span class="built_in">WriteProcessCodeMemory</span>(hProcess, BaseAddr + <span class="number">0x27690</span>, Code, <span class="number">2</span>);<span class="comment">//修改阳光减少代码</span></span><br><span class="line">    flag &amp;= <span class="built_in">WriteProcessCodeMemory</span>(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;Code[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//修改阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复阳光消耗</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">RecoverySunConsume</span><span class="params">(HANDLE hProcess,LPVOID BaseAddr)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> OriginalCode[<span class="number">3</span>] = &#123; <span class="number">0x3B</span>,<span class="number">0xD8</span>,<span class="number">0x32</span> &#125;;<span class="comment">//sub ebx,ebx恢复为cmp ebx,eax and ecx,0恢复为and ecx,0x32</span></span><br><span class="line">    WINBOOL flag = <span class="built_in">WriteProcessCodeMemory</span>(hProcess, BaseAddr + <span class="number">0x27690</span>, OriginalCode, <span class="number">2</span>);<span class="comment">//恢复阳光减少代码</span></span><br><span class="line">    flag &amp;= <span class="built_in">WriteProcessCodeMemory</span>(hProcess, BaseAddr + <span class="number">0x3C0AB</span>, &amp;OriginalCode[<span class="number">2</span>], <span class="number">1</span>);<span class="comment">//恢复阳光增加代码</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除雾</span></span><br><span class="line"><span class="function">LPVOID <span class="title">DeFogByHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> hookCode[<span class="number">9</span>] = &#123;</span><br><span class="line">        <span class="number">0xc7</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,  <span class="comment">//mov [ecx],0</span></span><br><span class="line">        <span class="number">0x83</span>,<span class="number">0xc1</span>,<span class="number">0x04</span>                  <span class="comment">//add ecx,0x4</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//写hook代码进行hook</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">SetHook</span>(hProcess, BaseAddr + <span class="number">0x26173</span>, hookCode, <span class="built_in">sizeof</span>(hookCode), <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复雾</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">RecoveryFogByUnHook</span><span class="params">(HANDLE hProcess, LPVOID BaseAddr, LPVOID allocAddr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UnHook</span>(hProcess, BaseAddr + <span class="number">0x26173</span>, <span class="number">5</span>, allocAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程向指定进程注入dll</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">InjectDllByRemoteThread</span><span class="params">(DWORD desProcId,WCHAR* dllPath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//打开进程获取进程句柄</span></span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, desProcId);</span><br><span class="line">    <span class="keyword">if</span> (!hProcess)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请空间</span></span><br><span class="line">    DWORD pathSize = (<span class="built_in">wcslen</span>(dllPath) + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    LPVOID newMemAddr = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="number">0</span>, pathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (!newMemAddr)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入dll路径</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, newMemAddr, dllPath, pathSize, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建远程线程</span></span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)LoadLibraryW, newMemAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hThread)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);<span class="comment">//等待线程信号,保证成功注入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回收资源</span></span><br><span class="line">    <span class="built_in">VirtualFreeEx</span>(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回成功</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程释放指定进程dll</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">UnLoadDllByRemoteThread</span><span class="params">(DWORD dwProcessId, LPCWSTR lpDllName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标进程中申请一块内存，并将需要卸载的DLL模块的名称写入该内存</span></span><br><span class="line">    LPVOID lpRemoteDllName = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, (<span class="built_in">wcslen</span>(lpDllName) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(WCHAR), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (lpRemoteDllName == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">WriteProcessMemory</span>(hProcess, lpRemoteDllName, lpDllName, (<span class="built_in">wcslen</span>(lpDllName) + <span class="number">1</span>) * <span class="built_in">sizeof</span>(WCHAR), <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找dll模块</span></span><br><span class="line">    HMODULE hModules[<span class="number">1024</span>],DesModule=<span class="literal">NULL</span>;</span><br><span class="line">    DWORD dwSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">EnumProcessModules</span>(hProcess, hModules, <span class="built_in">sizeof</span>(hModules), &amp;dwSize))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历模块列表，查找需要卸载的DLL模块</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; (dwSize / <span class="built_in">sizeof</span>(HMODULE)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WCHAR szModuleName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetModuleFileNameExW</span>(hProcess, hModules[i], szModuleName, MAX_PATH) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取模块句柄</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">wcsicmp</span>(szModuleName, lpDllName) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DesModule = hModules[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有查找到模块</span></span><br><span class="line">    <span class="keyword">if</span> (!DesModule) &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在目标进程中创建远程线程，执行FreeLibrary函数</span></span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)FreeLibrary, DesModule, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待线程执行完成</span></span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭句柄</span></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteDllName, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以创建远程线程方式种植植物</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">GrowPlantByInjectCode</span><span class="params">(DWORD dwProcessId,LPVOID BaseAddr,DWORD x,DWORD y,DWORD PlantType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WINBOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;                     <span class="comment">//汇编指令              //修正点偏移</span></span><br><span class="line">            <span class="number">0x55</span>,                                   <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                             <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                   <span class="comment">//3 pushad</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,           <span class="comment">//4 push -1</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//9 push PlantType        //10</span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//14 mov eax,y             //15</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//19 push x                //20</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//24 mov ecx,BaseAddr      //25</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,     <span class="comment">//29 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,     <span class="comment">//35 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x51</span>,                                   <span class="comment">//41 push ecx</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,           <span class="comment">//42 call PlantFunc        //43     //被调方平栈</span></span><br><span class="line">            <span class="number">0x61</span>,                                   <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                   <span class="comment">//48 leave</span></span><br><span class="line">            <span class="number">0xC3</span>                                    <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>;</span><br><span class="line">        LPVOID desFunc = BaseAddr + <span class="number">0x18D70</span>;</span><br><span class="line">        LPVOID lpRemoteCodeMem = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = PlantType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">25</span>] = <span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(BaseAddr);</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = <span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(desFunc)-(<span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(lpRemoteCodeMem)+<span class="number">42</span>+<span class="number">5</span>) ;</span><br><span class="line">        <span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,offset=des-(source+5),减去call自身长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">WriteProcessMemory</span>(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem,<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以创建远程线程方式种植僵尸</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">GrowZombieByInjectCode</span><span class="params">(DWORD dwProcessId,LPVOID BaseAddr, DWORD x, DWORD y, DWORD ZombieType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    WINBOOL bSuccess = FALSE;</span><br><span class="line">    <span class="comment">//1. 打开进程</span></span><br><span class="line">    HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">    <span class="keyword">if</span> (hProcess != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//2. 定义注入代码(函数)</span></span><br><span class="line"></span><br><span class="line">        BYTE InjectCode[<span class="number">50</span>] = &#123;</span><br><span class="line">            <span class="number">0x55</span>,                                       <span class="comment">//0 push ebp</span></span><br><span class="line">            <span class="number">0x89</span>, <span class="number">0xE5</span>,                                 <span class="comment">//1 mov ebp,esp</span></span><br><span class="line">            <span class="number">0x60</span>,                                       <span class="comment">//3 pushad</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//4 push x</span></span><br><span class="line">            <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//9 push ZombieType</span></span><br><span class="line">            <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//14 mov eax,y</span></span><br><span class="line">            <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//19 mov ecx,BaseAddr</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x0C</span>, <span class="number">0x5E</span>, <span class="number">0x35</span>, <span class="number">0x00</span>,         <span class="comment">//24 mov ecx,[ecx+0x355E0C]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//30 mov ecx,[ecx+0x868]</span></span><br><span class="line">            <span class="number">0x8B</span>, <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,         <span class="comment">//36 mov ecx,[ecx+0x178]</span></span><br><span class="line">            <span class="number">0xE8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,               <span class="comment">//42 call PlantZombieFunc</span></span><br><span class="line">            <span class="number">0x61</span>,                                       <span class="comment">//47 popad</span></span><br><span class="line">            <span class="number">0xC9</span>,                                       <span class="comment">//48 leave</span></span><br><span class="line">            <span class="number">0xC3</span>                                        <span class="comment">//49 ret</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 申请空间用于存储代码</span></span><br><span class="line">        DWORD  dwCodeSize = <span class="number">50</span>;</span><br><span class="line">        LPVOID desFunc = BaseAddr + <span class="number">0x35390</span>; <span class="comment">//种植僵尸函数</span></span><br><span class="line">        LPVOID lpRemoteCodeMem = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, dwCodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修正参数</span></span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">5</span>] = x;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">10</span>] = ZombieType;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">15</span>] = y;</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">20</span>] = <span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(BaseAddr);</span><br><span class="line">        *(DWORD*)&amp;InjectCode[<span class="number">43</span>] = <span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(desFunc) - (<span class="built_in">reinterpret_cast</span>&lt;quintptr&gt;(lpRemoteCodeMem) + <span class="number">42</span> + <span class="number">5</span>);<span class="comment">//call指令与jmp类似,相对于当前指令的下一条指令计算偏移,要减去call长度5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lpRemoteCodeMem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SIZE_T dwBytesWritten = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//5. 注入代码</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">WriteProcessMemory</span>(hProcess, lpRemoteCodeMem, InjectCode, dwCodeSize, &amp;dwBytesWritten) &amp;&amp;</span><br><span class="line">                dwBytesWritten == dwCodeSize)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//6. 创建远程线程执行代码</span></span><br><span class="line">                HANDLE hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemoteCodeMem, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (hThread != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//7. 等待线程信号</span></span><br><span class="line">                    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line">                    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">                    bSuccess = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//8. 执行完后释放空间</span></span><br><span class="line">            <span class="built_in">VirtualFreeEx</span>(hProcess, lpRemoteCodeMem, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bSuccess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置卡槽植物</span></span><br><span class="line"><span class="function">WINBOOL <span class="title">SetPlantCard</span><span class="params">(HANDLE hProcess,LPVOID BaseAddr,DWORD nCard,DWORD plantType)</span> </span>&#123;</span><br><span class="line">    LPVOID cardAddr = BaseAddr + <span class="number">0x355E0C</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(hProcess, cardAddr, &amp;cardAddr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x868</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(hProcess, cardAddr, &amp;cardAddr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x15C</span>;</span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(hProcess, cardAddr, &amp;cardAddr, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">    cardAddr += <span class="number">0x5C</span>+nCard*<span class="number">0x50</span>;<span class="comment">//卡槽偏移</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">WriteProcessMemory</span>(hProcess, cardAddr, &amp;plantType, <span class="built_in">sizeof</span>(DWORD), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// PVZFUNCTIONS_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GameReverse</category>
      </categories>
  </entry>
  <entry>
    <title>2023-08-31日报</title>
    <url>/2023/08/31/%E6%97%A5%E6%8A%A5/2023-08/2023-08-31%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="硬盘备份和系统迁移"><a href="#硬盘备份和系统迁移" class="headerlink" title="硬盘备份和系统迁移"></a>硬盘备份和系统迁移</h2><h3 id="硬盘备份"><a href="#硬盘备份" class="headerlink" title="硬盘备份"></a>硬盘备份</h3><p>使用傲梅轻松备份,将新硬盘装进硬盘盒,备份原硬盘数据到新硬盘中<br>换下原硬盘,将新硬盘插回原硬盘插槽,启动后注意调整盘符即可<br>如果不调整盘符可能会导致部分软件路径出错从而无法使用</p>
<h3 id="系统迁移"><a href="#系统迁移" class="headerlink" title="系统迁移"></a>系统迁移</h3><p>系统迁移采用的是diskginus的系统迁移功能<br>非常便捷,建议采用pe模式更加安全<br>系统迁移是将系统盘复制到新的硬盘,将复制好的新硬盘换到老硬盘插槽上<br>启动时进bios调整启动盘选项为新的硬盘即可成功进入系统<br>这步可能会导致引导出错</p>
<h2 id="Native层动态函数hook"><a href="#Native层动态函数hook" class="headerlink" title="Native层动态函数hook"></a>Native层动态函数hook</h2><h3 id="HookRegisterNatives"><a href="#HookRegisterNatives" class="headerlink" title="HookRegisterNatives"></a>HookRegisterNatives</h3><p>书上用这个脚本成功输出RegisterNatives方法注册的函数信息<br>我当时遇到了一个问题是不能用spawn模式调试软件,今天发现是frida和安卓版本不匹配,安卓10应该用frida15<br>今天正好买的pixel3xl到了,刷安卓9用frida14成功运行脚本<br>但是这个github上下的脚本有点问题,于是自己修改了一下<br>比较重要的就是DebugSymbol模块的api,需要利用一些信息获取模块基址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找RegisterNatives函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">find_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);<span class="comment">//枚举符号</span></span><br><span class="line">   <span class="keyword">var</span> addrRegisterNatives = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="comment">//匹配目标方法特征</span></span><br><span class="line">        <span class="comment">//_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            addrRegisterNatives = symbol.<span class="property">address</span><span class="comment">//成功找到函数地址</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="title function_">hook_RegisterNatives</span>(addrRegisterNatives)<span class="comment">//hook函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params">addrRegisterNatives</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addrRegisterNatives != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrRegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> vm=args[<span class="number">0</span>]<span class="comment">//vm</span></span><br><span class="line">               <span class="keyword">var</span> clazz = args[<span class="number">1</span>]<span class="comment">//clazz</span></span><br><span class="line">               <span class="keyword">var</span> methods = <span class="title function_">ptr</span>(args[<span class="number">2</span>])<span class="comment">//methods数组 引用类型 ptr转换</span></span><br><span class="line">               <span class="keyword">var</span> methods_count = <span class="built_in">parseInt</span>(args[<span class="number">3</span>])<span class="comment">//methods元素个数 即动态注册函数个数</span></span><br><span class="line">               <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(clazz)<span class="comment">//类名</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\nvm=&quot;</span>,vm,<span class="string">&quot;\nmethods count=&quot;</span>,methods_count,<span class="string">&quot;\n[RegisterNatives]&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods_count; i++) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`==========Func<span class="subst">$&#123;i&#125;</span>==========`</span>)</span><br><span class="line">                   <span class="keyword">var</span> pFuncName = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>))</span><br><span class="line">                   <span class="keyword">var</span> pSignature = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>))</span><br><span class="line">                   </span><br><span class="line">                   <span class="keyword">var</span> funcName = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(pFuncName)<span class="comment">//Java层函数名</span></span><br><span class="line">                   <span class="keyword">var</span> signature = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(pSignature)<span class="comment">//函数签名</span></span><br><span class="line">                   <span class="keyword">var</span> fnPtr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>))<span class="comment">//函数指针</span></span><br><span class="line">                   </span><br><span class="line">                   <span class="keyword">var</span> debug_symbol = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(fnPtr)<span class="comment">//通过函数地址获取对应符号信息</span></span><br><span class="line">                   <span class="keyword">var</span> moduleName=debug_symbol.<span class="property">moduleName</span></span><br><span class="line">                   <span class="keyword">var</span> moduleAddr=<span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(moduleName)<span class="comment">//获取模块基址</span></span><br><span class="line">                   <span class="keyword">var</span> funcOffset=fnPtr-moduleAddr<span class="comment">//计算偏移值</span></span><br><span class="line"></span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clazz=&quot;</span>,class_name,<span class="string">&quot;\nModuleName=&quot;</span>,moduleName,<span class="string">&quot;\nModuleAddr=&quot;</span>,moduleAddr,<span class="string">&quot;\nFuncName=&quot;</span>,funcName,<span class="string">&quot;\nSignature=&quot;</span>,signature,<span class="string">&quot;\nFuncAddr=&quot;</span>,fnPtr,<span class="string">&quot;\nFuncOffset=&quot;</span>,funcOffset.<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====================&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(find_RegisterNatives)</span><br></pre></td></tr></table></figure>

<h3 id="hook动态注册函数"><a href="#hook动态注册函数" class="headerlink" title="hook动态注册函数"></a>hook动态注册函数</h3><p>用Interceprot.attach方法<br>关键是获取到函数地址,上面用hookRegisterNatives函数得到注册函数偏移值后可以用基址加偏移的方式得到真实地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. 动态注册函数hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dynamic</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libaddr=<span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnativetest1.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;libAddr=&quot;</span>,libaddr)</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">FuncAddr</span>=libaddr.<span class="title function_">add</span>(<span class="number">0x1edcc</span>)</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">FuncAddr</span>,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;jnienv=&#x27;</span>,args[<span class="number">0</span>])</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;jobj=&#x27;</span>,args[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retVal</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;retVal=&#x27;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retVal,<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dynamic</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>2023年8月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-01日报</title>
    <url>/2023/09/01/%E6%97%A5%E6%8A%A5/2023-09/2023-09-01%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="objection实战"><a href="#objection实战" class="headerlink" title="objection实战"></a>objection实战</h2><h3 id="objection主动调用"><a href="#objection主动调用" class="headerlink" title="objection主动调用"></a>objection主动调用</h3><p>无参调用<br>android heap execute handle methodname<br>有参函数调用<br>android heap evaluate handle<br>输入想要执行的脚本会自动执行</p>
<h3 id="分析恶意app1"><a href="#分析恶意app1" class="headerlink" title="分析恶意app1"></a>分析恶意app1</h3><p>该恶意app会禁止USB调试,所以adb的usb调试模式无效<br>但是意外发现adb的wifi调试不受影响<br>adb可以正常进入app的shell并强制关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am force-stop &lt;package_name&gt;</span><br></pre></td></tr></table></figure>
<p>objection基本思路</p>
<ol>
<li><p>列出activity和service<br>这步主要是为了得到哪些活动或服务在运行</p>
</li>
<li><p>hook类所有方法<br>hook类所有方法后可以得知是哪些函数在被调用,从而定位关键函数</p>
</li>
<li><p>hook关键函数<br>hook关键函数可以得到函数参数返回值和调用栈<br>通过调用栈可以知道调用关系从而查找相关函数</p>
</li>
</ol>
<h2 id="app分析破解实战"><a href="#app分析破解实战" class="headerlink" title="app分析破解实战"></a>app分析破解实战</h2><h3 id="去除未加固app升级弹窗"><a href="#去除未加固app升级弹窗" class="headerlink" title="去除未加固app升级弹窗"></a>去除未加固app升级弹窗</h3><p>分析应当从开发者的角度思考<br>弹窗有三种常见的实现:</p>
<ol>
<li>android.app.Dialog</li>
<li>android.app.AlertDialog</li>
<li>android.widget.PopupWindow<br>所以可以在内存中搜索这三种实例,如果找到可以hook对应类,从而定位关键函数</li>
</ol>
<p>如果有需求还可以让程序加载时hook函数<br>在objection explore参数后跟-s “命令”即可在app加载时进行hook </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objection -g com.app.pkgname explore -s &quot;android hooking watch class android.app.Dialog&quot;</span><br></pre></td></tr></table></figure>
<p>这种加载时hook很适合加载时调用了onCreate等初始化方法创建后不再调用的类</p>
<p>找到关键函数后可以反编译修改smali文件,重打包后需要进行签名才能安装</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li><p>wallbreaker<br>objectsearch搜索内存实例<br>objectdump打印内存实例的成员</p>
</li>
<li><p>frida-dexdump<br>脱壳插件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-02日报</title>
    <url>/2023/09/02/%E6%97%A5%E6%8A%A5/2023-09/2023-09-02%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="KCTF-AliCrackme-1"><a href="#KCTF-AliCrackme-1" class="headerlink" title="KCTF AliCrackme_1"></a>KCTF AliCrackme_1</h2><p>这题只需要简单的hook一下java层关键函数就可以得到映射表和加密字符串,很容易反推出flag<br>crackme_2是一个so层带反调试的app,没有找到反调试点在哪,顺着逻辑走是假flag 发现了tea加密</p>
<h2 id="羊城杯2023"><a href="#羊城杯2023" class="headerlink" title="羊城杯2023"></a>羊城杯2023</h2><p>做出来Blast和CSGO这两题<br>Blast是md5(md5()),有一大坨无意义的混淆,看关键代码<br>CSGO的go语言并不复杂,动调一下就可以看到密文比较逻辑<br>ezAndroid的so可能有反调试,比较奇怪的是OnClick方法居然能native化,一直以为只能java层定义<br>也有可能解密文件更换了dex(猜测)<br>vm_wo是虚拟保护,但是架构比较特殊,angr不能跑</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>一些以前没有在意的基础性的东西还是要好好总结一下,<br>今天甚至才发现买来的pixel3xl没有设置ro.debuggable<br>对于so层调试,idapython的使用等基操得练练</p>
</li>
<li><p>比赛题目也需要多总结多复现<br>最近的比赛很明显能发现考察混淆,加密算法,go逆向,VMP等<br>这些常见比赛题型还是很有价值的,尤其是vmp,手搓虚拟机解释器的人他不帅吗</p>
</li>
</ol>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>IDAPython基本使用</title>
    <url>/2023/09/03/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/IDAPython%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://www.cnblogs.com/iBinary/p/14642662.html">IDAPython入门教程 基于IDA7.5_Python3 第一讲 简介与地址获取</a></li>
<li><a href="https://wonderkun.cc/2020/12/11/idapython%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/">idapython使用笔记</a></li>
<li><a href="http://www.qfrost.com/posts/idapython/#idapython3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">IDAPython3学习笔记</a></li>
<li>[<a href="https://www.yunyawu.com/2020/06/28/ida-python%E5%AD%A6%E4%B9%A0/">IDA系列教程：IDA Python</a>]</li>
<li><a href="https://zzzzsky.com/2021/12/08/LearnIDAPython/">IDAPython 学习笔记</a></li>
<li><a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">Porting from IDAPython 6.x-7.3, to 7.4</a></li>
</ol>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p>官方文档<br><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/">https://www.hex-rays.com/products/ida/support/idapython_docs/</a></p>
<p>vscode编写idapython的插件<br><a href="https://github.com/0xeb/ida-qscripts">https://github.com/0xeb/ida-qscripts</a></p>
<h1 id="IDAPython基本操作"><a href="#IDAPython基本操作" class="headerlink" title="IDAPython基本操作"></a>IDAPython基本操作</h1><p>快捷键 shift+F2</p>
<p>idc.BADADDR 类似NULL </p>
<h2 id="获取当前光标选择的地址"><a href="#获取当前光标选择的地址" class="headerlink" title="获取当前光标选择的地址"></a>获取当前光标选择的地址</h2><p>idc.here()</p>
<p>idc.get_screen_ea()</p>
<h2 id="获取程序最小地址"><a href="#获取程序最小地址" class="headerlink" title="获取程序最小地址"></a>获取程序最小地址</h2><p>ida_ida.inf_get_min_ea()</p>
<p>print(“min&#x3D;”,hex(ida_ida.inf_get_min_ea()))</p>
<h2 id="获取程序最大地址"><a href="#获取程序最大地址" class="headerlink" title="获取程序最大地址"></a>获取程序最大地址</h2><p>ida_ida.inf_get_max_ea()</p>
<p>print(“max&#x3D;”,hex(ida_ida.inf_get_max_ea()))</p>
<h2 id="注释和变量名"><a href="#注释和变量名" class="headerlink" title="注释和变量名"></a>注释和变量名</h2><p>获取指定地址处的注释</p>
<p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.get_cmt">ida_bytes.get_cmt(addr,rptble)</a></p>
<p>rptble&#x3D;False时获取用户注释</p>
<p>print(ida_bytes.get_cmt(addr,False))</p>
<p>修改指定地址处的注释</p>
<p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.set_cmt">ida_bytes.set_cmt(addr,comment,rptble)</a></p>
<p>rptble&#x3D;True时,若已经存在注释则不会进行注释</p>
<p>ida_bytes.set_cmt(addr,”Common666”,False)</p>
<p>设置指定地址的变量名</p>
<p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.set_name">idc.set_name(addr,name,flags&#x3D;0)</a></p>
<p>idc.set_name(0x140002350,”hello”)</p>
<h1 id="指令相关"><a href="#指令相关" class="headerlink" title="指令相关"></a>指令相关</h1><h2 id="获取指令上一条指令地址"><a href="#获取指令上一条指令地址" class="headerlink" title="获取指令上一条指令地址"></a>获取指令上一条指令地址</h2><p>idc.prev.head(addr)</p>
<h2 id="获取指令下一条指令地址"><a href="#获取指令下一条指令地址" class="headerlink" title="获取指令下一条指令地址"></a>获取指令下一条指令地址</h2><p>next_head(addr)</p>
<h2 id="获取指定地址的指令-包括操作数"><a href="#获取指定地址的指令-包括操作数" class="headerlink" title="获取指定地址的指令(包括操作数)"></a>获取指定地址的指令(包括操作数)</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.generate_disasm_line">idc.generate_disasm_line(addr,flags)</a></p>
<p>print(idc.generate_disasm_line(addr,0)) 一般flags设置为0即可</p>
<h2 id="获取指定地址的指令-不含操作数"><a href="#获取指定地址的指令-不含操作数" class="headerlink" title="获取指定地址的指令(不含操作数)"></a>获取指定地址的指令(不含操作数)</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.print_insn_mnem">idc.print_insn_mnem(addr)</a></p>
<h2 id="获取当前指令第num-1个操作数"><a href="#获取当前指令第num-1个操作数" class="headerlink" title="获取当前指令第num+1个操作数"></a>获取当前指令第num+1个操作数</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.print_operand">idc.print_operand(addr,num)</a></p>
<p> 如果操作数不存在则返回空</p>
<h1 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h1><h2 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.start_process">ida_dbg.start_process(path&#x3D;None, args&#x3D;None, sdir&#x3D;None)</a></p>
<p>ida_dbg.start_process()</p>
<p>如果要传递参数可以给args填入字符串</p>
<h2 id="继续调试"><a href="#继续调试" class="headerlink" title="继续调试"></a>继续调试</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.continue_process">ida_dbg.continue_process()</a></p>
<p>ida_dbg.continue_process()</p>
<h2 id="运行到指定地址"><a href="#运行到指定地址" class="headerlink" title="运行到指定地址"></a>运行到指定地址</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.run_to">ida_dbg.run_to(addr)</a></p>
<h2 id="等待下一个调试事件"><a href="#等待下一个调试事件" class="headerlink" title="等待下一个调试事件"></a>等待下一个调试事件</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.wait_for_next_event">ida_dbg.wait_for_next_event()</a></p>
<p>引用佬哥文章内容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">wait_for_next_event(EVENT_TYPE, flags)  获取并清除调试器事件代码，普通代码返回<span class="number">0x20</span>, 断点、ret指令返回<span class="number">0x10</span>，程序结束返回负数</span><br><span class="line">必须在导致进程执行的每个函数之后调用，以便检索调试器的事件代码，否则可能会阻止后续尝试单步执行或运行进程。例如，以下代码片段将只单步执行调试器一次，因为在两次调用StepOver之间没有调用以清除最后一个事件类型</span><br><span class="line">step_over()</span><br><span class="line">step_over()</span><br><span class="line">step_over()</span><br><span class="line">正确的做法应该是在每一次调用step_over后调用一次wait_for_next_event</span><br><span class="line">step_over()</span><br><span class="line">wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)    <span class="comment"># 是否获取返回值都可以清除调试器事件代码，从而继续执行调试</span></span><br><span class="line">step_over()</span><br><span class="line">wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)</span><br><span class="line">step_over()</span><br><span class="line">wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">事件类型“WFNE_SUSP”将等待导致被调试进程挂起的事件，例如异常或断点</span><br><span class="line">事件类型“WFNE_CONT”可以恢复被挂起的进程，继续执行</span><br><span class="line">如：</span><br><span class="line">event = wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)</span><br><span class="line">event = wait_for_next_event(WFNE_ANY|WFNE_CONT, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="在指定地址下断点"><a href="#在指定地址下断点" class="headerlink" title="在指定地址下断点"></a>在指定地址下断点</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.add_bpt">ida_dbg.add_bpt(addr)</a></p>
<p>ida_dbg.add_bpt(0x7ff677ab119e)</p>
<h2 id="根据寄存器名获取寄存器的值"><a href="#根据寄存器名获取寄存器的值" class="headerlink" title="根据寄存器名获取寄存器的值"></a>根据寄存器名获取寄存器的值</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.get_reg_val">ida_dbg.get_reg_val(regname)</a></p>
<p>print(ida_dbg.get_reg_val(“RAX”))</p>
<p>idc中是get_reg_value(regname)</p>
<p>print(idc.get_reg_value(“RAX”))</p>
<h2 id="根据寄存器名设置寄存器值"><a href="#根据寄存器名设置寄存器值" class="headerlink" title="根据寄存器名设置寄存器值"></a>根据寄存器名设置寄存器值</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_dbg.html#ida_dbg.set_reg_val">ida_dbg.set_reg_val(regname,value)</a></p>
<p>ida_dbg.set_reg_val(“RAX”,15)</p>
<p>idc中是set_reg_value(value,regname)</p>
<p>idc.set_reg_value(8,”rax”)</p>
<h1 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h1><ol>
<li><p>ida_bytes.get_byte(addr)</p>
</li>
<li><p>ida_bytes.get_word(addr)</p>
</li>
<li><p>ida_bytes.get_dword(addr)</p>
</li>
<li><p>ida_bytes.get_qword(addr)</p>
</li>
<li><p>ida_bytes.get_bytes(addr,size) 获取指定地址处指定字节数</p>
</li>
<li><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/idc.html#idc.get_strlit_contents">idc.get_strlit_contents(addr,length&#x3D;-1,strtype&#x3D;0)</a></p>
<p>获取指定地址处的字符串</p>
<p>length参数可以指定字符串长度,默认为最大字符串长度(0结束符)</p>
</li>
</ol>
<h1 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h1><ol>
<li>ida_bytes.patch_byte(addr,value)</li>
<li>ida_bytes.patch_word(addr,value)</li>
<li>ida_bytes.patch_dword(addr,value)</li>
<li>ida_bytes.patch_qword(addr,value)</li>
</ol>
<h1 id="数值判断"><a href="#数值判断" class="headerlink" title="数值判断"></a>数值判断</h1><ol>
<li>ida_bytes.is_byte(addr)</li>
<li>ida_bytes.is_word(addr)</li>
<li>ida_bytes.is_dword(addr)</li>
<li>ida_bytes.is_qword(addr)</li>
</ol>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>idc.find_binary(addr, flag, pattern, radix&#x3D;16)</p>
<p>第一个参数是起始地址,第二个参数是搜索方式,这里是向下(低地址向高地址搜索),第三个是格式匹配串,默认为16进制字节串,字节间用空格隔开</p>
<p>常见搜索方向</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SEARCH_UP = 0   #常用，搜索方向</span><br><span class="line">SEARCH_DOWN = 1  #常用，搜索方向</span><br></pre></td></tr></table></figure>

<p>官方文档已弃用find_binary函数,推荐使用bin_search </p>
<p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/ida_bytes.html#ida_bytes.bin_search">ida_bytes.bin_search(start, end, pattern,flag)</a></p>
<p>这里的pattern需要用ida_bytes.parse_binpat_str()转换为模式串对象</p>
<p>parse_binpat_str函数有四个参数,感觉很麻烦,还不如find_binary</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="NKCTF2023-earlier"><a href="#NKCTF2023-earlier" class="headerlink" title="NKCTF2023 earlier"></a>NKCTF2023 earlier</h2><p>去除花指令脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> idautils</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line">pattern = <span class="string">&quot;33 C0 85 C0 74 03 75 00 E8&quot;</span> 	<span class="comment"># 匹配花指令字节码</span></span><br><span class="line">cur_addr = <span class="number">0x401000</span>						<span class="comment"># 程序起始地址</span></span><br><span class="line"><span class="keyword">while</span> cur_addr != idc.BADADDR:			<span class="comment"># 遍历程序可访问地址</span></span><br><span class="line">    cur_addr = idc.find_binary(cur_addr,SEARCH_DOWN,pattern) </span><br><span class="line">    <span class="comment"># 匹配花指令所在地址,第一个参数是起始地址,第二个参数是搜索方式,这里是向下(低地址向高地址搜索),第三个是格式字符串</span></span><br><span class="line">    <span class="keyword">if</span> cur_addr == idc.BADADDR:								 <span class="comment"># 如果未匹配到</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;patch address: &quot;</span>,<span class="built_in">hex</span>(cur_addr)) 				 <span class="comment"># 打印起始地址</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):									 <span class="comment"># 开始patch</span></span><br><span class="line">            ida_bytes.patch_byte(cur_addr,<span class="number">0x90</span>)</span><br><span class="line">            cur_addr += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="CISCN2023-moveAside"><a href="#CISCN2023-moveAside" class="headerlink" title="CISCN2023 moveAside"></a>CISCN2023 moveAside</h2><p>Sink师傅脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\admin\Desktop\out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    espVal = get_reg_val(<span class="string">&#x27;esp&#x27;</span>) <span class="comment">#获取寄存器的值</span></span><br><span class="line">    oAddr = get_dword(espVal + <span class="number">4</span>)	<span class="comment">#获取参数地址</span></span><br><span class="line">    tAddr = get_dword(espVal + <span class="number">8</span>)</span><br><span class="line">    o = get_byte(oAddr)<span class="comment">#获取参数值</span></span><br><span class="line">    t = get_byte(tAddr)</span><br><span class="line">    <span class="keyword">if</span> o != t:</span><br><span class="line">        patch_byte(oAddr, t)<span class="comment">#修改8600154 保证通过strcmp函数检测</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>: o = <span class="subst">&#123;<span class="built_in">hex</span>(o)&#125;</span>, t = <span class="subst">&#123;<span class="built_in">hex</span>(t)&#125;</span>&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>: o = <span class="subst">&#123;<span class="built_in">hex</span>(o)&#125;</span>, t = <span class="subst">&#123;<span class="built_in">hex</span>(t)&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.flush()</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    continue_process()<span class="comment">#继续调试</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)<span class="comment">#程序休眠</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">48</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    wait_for_next_event(WFNE_SUSP, -<span class="number">1</span>)<span class="comment">#等待下一个调试事件</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>逆向技术</category>
      </categories>
      <tags>
        <tag>IDAPython</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-03日报</title>
    <url>/2023/09/03/%E6%97%A5%E6%8A%A5/2023-09/2023-09-03%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>系统学习了IDAPython的基本语法<br>IDAPython拥有调试功能,可以实现一些骚操作<br>以后做题目多试着用IDAPython提取数据和patch加深印象</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天上午搬书去了,下午给靶场出了两道简单题,<br>晚上才学了点东西,明天就正式开始上学了,还得加油复现羊城杯的题</p>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-04日报</title>
    <url>/2023/09/04/%E6%97%A5%E6%8A%A5/2023-09/2023-09-04%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天开学第一天,课比较多加上昨晚没睡好今天很没精神,一天也没学多少东西<br>回顾了下js基础语法和html,web前端作业感觉挺麻烦,希望以后学的后端省点事</p>
<p>AliCrackme_2这题的反调试引出了一个问题:安卓常见反调试技术以及如何反反调试<br>明天准备学习一下安卓反调试技术,尝试复现vm_wo(先了解虚拟执行基本原理,尝试写一个简单的虚拟执行程序)</p>
<p>学校的课程还是一如既往的没什么用,还是得自学,多做笔记,有点后悔之前学web没做笔记了</p>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>简单计算器APP开发练习</title>
    <url>/2023/08/23/Android/AndroidStudy/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8APP%E5%BC%80%E5%8F%91%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p>显示效果如下<br><img src="/2023/08/23/Android/AndroidStudy/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8APP%E5%BC%80%E5%8F%91%E7%BB%83%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%99%A8%E5%B8%83%E5%B1%80.png"><br>基本思路是用线性布局包裹一个两个文本框和一个网格布局,网格布局内部设置多个计算器按钮</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#EEEEEE&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@string/name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/result&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@color/white&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">&quot;right|bottom&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:lines</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">GridLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:columnCount</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:rowCount</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/back&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;@string/clear&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/divide&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;÷&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/multi&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;×&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/clear&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;C&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/seven&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;7&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/eight&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/nine&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;9&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/plus&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;+&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/four&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/five&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/six&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;6&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/sub&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;－&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/one&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/two&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/three&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/sqrt&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;√&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/reciprocal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;1/X&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/zero&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/point&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;.&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/equal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/button_height&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_columnWeight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;=&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;@dimen/button_font_size&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Java层代码"><a href="#Java层代码" class="headerlink" title="Java层代码"></a>Java层代码</h1><p>由于是简单计算器,功能并不是十分完善<br>主要就是实现两个操作数的运算,仍有不少bug<br>注意点:</p>
<ol>
<li><p>可以设置MainActivity为多个按钮的监听器<br>但是要注意实现View.OnClickListener接口,否则程序会崩溃</p>
</li>
<li><p>一些特殊情况判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.calculator;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意要先实现View.OnClickListener接口,否则会崩溃</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView result;<span class="comment">//文本框</span></span><br><span class="line">    <span class="keyword">private</span> String firstNum=<span class="string">&quot;&quot;</span>;<span class="comment">//第一个操作数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">operate</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;<span class="comment">//操作符</span></span><br><span class="line">    <span class="keyword">private</span> String secondNum=<span class="string">&quot;&quot;</span>;<span class="comment">//第二个操作数</span></span><br><span class="line">    <span class="keyword">private</span> String resultNow=<span class="string">&quot;&quot;</span>;<span class="comment">//当前结果</span></span><br><span class="line">    <span class="keyword">private</span> String showText=<span class="string">&quot;&quot;</span>;<span class="comment">//文本框显示的内容</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        result=findViewById(R.id.result);</span><br><span class="line">        findViewById(R.id.clear).setOnClickListener(MainActivity.<span class="built_in">this</span>);<span class="comment">//将监听器设置为该类</span></span><br><span class="line">        findViewById(R.id.divide).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.multi).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.seven).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.eight).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.nine).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.plus).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.sub).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.four).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.five).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.six).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.one).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.two).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.three).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.sqrt).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.reciprocal).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.zero).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.point).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.equal).setOnClickListener((View.OnClickListener) <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写onClick方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span></span><br><span class="line">    &#123;</span><br><span class="line">        String inputText;<span class="comment">//点击按钮的输入字符</span></span><br><span class="line">        <span class="type">int</span> id=v.getId();<span class="comment">//判断id</span></span><br><span class="line">        <span class="keyword">if</span>(id==R.id.sqrt)<span class="comment">//如果是根号,做特殊处理</span></span><br><span class="line">        &#123;</span><br><span class="line">            inputText=<span class="string">&quot;√&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//除了根号之外都可以用toString</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取点击按钮的文本内容</span></span><br><span class="line">            inputText=((TextView)v).getText().toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span>(id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//点击清除按钮</span></span><br><span class="line">            <span class="keyword">case</span> R.id.clear:</span><br><span class="line">                clear();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//点击回退按钮</span></span><br><span class="line">            <span class="keyword">case</span> R.id.back:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//点击加减乘除</span></span><br><span class="line">            <span class="keyword">case</span> R.id.plus:</span><br><span class="line">            <span class="keyword">case</span> R.id.sub:</span><br><span class="line">            <span class="keyword">case</span> R.id.multi:</span><br><span class="line">            <span class="keyword">case</span> R.id.divide:</span><br><span class="line">                <span class="comment">//运算符</span></span><br><span class="line">                operate=inputText;</span><br><span class="line">                reFlashText(showText+operate);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//点击等号 进行运算</span></span><br><span class="line">            <span class="keyword">case</span> R.id.equal:</span><br><span class="line">                <span class="comment">//没有第二个操作数,按等号直接设置为第一个操作数</span></span><br><span class="line">                <span class="keyword">if</span>(secondNum==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    reFlashText(firstNum);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                reFlashResult(String.valueOf(calculateFour()));</span><br><span class="line">                reFlashText(showText+<span class="string">&quot;=&quot;</span>+resultNow);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//根号</span></span><br><span class="line">            <span class="keyword">case</span> R.id.sqrt:</span><br><span class="line">                <span class="type">double</span> sqrt_result=Math.sqrt(Double.parseDouble(firstNum));</span><br><span class="line">                reFlashResult(String.valueOf(sqrt_result));</span><br><span class="line">                reFlashText(showText+<span class="string">&quot;=&quot;</span>+resultNow);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//取倒数</span></span><br><span class="line">            <span class="keyword">case</span> R.id.reciprocal:</span><br><span class="line">                <span class="type">double</span> reci_result=<span class="number">1.0</span>/Double.parseDouble(firstNum);</span><br><span class="line">                reFlashResult(String.valueOf(reci_result));</span><br><span class="line">                reFlashText(showText+<span class="string">&quot;=&quot;</span>+resultNow);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">//上次运算结果已经得到,并且没有输入操作符,则是一次新的计算 清空内容</span></span><br><span class="line">                <span class="keyword">if</span>(resultNow.length()&gt;<span class="number">0</span>&amp;&amp;operate.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">                    clear();</span><br><span class="line">                <span class="comment">//没有操作符,是在输入第一个操作数,直接拼接操作数即可</span></span><br><span class="line">                <span class="keyword">if</span>(operate.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    firstNum+=inputText;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//有操作符,是在输入第二个操作数</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    secondNum+=inputText;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//整数不需要前导零,小数需要前导零</span></span><br><span class="line">                <span class="comment">//第一个字符默认为0 此时输入0不应该添加新的0,直接将输入数据刷新即可</span></span><br><span class="line">                <span class="comment">//如果是小数点那么0需要拼接小数点,否则不用</span></span><br><span class="line">                <span class="keyword">if</span>(showText.equals(<span class="string">&quot;0&quot;</span>)&amp;&amp;!inputText.equals(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                    reFlashText(inputText);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//拼接上输入字符</span></span><br><span class="line">                    reFlashText(showText+inputText);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateFour</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operate)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)+Double.parseDouble(secondNum);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;－&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)-Double.parseDouble(secondNum);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;×&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)*Double.parseDouble(secondNum);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;÷&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> Double.parseDouble(firstNum)/Double.parseDouble(secondNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">        reFlashText(<span class="string">&quot;0&quot;</span>);<span class="comment">//清空文本框内容</span></span><br><span class="line">        reFlashResult(<span class="string">&quot;&quot;</span>);<span class="comment">//运算结果清空</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//刷新运算结果 每次运算后应该只保留一个运算结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reFlashResult</span><span class="params">(String new_result)</span>&#123;</span><br><span class="line">        resultNow=new_result;</span><br><span class="line">        firstNum=new_result;</span><br><span class="line">        secondNum=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        operate=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//刷新文本显示</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reFlashText</span><span class="params">(String text)</span></span><br><span class="line">    &#123;</span><br><span class="line">        showText=text;</span><br><span class="line">        result.setText(showText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
  </entry>
  <entry>
    <title>IDA调试安卓SO文件</title>
    <url>/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>安卓逆向中会需要分析Native层的SO文件</p>
<p>由于SO文件是动态链接库文件,不能独立执行,必须依赖相关进程进行调试</p>
<p>所以只能使用IDA附加调试(attach)</p>
<p>附加调试有两种情况</p>
<ol>
<li><p>Native函数是发生一些事件后调用</p>
<p>例如输入用户名和密码,点击按钮进行登录</p>
<p>这种情况正常运行程序,一般附加即可</p>
</li>
<li><p>Native函数是App启动时立刻调用</p>
<p>例如.init_array中的函数和JNI_OnLoad函数</p>
<p>这种情况需要以debug模式启动app再进行附加</p>
</li>
</ol>
<h1 id="基本准备"><a href="#基本准备" class="headerlink" title="基本准备"></a>基本准备</h1><p>无论是哪种情况,都要做一些准备</p>
<ol>
<li>设置手机ro.debuggable属性为1</li>
<li>将android_server推送至手机</li>
<li>启动android_server</li>
<li>adb设置端口转发</li>
<li>设置process options</li>
</ol>
<h2 id="设置ro-debuggable"><a href="#设置ro-debuggable" class="headerlink" title="设置ro.debuggable"></a>设置ro.debuggable</h2><p>可以通过该命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.debuggable</span><br></pre></td></tr></table></figure>

<p>一般手机默认为0(即不允许调试)</p>
<p>手机经过root后,使用Magisk安装MagiskHidePropsConf模块操作</p>
<p>详细操作参考:</p>
<p><a href="https://blog.csdn.net/jinmie0193/article/details/111355867?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169390181016800227423723%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169390181016800227423723&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111355867-null-null.142%5Ev93%5Econtrol&utm_term=%E4%BF%AE%E6%94%B9ro.debuggable&spm=1018.2226.3001.4187">Android修改ro.debuggable 的四种方法</a></p>
<h2 id="推送android-server"><a href="#推送android-server" class="headerlink" title="推送android_server"></a>推送android_server</h2><p>在ida的dbgsrv文件夹下,找到和手机架构匹配的server</p>
<p>真机一般是arm64架构,直接选择android_server64即可</p>
<p>模拟器一般是x86&#x2F;x64架构</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/11_server.png" alt="11_server"></p>
<p>在该文件夹中打开cmd</p>
<p>输入命令将文件推送至手机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push android_server64 /data/local/tmp</span><br></pre></td></tr></table></figure>



<h2 id="执行andorid-server"><a href="#执行andorid-server" class="headerlink" title="执行andorid-server"></a>执行andorid-server</h2><p>输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">chmod 777 android_server64 #赋予执行权</span><br><span class="line">./android_server64 #执行</span><br></pre></td></tr></table></figure>

<p>执行后如下,cmd窗口不要关闭</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/3_%E5%90%AF%E5%8A%A8server.png" alt="3_启动server"></p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>再打开一个cmd窗口</p>
<p>输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb forward tcp:23946 tcp:23946</span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/4_%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.png" alt="4_端口转发"></p>
<h2 id="设置Process-options"><a href="#设置Process-options" class="headerlink" title="设置Process options"></a>设置Process options</h2><p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/12_processoptions.png" alt="12_processoptions"></p>
<p>将hostname设置为127.0.0.1(或localhost)</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/13_localhost.png" alt="13_localhost"></p>
<h1 id="一般附加"><a href="#一般附加" class="headerlink" title="一般附加"></a>一般附加</h1><p>运行android_server后,手机上正常启动app</p>
<p>建议到Debugger&gt;Debugger options中勾选上这三个选项</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/9_debug%E8%AE%BE%E7%BD%AE.png" alt="9_debug设置"></p>
<p>用ida打开so文件,提前在关键函数处下断点,再点击Debugger&gt;Attach to process</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/6_attach.png" alt="6_attach"></p>
<p>之后选择附加程序,可以按ctrl+f搜索app包名进行查找</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/10_%E9%80%89%E6%8B%A9app.png" alt="10_选择app"></p>
<p>刚附加时,此时app会暂停执行,f9继续运行</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/7_%E5%88%9A%E9%99%84%E5%8A%A0%E6%97%B6.png" alt="7_刚附加时"></p>
<p>输入用户名和密码,点击登录按钮后成功在关键函数断点处断下,之后就可以愉快的调试了</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/5_%E5%87%BD%E6%95%B0%E6%96%AD%E4%B8%8B.png" alt="5_函数断下"></p>
<h1 id="Debug模式启动app附加"><a href="#Debug模式启动app附加" class="headerlink" title="Debug模式启动app附加"></a>Debug模式启动app附加</h1><p>启动android_server后,使用命令以debug模式启动app</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -D -n packagename./MainActivity</span><br></pre></td></tr></table></figure>

<p>这里的MainActivity是app的入口类,一般默认是这个,也可能是其他名称</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/14_debug%E6%A8%A1%E5%BC%8F%E5%90%AF%E5%8A%A8app.png" alt="14_debug模式启动app"></p>
<p>手机上显示</p>
<img src="8_debug模式启动.png" alt="8_debug模式启动" style="zoom: 25%;" />

<p>然后和一般附加一样,先打开so文件,下好断点,选择attach to process附加app进程即可</p>
<p>附加成功后需要打开ddms,可以发现被调试进程显示红色小虫子,右边的8603&#x2F;8700则是端口号,记录该端口号</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/15_ddms.png" alt="15_ddms"></p>
<p><strong>tips:ddms在Android Sdk tools文件夹内,现在的名称是monitor</strong></p>
<p>双击monitor.bat即可打开</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/18_monitor.png" alt="18_monitor"></p>
<p>然后输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700 #port默认为8700 可以根据实际情况更改</span><br></pre></td></tr></table></figure>

<p>成功执行后如下,并且ddms的红色小虫子会变成绿色</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/16_jdb.png" alt="16_jdb"></p>
<p>然后按几次f9,等待程序加载一些so文件,之后就可以断到JNI_OnLoad或者.init_array等app启动时执行的函数处了</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/17_JNI_OnLoad.png" alt="17_JNI_OnLoad"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>不打开so文件,可以直接选择debugger&gt;attach进行附加调试</p>
<p>附加成功后点击右侧模块窗口搜索模块名</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/1_%E9%99%84%E5%8A%A0%E8%B0%83%E8%AF%95%E6%9F%A5%E6%89%BE%E6%A8%A1%E5%9D%97.png" alt="附加调试查找模块"></p>
<p>搜索到模块后点击模块可以看到模块的函数列表,点击之后可以查看函数</p>
<p><img src="/2023/09/05/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/IDA%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93SO%E6%96%87%E4%BB%B6/2_%E7%82%B9%E5%87%BB%E6%A8%A1%E5%9D%97%E5%87%BD%E6%95%B0%E5%8D%B3%E5%8F%AF%E6%9F%A5%E7%9C%8B.png" alt="点击模块函数即可查看"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Tue Sep 05 2023 08:00:00 GMT+0800 (中国标准时间)</title>
    <url>/2023/09/05/%E6%97%A5%E6%8A%A5/2023-09/2023-09-05%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上午上课确实很无聊,带了电脑想学一学安卓反调试技术,感觉没学到什么<br>后来又去做了alicrackme2,没做出来<br>下午继续看了一下午,晚上问了下宽哥,最后推测是安卓版本问题,app目标sdk19(安卓4.4),希望明天pixel1刷安卓7能跑</p>
<p>以后可以学学linux管道符,感觉很方便<br>C盘复制之后需要修复引导</p>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-06日报</title>
    <url>/2023/09/06/%E6%97%A5%E6%8A%A5/2023-09/2023-09-06%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="安洵杯-2019-crackMe"><a href="#安洵杯-2019-crackMe" class="headerlink" title="[安洵杯 2019]crackMe"></a>[安洵杯 2019]crackMe</h2><p>上午看了一会安洵杯2019的crackme 感觉这题的Hook Messagebox和VEH异常处理很是巧妙<br>推测hook是IAT hook,找到导入函数地址表中的导入函数地址并修改 正好借此机会学学IAT HOOK(感觉可以总结一下常见HOOK技术了)<br>VEH机制相关文章<br><a href="http://www.youngroe.com/2015/09/05/Windows/windows-exception-handling-mechanism/">http://www.youngroe.com/2015/09/05/Windows/windows-exception-handling-mechanism/</a><br><a href="https://bbs.kanxue.com/thread-166472-1.htm">https://bbs.kanxue.com/thread-166472-1.htm</a></p>
<h2 id="ida-android-server-32位-可以部分调试Alicrackme-2"><a href="#ida-android-server-32位-可以部分调试Alicrackme-2" class="headerlink" title="ida android server(32位)可以部分调试Alicrackme_2"></a>ida android server(32位)可以部分调试Alicrackme_2</h2><p>现象是可以逐个加载so文件,当加载到目标so文件时ida会询问文件是否相同,不过没有办法断到init_array和JNI_OnLoad(可能是有init函数?没有发现,难道是linker_init?)<br>总之下次<strong>调试32位so应该使用32位server</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>买的pixel到了两台,一台正常解锁另一台解不了锁,下午和晚上基本都在搞刷机和解锁</p>
<ol>
<li>[SWPU 2019]easyapp这题用pixel刷安卓7.1.0和安卓7.1.2都没办法hook得到返回值,安卓8.1.0一开始没有崩溃,返回了一个字符串(不正确),后面又开始崩溃</li>
<li>没解锁的那台手机搜寻了网上很多文章,有用pixel安卓10绕过进行解锁的(需要连接wifi访问google,可是这个手机有网络锁,wifi和插卡都不能用),后来去找解网络锁的办法也没什么效果</li>
</ol>
<p>明天好好研究下安洵杯2019crackme,争取学学unidbg<br>花这么多时间在配置环境上面实在太难受了</p>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-08日报</title>
    <url>/2023/09/08/%E6%97%A5%E6%8A%A5/2023-09/2023-09-08%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>7号一天的课都很无聊,感觉是在浪费时间,以后得带着电脑自学<br>只在晚上仔细看了下安洵杯2019 CrackMe</p>
</li>
<li><p>今天主要是学了下数据库的基本使用<br>老师讲的全是理论没有看到实际操作,很抽象<br>mysql环境有问题一直在调试和安装,最后还是SQLServer方便</p>
</li>
<li><p>处理了下迎新,蓝帽杯往返,安装取证软件等杂事</p>
</li>
</ol>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>安洵杯2019_CrackMe</title>
    <url>/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/</url>
    <content><![CDATA[<h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><p>首先查看main函数可以发现基本逻辑非常简单,这里有个非法内存访问指令</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/1_main.png" alt="1_main"></p>
<p>查看汇编代码可以发现注册了seh</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/2_%E6%B3%A8%E5%86%8Cseh.png" alt="2_注册seh"></p>
<p>调试时可以发现MessageBox函数被hook,可以交叉引用发现hook函数</p>
<h1 id="Hook-MessageBoxW"><a href="#Hook-MessageBoxW" class="headerlink" title="Hook MessageBoxW"></a>Hook MessageBoxW</h1><p>首先获取了自身的基地址</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/3_%E8%8E%B7%E5%8F%96%E8%87%AA%E8%BA%AB%E5%9F%BA%E5%9D%80.png" alt="3_获取自身基址"></p>
<p>然后加载USER32.dll并获取MessageBoxW函数的地址(导出地址)</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/4_%E5%8A%A0%E8%BD%BDuser32dll%E5%B9%B6%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80.png" alt="4_加载user32dll并获取函数地址"></p>
<p>跟进之后可以发现第一个for循环是查找user32.dll</p>
<p>然后获取了导入USER32.dll对应的导入函数表首地址</p>
<p>第二个while循环是获取MessageBoxW函数地址</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/6_%E5%AF%BB%E6%89%BEmessageboxw%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80.png" alt="6_寻找messageboxw函数地址"></p>
<p>查看pe可以发现user32.dll的第一个导入函数是messageboxA,第二个才是MessageBoxW,所以第二个循环用于查找该函数</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/5_%E5%AF%BC%E5%85%A5%E5%87%BD%E6%95%B0.png" alt="5_导入函数"></p>
<h2 id="hook-messageboxw"><a href="#hook-messageboxw" class="headerlink" title="hook messageboxw"></a>hook messageboxw</h2><p>下面一段是修改MessageBoxW函数的地址</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/7_%E4%BF%AE%E6%94%B9messageboxw%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80.png" alt="7_修改messageboxw函数地址"></p>
<p>不过值得注意的是这里应该是修改的IAT(导入函数地址表)中的内容,即将真实MessageBoxW函数地址hook为另一个函数</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/pMessageBoxW.png" alt="pMessageBoxW"></p>
<h2 id="注册VEH"><a href="#注册VEH" class="headerlink" title="注册VEH"></a>注册VEH</h2><p>跟进到新的函数地址中可以发现有个base换表操作,并注册了一个VEH函数</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/8_%E6%B3%A8%E5%86%8CVEH.png" alt="8_注册VEH"></p>
<p>跟进异常处理函数可以发现这里有个加密操作,还注册了一个顶层异常处理</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/9_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png" alt="9_异常处理函数"></p>
<h2 id="顶层异常处理器"><a href="#顶层异常处理器" class="headerlink" title="顶层异常处理器"></a>顶层异常处理器</h2><p>顶层异常处理器中也是一个加密操作</p>
<p><img src="/2023/09/08/%E9%A2%98%E7%9B%AE/BUUCTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019_CrackMe/10_%E9%A1%B6%E5%B1%82%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.png" alt="10_顶层异常处理器"></p>
<h1 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h1><ol>
<li>hook MeessageBoxW函数,注册VEH</li>
<li>注册SEH</li>
<li>触发异常,执行VEH</li>
<li>VEH处理函数注册顶层异常处理函数</li>
<li>调用SEH异常处理</li>
<li>调用顶层异常处理</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这题的关键在于IAT HOOK和VEH异常处理</p>
<p>看其他师傅的WP说是SM4加密,暂时还没发现,后续在研究研究</p>
<h2 id="SetUnhandledExceptionFilter"><a href="#SetUnhandledExceptionFilter" class="headerlink" title="SetUnhandledExceptionFilter"></a>SetUnhandledExceptionFilter</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-setunhandledexceptionfilter">SetUnhandledExceptionFilter</a>是Windows操作系统提供的一个函数，用于设置未处理异常过滤器（Unhandled Exception Filter）。当在进程中发生未处理的异常时，注册的未处理异常过滤器将被调用，允许开发人员对异常进行处理或采取其他适当的操作。</p>
<p>函数原型如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LPTOP_LEVEL_EXCEPTION_FILTER <span class="title function_">SetUnhandledExceptionFilter</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>lpTopLevelExceptionFilter</code>：指向顶层异常过滤器（Top Level Exception Filter）的函数指针，该函数的原型为<code>LONG WINAPI TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)</code>。</li>
</ul>
<p>返回值：</p>
<ul>
<li>返回之前注册的顶层异常过滤器的函数指针。如果没有先前注册的过滤器，则返回NULL。</li>
</ul>
<p>顶层异常过滤器是一个函数，用于处理未处理的异常。它接收一个指向_EXCEPTION_POINTERS结构的指针，该结构包含关于异常的详细信息，例如异常代码、异常参数和异常上下文等。</p>
<p>通过SetUnhandledExceptionFilter函数注册的未处理异常过滤器将在发生未处理的异常时被调用。过滤器可以执行各种操作，如记录日志、生成崩溃报告、修改异常上下文、恢复程序状态等。如果过滤器成功处理了异常，它可以返回EXCEPTION_EXECUTE_HANDLER以指示异常已被处理，或返回EXCEPTION_CONTINUE_SEARCH以继续搜索其他异常处理程序。</p>
]]></content>
      <categories>
        <category>BUUCTF</category>
      </categories>
      <tags>
        <tag>IATHook</tag>
        <tag>VEH</tag>
        <tag>SEH</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-09日报</title>
    <url>/2023/09/09/%E6%97%A5%E6%8A%A5/2023-09/2023-09-09%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天主要是迎新 得准备招新宣讲的ppt了<br>晚上把web第一周作业基本做完<br>前端一如既往的好麻烦</p>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-12日报</title>
    <url>/2023/09/12/%E6%97%A5%E6%8A%A5/2023-09/2023-09-12%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p>昨天研究了下网鼎杯2020 signal<br>这题的vmp保护可以通过获取指令执行流,修改代码为逆代码,再反向执行指令序列即可<br> vmp保护的关键是获取执行流和对应指令序列</p>
</li>
<li><p>今天主要是尝试将rwProcMem33编译进安卓内核<br> 参考文章<a href="https://bbs.kanxue.com/thread-278647.htm#msg_header_h2_5">https://bbs.kanxue.com/thread-278647.htm#msg_header_h2_5</a><br> 文章正好和我的测试机非常匹配,可惜今晚没有成功编译出内核,最后有个报错卡了很久<br> 明天再试试看,实在不行弃用ubuntu18.04,改用20.04</p>
</li>
</ol>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>rwProcMem33模块编译进内核</title>
    <url>/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://bbs.kanxue.com/thread-278647.htm#msg_header_h2_13">[原创]将rwProcMem33编译进安卓内核</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/574856795">史上最简最全，Android AOSP源码阅读+编译环境这一篇就够了</a></p>
<p><a href="https://www.bilibili.com/video/BV1hR4y1k795/?spm_id_from=333.999.0.0&vd_source=8c182d1e4a80cc9f34dfe996135c2c23">安卓内核驱动编译</a></p>
<h1 id="linux环境配置"><a href="#linux环境配置" class="headerlink" title="linux环境配置"></a>linux环境配置</h1><h2 id="安装Ubuntu20-04"><a href="#安装Ubuntu20-04" class="headerlink" title="安装Ubuntu20.04"></a>安装Ubuntu20.04</h2><p>首先到官网下载镜像</p>
<p>配置software&amp;updates的服务器为阿里云</p>
<p>安装vm-tools</p>
<p>如果安装后无法使用可以执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade #更新</span><br><span class="line">sudo apt-get install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>



<h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>点击允许局域网,查看网卡</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/5_%E5%85%81%E8%AE%B8%E5%B1%80%E5%9F%9F%E7%BD%91.png" alt="5_允许局域网"></p>
<p>虚拟机配置为NAT模式,关注VMnet8网卡地址</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/6_%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1.png" alt="6_虚拟机网卡"></p>
<p>虚拟机中打开网络代理设置</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/8_%E6%89%93%E5%BC%80%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png" alt="8_打开网络配置"></p>
<p>配置好代理地址和端口</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/7_%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.png" alt="7_虚拟机代理配置"></p>
<h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>



<h2 id="安装必要库"><a href="#安装必要库" class="headerlink" title="安装必要库"></a>安装必要库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig libssl-dev bc kmod cpio git curl</span><br></pre></td></tr></table></figure>



<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>配置git信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email  &quot;xxx@gmail.com&quot;</span><br><span class="line">git config --global user.name  &quot;xxx&quot;</span><br><span class="line">git config --global http.proxy 192.168.88.1:7890</span><br></pre></td></tr></table></figure>

<p>如果不配置好则会导致</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%983_git%E9%85%8D%E7%BD%AE.png"></p>
<h2 id="安装repo"><a href="#安装repo" class="headerlink" title="安装repo"></a>安装repo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure>

<h3 id="修改repo源"><a href="#修改repo源" class="headerlink" title="修改repo源"></a>修改repo源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加这三行,修改为清华源并添加repo至全局变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">repo</span></span><br><span class="line">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;</span><br><span class="line">export PATH=&quot;~/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>

<p>使配置文件生效 注意<strong>修改配置文件后必须要使用该命令使之生效</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt install python3.9</span><br><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>



<h2 id="修改交换分区大小"><a href="#修改交换分区大小" class="headerlink" title="修改交换分区大小"></a>修改交换分区大小</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo swapoff /swapfile #停用原始swap文件</span><br><span class="line">sudo rm /swapfile #删除文件</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置了32g交换区, 防止编译失败，执行下列命令需要花费一段时间，如果执行命令后没有输出，请耐心等待命令执行完毕</span></span><br><span class="line">sudo dd if=/dev/zero of=/swapfile bs=1GB count=32</span><br><span class="line">sudo chmod 600 /swapfile #设置文件权限</span><br><span class="line">sudo mkswap -f /swapfile #挂载</span><br><span class="line">sudo swapon /swapfile #启用</span><br></pre></td></tr></table></figure>

<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/2_%E8%AE%BE%E7%BD%AEswap%E5%A4%A7%E5%B0%8F.png" alt="2_设置swap大小"></p>
<h1 id="下载内核源码"><a href="#下载内核源码" class="headerlink" title="下载内核源码"></a>下载内核源码</h1><p>注意 谷歌官方不提供老版本安卓内核编译文件,只能<strong>下载其推荐的最新的内核Build文件</strong></p>
<p>原来刷的安卓9现在又得刷回安卓12了</p>
<h3 id="查看内核版本号"><a href="#查看内核版本号" class="headerlink" title="查看内核版本号"></a>查看内核版本号</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cat /proc/version</span><br></pre></td></tr></table></figure>

<p>pixel 安卓8的版本号</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/3_linux%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC.png" alt="3_linux内核版本"></p>
<p>pixel3XL 安卓12的内核版本号</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/9_pixel3XL%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC.png" alt="9_pixel3XL内核版本"></p>
<h3 id="查看内核源码分支"><a href="#查看内核源码分支" class="headerlink" title="查看内核源码分支"></a>查看内核源码分支</h3><p>在官网查看<a href="https://source.android.com/docs/setup/build/building-kernels?hl=zh-cn">构建内核</a></p>
<p>pixel</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/4_%E5%86%85%E6%A0%B8%E5%88%86%E6%94%AF.png" alt="4_内核分支"></p>
<p>pixel3xl</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/12_pixel3xl%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%8F%B7.png" alt="12_pixel3xl内核版本号"></p>
<p>注意这里<strong>显示的是最新的内核版本</strong></p>
<p>在内核镜像官网<a href="https://android.googlesource.com/kernel/manifest/+refs%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%9B%B4%E8%AF%A6%E7%BB%86%E7%9A%84%E5%86%85%E6%A0%B8%E5%88%86%E6%94%AF">https://android.googlesource.com/kernel/manifest/+refs可以找到更详细的内核分支</a></p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E6%88%90%E5%8A%9F%E6%89%BE%E5%88%B0%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8%E5%88%97%E8%A1%A8.png" alt="成功找到安卓内核列表"></p>
<h3 id="下载内核源码-1"><a href="#下载内核源码-1" class="headerlink" title="下载内核源码"></a>下载内核源码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir android-kernel &amp;&amp; cd android-kernel</span><br><span class="line">mkdir pixel &amp;&amp; cd pixel</span><br><span class="line"></span><br><span class="line">repo init -u https://android.googlesource.com/kernel/manifest -b android-msm-crosshatch-4.9-android12 #初始化仓库并指定版本</span><br><span class="line">repo sync -j8 #同步处理线程数</span><br></pre></td></tr></table></figure>

<h3 id="切换git分支"><a href="#切换git分支" class="headerlink" title="切换git分支"></a>切换git分支</h3><p>手机显示的Linux version 4.9.270-g862f51bac900-ab7613625</p>
<p>g后面跟的是分支 切换分支为862f51bac900</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd private/msm-google</span><br><span class="line">git checkout 862f51bac900</span><br></pre></td></tr></table></figure>

<h1 id="编译内核源码"><a href="#编译内核源码" class="headerlink" title="编译内核源码"></a>编译内核源码</h1><h2 id="解包boot-img"><a href="#解包boot-img" class="headerlink" title="解包boot.img"></a>解包boot.img</h2><p>下载<a href="https://forum.xda-developers.com/attachments/android-image-kitchen-v3-8-win32-zip.5300919/">android-image-kitchen</a></p>
<p>将系统boot.img放在解压后的文件夹内,运行unpackimg.bat</p>
<p>注意运行后的窗口中的参数后续需要使用,可以先保存到txt中</p>
<p>输出的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ANDROID! magic found at: 0</span><br><span class="line">BOARD_KERNEL_CMDLINE console=ttyMSM0,115200n8 androidboot.console=ttyMSM0 printk.devkmsg=on msm_rtb.filter=0x237 ehci-hcd.park=3 service_locator.enable=1 cgroup.memory=nokmem lpm_levels.sleep_disabled=1 usbcore.autosuspend=7 loop.max_part=7 androidboot.boot_devices=soc/1d84000.ufshc androidboot.super_partition=system buildvariant=user</span><br><span class="line">BOARD_KERNEL_BASE 0x00000000</span><br><span class="line">BOARD_NAME</span><br><span class="line">BOARD_PAGE_SIZE 4096</span><br><span class="line">BOARD_HASH_TYPE sha1</span><br><span class="line">BOARD_KERNEL_OFFSET 0x00008000</span><br><span class="line">BOARD_RAMDISK_OFFSET 0x01000000</span><br><span class="line">BOARD_SECOND_OFFSET 0x00000000</span><br><span class="line">BOARD_TAGS_OFFSET 0x00000100</span><br><span class="line">BOARD_OS_VERSION 12.0.0</span><br><span class="line">BOARD_OS_PATCH_LEVEL 2021-10</span><br><span class="line">BOARD_HEADER_VERSION 2</span><br><span class="line">BOARD_HEADER_SIZE 1660</span><br><span class="line">BOARD_DTB_SIZE 863100</span><br><span class="line">BOARD_DTB_OFFSET 0x01f00000</span><br></pre></td></tr></table></figure>



<p>完成后进入split_img&#x2F; 解压其中的boot.img-ramdisk.cpio.gz</p>
<p>并将解压后的boot.img-ramdisk.cpio复制到内核源码根目录 </p>
<h2 id="下载mkbootimg-py"><a href="#下载mkbootimg-py" class="headerlink" title="下载mkbootimg.py"></a>下载mkbootimg.py</h2><p><a href="http://aospxref.com/android-11.0.0_r21/xref/system/tools/mkbootimg/mkbootimg.py">mkbootimg.py</a></p>
<p>下载到内核源码根目录即可</p>
<h2 id="修改build-sh"><a href="#修改build-sh" class="headerlink" title="修改build.sh"></a>修改build.sh</h2><p>内核源码根目录中,进入build 打开build.sh</p>
<p>找到这两行(612行)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;========================================================&quot;</span><br><span class="line">echo &quot; Files copied to $&#123;DIST_DIR&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>在这两行前添加命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -f &quot;$&#123;VENDOR_RAMDISK_BINARY&#125;&quot; ]; then</span><br><span class="line">cp $&#123;VENDOR_RAMDISK_BINARY&#125; $&#123;DIST_DIR&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="下载rwProcMem3"><a href="#下载rwProcMem3" class="headerlink" title="下载rwProcMem3"></a>下载rwProcMem3</h2><p>将解压后的文件夹复制到内核源码目录的private&#x2F;msm-google&#x2F;drivers&#x2F;中</p>
<h2 id="修改rwProcMem3"><a href="#修改rwProcMem3" class="headerlink" title="修改rwProcMem3"></a>修改rwProcMem3</h2><h3 id="ver-control-h"><a href="#ver-control-h" class="headerlink" title="ver_control.h"></a>ver_control.h</h3><p>在private&#x2F;msm-google&#x2F;drivers&#x2F;rwProcMem33&#x2F;ver_control.h和private&#x2F;msm-google&#x2F;drivers&#x2F;rwProcMem33&#x2F;hwBreakpointProcModule&#x2F;hwBreakpointProc&#x2F;ver_control.h</p>
<p>选择<code>MY_LINUX_VERSION_CODE</code>的原则选这里出现的版本号中越接近自己手机内核版本的版本号</p>
<p>还要注意页表的问题,linux 4.11以下的不支持5级页表,选择启用读取pagemap文件来计算物理内存的地址</p>
<p>注释掉启用页表计算物理内存的地址</p>
<p>如果是linux 4.11以上则相反设置即可</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/18_%E8%AE%BE%E7%BD%AEver_control.png" alt="18_设置ver_control"></p>
<h3 id="phy-mem-h"><a href="#phy-mem-h" class="headerlink" title="phy_mem.h"></a>phy_mem.h</h3><p>首先到<strong>private&#x2F;msm-google&#x2F;mm&#x2F;maccess.c</strong>文件中的这个位置查看内核内存拷贝函数的函数名</p>
<p>可以看到函数名为probe_kernel_read</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/19_maccess%E6%96%87%E4%BB%B6.png" alt="19_maccess文件"></p>
<p>然后在<strong>private&#x2F;msm-google&#x2F;drivers&#x2F;rwProcMem33&#x2F;phy_mem.h</strong>中搜索x_probe_kernel_read 将这个函数名替换为上面获取的函数名</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/20_%E4%BF%AE%E6%94%B9phy_mem.png" alt="20_修改phy_mem"></p>
<h2 id="修改drivers的makefile"><a href="#修改drivers的makefile" class="headerlink" title="修改drivers的makefile"></a>修改drivers的makefile</h2><p>在<strong>private&#x2F;msm-google&#x2F;drivers&#x2F;Makefile</strong>的开头加入下列命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj-y += rwProcMem33/hwBreakpointProcModule/hwBreakpointProc/</span><br><span class="line">obj-y += rwProcMem33/</span><br></pre></td></tr></table></figure>

<h2 id="修改msm-google的makefile"><a href="#修改msm-google的makefile" class="headerlink" title="修改msm-google的makefile"></a>修改msm-google的makefile</h2><p>在编译rwProcMem33内核模块时,由于内核编译时会<strong>将警告视为错误</strong>导致编译内核停止,所以我们要<strong>修改Makefile来忽视warning</strong></p>
<p>在private&#x2F;msm-google&#x2F;Makefile找到如下位置,在-Wno-format-security后加上一个-w参数</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/21_%E5%BF%BD%E7%95%A5%E8%AD%A6%E5%91%8A.png" alt="21_忽略警告"></p>
<h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>编译命令的参数为使用<code>android-image-kitchen</code>解包<code>boot.img</code>之后,控制台所打印的参数</p>
<p>参数对应关系为</p>
<table>
<thead>
<tr>
<th><code>android-image-kitchen</code>解包参数名称</th>
<th>值</th>
<th>编译命令参数名称</th>
</tr>
</thead>
<tbody><tr>
<td>BOARD_KERNEL_CMDLINE</td>
<td>console&#x3D;ttyMSM0,115200n8 androidboot.console&#x3D;ttyMSM0 printk.devkmsg&#x3D;on msm_rtb.filter&#x3D;0x237 ehci-hcd.park&#x3D;3 service_locator.enable&#x3D;1 cgroup.memory&#x3D;nokmem lpm_levels.sleep_disabled&#x3D;1 usbcore.autosuspend&#x3D;7 loop.max_part&#x3D;7 androidboot.boot_devices&#x3D;soc&#x2F;1d84000.ufshc androidboot.super_partition&#x3D;system buildvariant&#x3D;user</td>
<td>KERNEL_CMDLINE</td>
</tr>
<tr>
<td>BOARD_KERNEL_BASE</td>
<td>0x00000000</td>
<td>BASE_ADDRESS</td>
</tr>
<tr>
<td>BOARD_PAGE_SIZE</td>
<td>4096</td>
<td>PAGE_SIZE</td>
</tr>
<tr>
<td>BOARD_HEADER_VERSION</td>
<td>2</td>
<td>BOOT_IMAGE_HEADER_VERSION</td>
</tr>
</tbody></table>
<p>编译命令中的BUILD_CONFIG为源码根目录的build.config链接指向的配置文件</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/22_build_config.png" alt="22_build_config"></p>
<p>所以最终的编译命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BUILD_CONFIG=private/msm-google/build.config.bluecross BUILD_BOOT_IMG=1 MKBOOTIMG_PATH=mkbootimg.py VENDOR_RAMDISK_BINARY=boot.img-ramdisk.cpio KERNEL_BINARY=Image.lz4 BOOT_IMAGE_HEADER_VERSION=2 KERNEL_CMDLINE=&quot;console=ttyMSM0,115200n8 androidboot.console=ttyMSM0 printk.devkmsg=on msm_rtb.filter=0x237 ehci-hcd.park=3 service_locator.enable=1 cgroup.memory=nokmem lpm_levels.sleep_disabled=1 usbcore.autosuspend=7 loop.max_part=7 androidboot.boot_devices=soc/1d84000.ufshc androidboot.super_partition=system buildvariant=user&quot; BASE_ADDRESS=0x00000000 PAGE_SIZE=4096 build/build.sh</span><br></pre></td></tr></table></figure>



<h2 id="修补boot刷入手机"><a href="#修补boot刷入手机" class="headerlink" title="修补boot刷入手机"></a>修补boot刷入手机</h2><p>magisk修补boot文件后刷入boot</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/24_%E5%88%B7%E5%85%A5boot.png"></p>
<h1 id="编译HwBpClient客户端"><a href="#编译HwBpClient客户端" class="headerlink" title="编译HwBpClient客户端"></a>编译HwBpClient客户端</h1><p>进入rwProcMem33\hwBreakpointProcModule\testHwBpClient文件夹,双击<strong>testHwBpClient.vcxproj</strong>在visual studio中打开</p>
<p>编译的程序位数应为64位</p>
<p>打开项目时可能会提示重定向项目升级sdk版本,直接确定就可以</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%87%8D%E5%AE%9A%E5%90%91%E9%A1%B9%E7%9B%AE.png"></p>
<p>然后打开testHwBpClientDlg.cpp 将llX换成I64X 将zu换成I64u</p>
<p>这是由于linux和windwos输出64位数不同</p>
<p>linux</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld/n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%llu/n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%llx/n&quot;</span>,a);</span><br></pre></td></tr></table></figure>

<p>windwos</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d/n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64u/n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64x/n&quot;</span>,a);</span><br></pre></td></tr></table></figure>



<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/25_%E4%BF%AE%E6%94%B9%E6%BA%90%E7%A0%81.png" alt="25_修改源码"></p>
<p>然后CTRL+B生成程序即可</p>
<p>如果不升级sdk则编译会报错,仍需要右键解决方案重定向项目</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E5%8D%87%E7%BA%A7vs%E5%B7%A5%E5%85%B7.png"></p>
<h1 id="编译HwBpServer服务端"><a href="#编译HwBpServer服务端" class="headerlink" title="编译HwBpServer服务端"></a>编译HwBpServer服务端</h1><p>编译服务端需要NDK NDK可以在AndroidStudio中下载</p>
<p>默认ndk路径C:\Users\admin\AppData\Local\Android\Sdk\ndk 这里使用的ndk版本是25.2.9519653</p>
<p>可以将ndk添加到环境变量或者手动拖动ndk-build到cmd</p>
<p>进入到rwProcMem33\hwBreakpointProcModule\testHwBpServer\jni 执行命令ndk-build</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/26_%E7%BC%96%E8%AF%91server.png" alt="26_编译server"></p>
<p>编译后的文件在rwProcMem33\hwBreakpointProcModule\testHwBpServer\libs中</p>
<h1 id="运行客户端和服务端"><a href="#运行客户端和服务端" class="headerlink" title="运行客户端和服务端"></a>运行客户端和服务端</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>选择对应手机架构的库文件push到手机中运行即可(输出文件的.out后缀可以去掉)</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/27_%E8%BF%90%E8%A1%8Cserver.png"></p>
<p>服务端打印的端口号为3170</p>
<p>手机和电脑连接同一个热点,在手机安装WifiADB或者手动查看手机ip地址并记录</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>在电脑运行客户端,填入手机ip地址和服务端打印的端口号3170</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/28_%E8%BF%9E%E6%8E%A5server.png"></p>
<p>连接成功后即可下硬件断点</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/29_%E4%B8%8B%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9.png"></p>
<p>可以通过ps -A查找进程pid cat &#x2F;proc&#x2F;pid&#x2F;maps查看so文件基址</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/30_%E6%9F%A5pid%E5%92%8Cso.png"></p>
<p>或者用frida脚本查找基址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dump_so</span>(<span class="params">so_name</span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> currentApplication = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>();</span><br><span class="line">        <span class="keyword">var</span> dir = currentApplication.<span class="title function_">getApplicationContext</span>().<span class="title function_">getFilesDir</span>().<span class="title function_">getPath</span>();</span><br><span class="line">        <span class="keyword">var</span> libso = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(so_name);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[name]:&quot;</span>, libso.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[base]:&quot;</span>, libso.<span class="property">base</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[size]:&quot;</span>, <span class="title function_">ptr</span>(libso.<span class="property">size</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[path]:&quot;</span>, libso.<span class="property">path</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">dump_so</span>: dump_so</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="repo初始化报错"><a href="#repo初始化报错" class="headerlink" title="repo初始化报错"></a>repo初始化报错</h2><p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%983_git%E9%85%8D%E7%BD%AE.png" alt="问题3_git配置"></p>
<p>询问gpt得知是没配置好git信息</p>
<p>重新配置git username和git user email即可</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%983%E8%A7%A3%E9%87%8A.png"></p>
<p>成功解决</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%983%E8%A7%A3%E5%86%B3.png" alt="问题3解决"></p>
<h2 id="repo下载报错"><a href="#repo下载报错" class="headerlink" title="repo下载报错"></a>repo下载报错</h2><p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%982_repo%E4%B8%8B%E8%BD%BD%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E6%8A%A5%E9%94%99.png" alt="问题2_repo下载内核源码报错"></p>
<p>最后发现是由于已经初始化过一次,直接repo sync同步即可</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%982%E8%A7%A3%E5%86%B3.png"></p>
<h2 id="编译内核报错"><a href="#编译内核报错" class="headerlink" title="编译内核报错"></a>编译内核报错</h2><h3 id="报错1-找不到sys-types-h"><a href="#报错1-找不到sys-types-h" class="headerlink" title="报错1 找不到sys&#x2F;types.h"></a>报错1 找不到sys&#x2F;types.h</h3><p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%985_%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E6%8A%A5%E9%94%99.png"></p>
<p>解决办法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libc6-dev</span><br></pre></td></tr></table></figure>

<p>解决后继续运行遇到第二个报错</p>
<h3 id="报错2-找不到lgcc"><a href="#报错2-找不到lgcc" class="headerlink" title="报错2 找不到lgcc"></a>报错2 找不到lgcc</h3><p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%986_%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%992.png" alt="问题6_编译报错2"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure>

<p>安装gcc后解决</p>
<p>再次编译出现第三个报错</p>
<h3 id="报错3-找不到openssl-bio-h"><a href="#报错3-找不到openssl-bio-h" class="headerlink" title="报错3 找不到openssl&#x2F;bio.h"></a>报错3 找不到openssl&#x2F;bio.h</h3><p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%987_%E6%89%BE%E4%B8%8D%E5%88%B0openssl.png" alt="问题7_找不到openssl"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br></pre></td></tr></table></figure>

<h3 id="报错4"><a href="#报错4" class="headerlink" title="报错4"></a>报错4</h3><p>搜索得知可能是系统make版本过高,但是源码makefile支持版本较低从而出错</p>
<p><img src="/2023/09/17/Android/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/rwProcMem33%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91%E8%BF%9B%E5%86%85%E6%A0%B8/%E9%97%AE%E9%A2%988_make%E6%8A%A5%E9%94%99.png"></p>
<p>默认make版本是4.1,降级安装make3.8.1没有解决问题</p>
<p>换了ubuntu20.04成功编译20.04的make是4.2.1</p>
<p>所以也可能是make版本过低?</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AndroidKernel</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>羊城杯2023-vm_wo复现</title>
    <url>/2023/09/17/%E6%AF%94%E8%B5%9B/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023-vm_wo%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>这题是VMP,比赛时被吓到了,实际这题不难</p>
<p>首先这题的架构决定了不能用ida动调(可以用模拟执行)</p>
<h1 id="获取指令流"><a href="#获取指令流" class="headerlink" title="获取指令流"></a>获取指令流</h1><p>可以复制并修改伪代码进行调试</p>
<p>需要注意myoperate函数中的几个<strong>操作码变量都是八字节</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;defs.h&quot;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> result[<span class="number">29</span>] = &#123;</span><br><span class="line">    <span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> arr[<span class="number">300</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">__int64 __fastcall <span class="title function_">interpretBytecode</span><span class="params">(__int64 opcode, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// w8</span></span><br><span class="line">    __int64 popcode; <span class="comment">// x20</span></span><br><span class="line">    <span class="type">unsigned</span> __int8* pcode; <span class="comment">// x9</span></span><br><span class="line">    <span class="type">int</span> code; <span class="comment">// w12</span></span><br><span class="line">    <span class="type">int</span> num1; <span class="comment">// w13</span></span><br><span class="line">    __int64 num11; <span class="comment">// x8</span></span><br><span class="line">    <span class="type">int</span> num2; <span class="comment">// w9</span></span><br><span class="line">    __int64 num22; <span class="comment">// x10</span></span><br><span class="line">    <span class="type">char</span> tmp; <span class="comment">// w9</span></span><br><span class="line">    <span class="type">int</span> var1; <span class="comment">// w10</span></span><br><span class="line">    __int64 v13; <span class="comment">// x8</span></span><br><span class="line">    __int64 v14; <span class="comment">// x8</span></span><br><span class="line">    <span class="type">char</span> v15; <span class="comment">// w8</span></span><br><span class="line">    __int64 v16; <span class="comment">// x8</span></span><br><span class="line"></span><br><span class="line">    j = arr[<span class="number">114</span>];                      <span class="comment">// 循环计数变量</span></span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">114</span>] &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        popcode = opcode;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pcode = (popcode + j);                    <span class="comment">// 取指令</span></span><br><span class="line">            code = *pcode;                            <span class="comment">// code num1,num2</span></span><br><span class="line">            num1 = pcode[<span class="number">1</span>];</span><br><span class="line">            num11 = pcode[<span class="number">1</span>];</span><br><span class="line">            num2 = pcode[<span class="number">2</span>];</span><br><span class="line">            num22 = num2;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, code);</span><br><span class="line">            <span class="keyword">switch</span> (code)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                tmp = arr[num11];</span><br><span class="line">                arr[num11] = arr[num22];</span><br><span class="line">                arr[num22] = tmp;                   <span class="comment">// swap(arr[x],arr[y])</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               </span><br><span class="line">                arr[num11] ^= arr[num2];          <span class="comment">// arr[x]^=arr[y]</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;arr[%ld]^=arr[%ld] =%d\n&quot;</span>, num11, num2, arr[num11]);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                arr[num11] += num2;                 <span class="comment">// arr[x]+=y</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                arr[num11] += arr[num2];          <span class="comment">// arr[x]+=arr[y]</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                arr[num11] -= num2;                 <span class="comment">// arr[x]-=y</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                arr[num11] -= arr[num2];          <span class="comment">// arr[x]-=arr[y]</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                arr[num11] *= num2;                 <span class="comment">// arr[x]*=y</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                arr[num11] *= arr[num2];          <span class="comment">// arr[x]*=arr[y]</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                arr[num11] = arr[num11] / num2;   <span class="comment">// arr[x]/=y</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                arr[num11] = arr[num11] / arr[num2];<span class="comment">// arr[x]/=arr[y]</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                arr[num11] = arr[num11] % num2;   <span class="comment">// arr[x]%=y</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                arr[num11] = arr[num11] % arr[num2];<span class="comment">// arr[x]%=arr[y]</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                var1 = arr[num11];</span><br><span class="line">                <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                var1 = arr[<span class="number">0</span>];</span><br><span class="line">            LABEL_18:</span><br><span class="line">                </span><br><span class="line">                arr[num11] = var1 &lt;&lt; num2;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; arr[%ld] = arr[0] &lt;&lt; %ld = %d\n&quot;</span>, num11,num2, arr[num11]);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">                v13 = arr[num11];</span><br><span class="line">                <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                v14 = arr[<span class="number">0x110</span>] - <span class="number">1LL</span>;</span><br><span class="line">                --arr[<span class="number">0x110</span>];</span><br><span class="line">                v13 = arr[v14 + <span class="number">16</span>];</span><br><span class="line">            LABEL_21:</span><br><span class="line">                opcode = <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v13);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">                <span class="keyword">if</span> (!arr[num11])</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_25;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">                <span class="keyword">if</span> (arr[num11])</span><br><span class="line">                    LABEL_25 :</span><br><span class="line">                    arr[<span class="number">0x114</span>] = num2;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                arr[<span class="number">0x114</span>] = num1;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                num11 = arr[num11];</span><br><span class="line">            LABEL_28:</span><br><span class="line">                v15 = arr[num11];</span><br><span class="line">                <span class="keyword">goto</span> LABEL_31;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                v16 = arr[<span class="number">0x110</span>] - <span class="number">1LL</span>;</span><br><span class="line">                --arr[<span class="number">0x110</span>];</span><br><span class="line">                arr[<span class="number">0</span>] = arr[v16 + <span class="number">16</span>];</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                v15 = num1;</span><br><span class="line">            LABEL_31:</span><br><span class="line">                arr[arr[<span class="number">0x110</span>] + <span class="number">16</span>] = v15;</span><br><span class="line">                ++arr[<span class="number">0x110</span>];</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">                <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">24</span>:</span><br><span class="line">               </span><br><span class="line">                arr[<span class="number">0</span>] = arr[<span class="number">2</span>] | arr[<span class="number">1</span>];<span class="comment">// arr[0]=arr[1]|arr[2]</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;arr[0] = arr[2] | arr[1] =%d\n&quot;</span>,arr[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">25</span>:</span><br><span class="line">                </span><br><span class="line">                arr[num11] = arr[<span class="number">0</span>] &gt;&gt; num2;      <span class="comment">// arr[x]=arr[0]&gt;&gt;y</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;arr[%ld] = arr[0] &gt;&gt; %ld = %d\n&quot;</span>, num11, num2,arr[num11]);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">26</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;arr[%ld] = %ld\n&quot;</span>,num11,num2);</span><br><span class="line">                arr[num11] = num2;                  <span class="comment">// arr[x]=y</span></span><br><span class="line">                <span class="keyword">goto</span> LABEL_35;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            LABEL_35:</span><br><span class="line">                arr[<span class="number">0x114</span>] += <span class="number">3</span>;             <span class="comment">// count+=3</span></span><br><span class="line">            LABEL_36:</span><br><span class="line">                j = arr[<span class="number">0x114</span>];</span><br><span class="line">                <span class="keyword">if</span> (arr[<span class="number">0x114</span>] &gt;= len)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[<span class="number">0x114</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> opcode;</span><br><span class="line">&#125;</span><br><span class="line">__int64 __fastcall <span class="title function_">myoperate</span><span class="params">(<span class="type">char</span>* input, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    __int64 i=<span class="number">0</span>; <span class="comment">// x20</span></span><br><span class="line">    _QWORD v1[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [xsp+8h] [xbp-98h] BYREF</span></span><br><span class="line">    _QWORD v2[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [xsp+18h] [xbp-88h] BYREF</span></span><br><span class="line">    _QWORD v3[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [xsp+28h] [xbp-78h] BYREF</span></span><br><span class="line">    _QWORD v4[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [xsp+38h] [xbp-68h] BYREF</span></span><br><span class="line"></span><br><span class="line">    LODWORD(i) = len;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">int</span>*)(arr+<span class="number">3</span>) = <span class="number">0xBEEDBEEF</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">1</span>)                                 <span class="comment">// 执行29次,input的指令</span></span><br><span class="line">    &#123;</span><br><span class="line">        i = i;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;=====operate%d=====\n&quot;</span>, <span class="number">29</span>-i);</span><br><span class="line">            v4[<span class="number">0</span>] = <span class="number">0x20D01011903001A</span>LL;<span class="comment">//注意这里数据类型的转换</span></span><br><span class="line">            *(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)((<span class="type">unsigned</span> <span class="type">char</span>*)v4 + <span class="number">7</span>) = <span class="number">0x300010201180702</span>LL;          <span class="comment">// 先赋值,然后根据input进行替换</span></span><br><span class="line">            BYTE2(v4[<span class="number">0</span>]) = *input;</span><br><span class="line">            interpretBytecode(v4, <span class="number">15</span>);</span><br><span class="line">            v3[<span class="number">0</span>] = <span class="number">0x20D02011903001A</span>LL;</span><br><span class="line">            *(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)((<span class="type">unsigned</span> <span class="type">char</span>*)v3 + <span class="number">7</span>) = <span class="number">0x400010201180602</span>LL;          <span class="comment">// 从下标7开始八字节,覆盖了第一次赋值的一字节</span></span><br><span class="line">            BYTE2(v3[<span class="number">0</span>]) = arr[<span class="number">0</span>];</span><br><span class="line">            interpretBytecode(v3, <span class="number">15</span>);</span><br><span class="line">            v2[<span class="number">0</span>] = <span class="number">0x20D03011903001A</span>LL;</span><br><span class="line">            *(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)((<span class="type">unsigned</span> <span class="type">char</span>*)v2 + <span class="number">7</span>) = <span class="number">0x500010201180502</span>LL;</span><br><span class="line">            BYTE2(v2[<span class="number">0</span>]) = arr[<span class="number">0</span>];</span><br><span class="line">            interpretBytecode(v2, <span class="number">15</span>);</span><br><span class="line">            v1[<span class="number">0</span>] = <span class="number">0x20D04011903001A</span>LL;</span><br><span class="line">            *(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)((<span class="type">unsigned</span> <span class="type">char</span>*)v1 + <span class="number">7</span>) = <span class="number">0x600010201180402</span>LL;</span><br><span class="line">            BYTE2(v1[<span class="number">0</span>]) = arr[<span class="number">0</span>];</span><br><span class="line">            interpretBytecode(v1, <span class="number">15</span>);</span><br><span class="line">            *input++ = (arr[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) | (<span class="number">8</span> * arr[<span class="number">0</span>]);<span class="comment">// 低三位变高三位,高五位变低5位</span></span><br><span class="line">            --i;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">30</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// [xsp+10h] [xbp-E0h] OVERLAPPED BYREF</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;please input your flag:&quot;</span>);<span class="comment">//helloworld0123456789helloworl</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(input) != <span class="number">29</span>)                    <span class="comment">// 29字符</span></span><br><span class="line">            LABEL_8:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        myoperate(input, <span class="number">29</span>);                         <span class="comment">// 执行虚拟机指令</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0LL</span>; i != <span class="number">29</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (input[i] != result[i])                <span class="comment">// 比较</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">                <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ok you get the flag&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过在switch前添加判断可以发现执行的指令都是固定的几个case</p>
<p>26 25 13 24 1</p>
<p>然后再在这几条case语句中添加打印函数,就可以发现程序执行流程</p>
<p><img src="/2023/09/17/%E6%AF%94%E8%B5%9B/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023/%E7%BE%8A%E5%9F%8E%E6%9D%AF2023-vm_wo%E5%A4%8D%E7%8E%B0/1_%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="1_执行流程"></p>
<h1 id="加密逻辑"><a href="#加密逻辑" class="headerlink" title="加密逻辑"></a>加密逻辑</h1><p>通过调试分析可以得出</p>
<ol>
<li><p>程序逐字节加密输入数据</p>
</li>
<li><p>每轮加密流程为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   chr=chr&gt;&gt;<span class="number">1</span>|chr&lt;&lt;<span class="number">2</span></span><br><span class="line">   chr^=key[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">   chr=chr&gt;&gt;<span class="number">2</span>|chr&lt;&lt;<span class="number">6</span></span><br><span class="line">   chr^=key[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">   chr=chr&gt;&gt;<span class="number">3</span>|chr&lt;&lt;<span class="number">5</span></span><br><span class="line">   chr^=key[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">   chr=chr&gt;&gt;<span class="number">4</span>|chr&lt;&lt;<span class="number">4</span></span><br><span class="line">   chr^=key[<span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">   enc[i]=chr&gt;&gt;<span class="number">5</span>|chr&lt;&lt;<span class="number">3</span></span><br><span class="line"><span class="comment">//这里的key是每轮循环时给arr[3]赋的四字节值</span></span><br><span class="line"><span class="comment">//arr数组前三个元素用于存储三个临时变量,相当于寄存器的作用</span></span><br><span class="line"><span class="comment">//后四字节就是key</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>所以不难逆向得到解密算法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">decode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> encdata[<span class="number">29</span>] = &#123;</span><br><span class="line">    <span class="number">0xDF</span>, <span class="number">0xD5</span>, <span class="number">0xF1</span>, <span class="number">0xD1</span>, <span class="number">0xFF</span>, <span class="number">0xDB</span>, <span class="number">0xA1</span>, <span class="number">0xA5</span>, <span class="number">0x89</span>, <span class="number">0xBD</span>, <span class="number">0xE9</span>, <span class="number">0x95</span>, <span class="number">0xB3</span>, <span class="number">0x9D</span>, <span class="number">0xE9</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x85</span>, <span class="number">0x99</span>, <span class="number">0x87</span>, <span class="number">0xBF</span>, <span class="number">0xE9</span>, <span class="number">0xB1</span>, <span class="number">0x89</span>, <span class="number">0xE9</span>, <span class="number">0x91</span>, <span class="number">0x89</span>, <span class="number">0x89</span>, <span class="number">0x8F</span>, <span class="number">0xAD</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key = <span class="number">0xBEEDBEEF</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* pkey = &amp;key;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++) &#123;</span><br><span class="line">        tmp = enc[i];</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">5</span>) | (tmp &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        tmp ^= pkey[<span class="number">3</span>];</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">4</span>) | (tmp &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        tmp ^= pkey[<span class="number">2</span>];</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">3</span>) | (tmp &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        tmp ^= pkey[<span class="number">1</span>];</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">2</span>) | (tmp &gt;&gt; <span class="number">6</span>);</span><br><span class="line">        tmp ^= pkey[<span class="number">0</span>];</span><br><span class="line">        tmp = (tmp &lt;&lt; <span class="number">1</span>) | (tmp &gt;&gt; <span class="number">7</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, tmp);<span class="comment">//DASCTF&#123;you_are_right_so_cool&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>羊城杯2023</category>
      </categories>
      <tags>
        <tag>比赛</tag>
        <tag>VMP</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-09-17日报</title>
    <url>/2023/09/17/%E6%97%A5%E6%8A%A5/2023-09/2023-09-17%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="1-9-13日成功将rwProcMem33模块编译进内核"><a href="#1-9-13日成功将rwProcMem33模块编译进内核" class="headerlink" title="1. 9-13日成功将rwProcMem33模块编译进内核"></a>1. 9-13日成功将rwProcMem33模块编译进内核</h2><pre><code>也编译好了服务端和客户端,可以下硬件断点
很可能是Ubuntu18.04太老,换20.04才成功
</code></pre>
<h2 id="2-9-14-9-16围绕着蓝帽杯半决赛跑"><a href="#2-9-14-9-16围绕着蓝帽杯半决赛跑" class="headerlink" title="2. 9-14~9-16围绕着蓝帽杯半决赛跑"></a>2. 9-14~9-16围绕着蓝帽杯半决赛跑</h2><p>   题目感觉不难,逆向想复杂了,结果就是个矩阵乘法<br>   取证得细心,答案格式太搞了<br>   下次线下要提前规划好,这次去上海没玩到什么有点可惜</p>
<h2 id="3-复现了羊城杯2023-vm-wo"><a href="#3-复现了羊城杯2023-vm-wo" class="headerlink" title="3. 复现了羊城杯2023-vm_wo"></a>3. 复现了羊城杯2023-vm_wo</h2><p>   做了网鼎杯signal之后,这道题也可以下手了<br>   首先是分析程序基本逻辑,写出case对应指令<br>   然后通过opcode获取指令执行流<br>   再分析实现的功能<br>   这题并不难,是比赛时被vmp吓到了,很多case分支是混淆的,实际就是个逐字节异或,移位的加密操作</p>
]]></content>
      <categories>
        <category>2023年9月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>WMCTF2023_ezAndorid</title>
    <url>/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/</url>
    <content><![CDATA[<h1 id="Java层逻辑"><a href="#Java层逻辑" class="headerlink" title="Java层逻辑"></a>Java层逻辑</h1><p>Java层并不复杂 判断用户名和密码 这两个函数都是native函数</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/%E4%B8%BB%E5%87%BD%E6%95%B0.png" alt="主函数"></p>
<h1 id="JNI-OnLoad"><a href="#JNI-OnLoad" class="headerlink" title="JNI_OnLoad"></a>JNI_OnLoad</h1><p>找不到对应的JNI函数,可以在JNI_OnLoad中看到恢复字符串并注册函数</p>
<p>这里也给出了函数地址,直接跟进即可</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/JNI_Onload.png" alt="JNI_Onload"></p>
<h1 id="CheckUsername"><a href="#CheckUsername" class="headerlink" title="CheckUsername"></a>CheckUsername</h1><p>刚开始有个获取字符串的操作</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/getUsername.png" alt="getUsername"></p>
<p>先有一个解密得到key的操作,该key用于下面的rc4加密</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/RC4Key.png" alt="RC4Key"></p>
<p>RC4加密后进行比较 encData可以动调得到</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/%E5%8A%A8%E8%B0%83%E6%8B%BFencData.png" alt="动调拿encName"></p>
<p>跟进RC4可以发现最后多异或了一个循环变量k 其他地方和标准RC4相同</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/RC4%E9%AD%94%E6%94%B9%E7%82%B9.png" alt="RC4魔改点"></p>
<p>解密脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key, data</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化S盒</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">        key_length = <span class="built_in">len</span>(key)</span><br><span class="line">        S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成密钥流</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S, length</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        key_stream = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">            S[i], S[j] = S[j], S[i]</span><br><span class="line">            key_stream.append(S[(S[i] + S[j]) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> key_stream</span><br><span class="line"></span><br><span class="line">    S = KSA(key)  <span class="comment"># 初始化S盒</span></span><br><span class="line">    key_stream = PRGA(S, <span class="built_in">len</span>(data))  <span class="comment"># 生成密钥流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># #打印密钥流内容</span></span><br><span class="line">    <span class="comment"># for i in range(len( key_stream)):</span></span><br><span class="line">    <span class="comment">#     print(hex(key_stream[i]),end=&#x27; &#x27;)</span></span><br><span class="line">    <span class="comment">#     if (i+1)%10==0 :</span></span><br><span class="line">    <span class="comment">#         print()</span></span><br><span class="line">    </span><br><span class="line">    result = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="comment">#print(chr(data[i]^i ^ key_stream[i]),end=&#x27;&#x27;)</span></span><br><span class="line">        result.append(data[i]^i ^ key_stream[i])  <span class="comment"># 异或运算得到加密/解密结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line">data=[<span class="number">0xE9</span>, <span class="number">0x97</span>, <span class="number">0x64</span>, <span class="number">0xE6</span>, <span class="number">0x7E</span>, <span class="number">0xEB</span>, <span class="number">0xBD</span>, <span class="number">0xC1</span>, <span class="number">0xAB</span>, <span class="number">0x43</span>]</span><br><span class="line">key=<span class="string">b&#x27;12345678&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(RC4(key,data))<span class="comment">#Re_1s_eaSy</span></span><br></pre></td></tr></table></figure>

<p>所以<strong>UserName&#x3D;Re_1s_eaSy</strong></p>
<h1 id="check2"><a href="#check2" class="headerlink" title="check2"></a>check2</h1><p>还原字符串并获取输入passwd 比较关键的是获取了key用于AES加密</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/AESKey.png" alt="AESKey"></p>
<p>AES加密入口和比较函数 可以看出passwd长度为16</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/AESEnc.png" alt="AESEnc"></p>
<p>passwdData可以动调得到或者按x交叉引用找到赋值函数 xmmword_7948CCFE1A中保存了对应数据</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/GetpasswdData.png" alt="GetpasswdData"></p>
<p>跟进AES加密函数</p>
<p>这里函数修改了SBOX </p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/%E4%BF%AE%E6%94%B9sbox.png" alt="修改sbox"></p>
<p>往下翻大概梳理清AES加密过程</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/AES%E8%BD%AE%E5%8A%A0%E5%AF%86.png" alt="AES轮加密"></p>
<p>由于字节代换操作中会使用到sbox,所以可以在字节代换函数处断点找到魔改后的sbox 跟进Sub_Bytes找到这个函数</p>
<p><img src="E:\HappyBinary\Competitions\WMCTF2023\ezAndroid\subBytesFunc.png" alt="subBytesFunc"></p>
<p>再跟进可以发现调用了SBOX</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/getSbox.png" alt="getSbox"></p>
<p>动调得到修改后的sbox</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/sbox%E5%92%8C%E8%BD%AE%E5%AF%86%E9%92%A5%E5%B8%B8%E9%87%8F.png" alt="sbox和轮密钥常量"></p>
<p>解题脚本</p>
<p>首先要求出逆sbox</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">uint8_t</span> S_BOX[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0x40</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0xCA</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0xF5</span>, <span class="number">0x0C</span>, <span class="number">0x23</span>, <span class="number">0x3A</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x7F</span>, <span class="number">0x96</span>, <span class="number">0xAD</span>, <span class="number">0xC4</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x37</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x93</span>, <span class="number">0xAA</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xD8</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x90</span>,</span><br><span class="line">        <span class="number">0xA7</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xEC</span>, <span class="number">0x03</span>, <span class="number">0x1A</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x5F</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xBB</span>, <span class="number">0xD2</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x2E</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0xA1</span>, <span class="number">0xB8</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0xFD</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0x9E</span>, <span class="number">0xB5</span>, <span class="number">0xCC</span>, <span class="number">0xE3</span>, <span class="number">0xFA</span>, <span class="number">0x11</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x84</span>, <span class="number">0x9B</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x25</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x6A</span>, <span class="number">0x81</span>, <span class="number">0x98</span>, <span class="number">0xAF</span>, <span class="number">0xC6</span>, <span class="number">0xDD</span>, <span class="number">0xF4</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x22</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x36</span>, <span class="number">0x4D</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xA9</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x33</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x75</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0xD1</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x16</span>, <span class="number">0x2D</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xB7</span>, <span class="number">0xCE</span>, <span class="number">0xE5</span>, <span class="number">0xFC</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xCB</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x83</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x97</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x4C</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x60</span>, <span class="number">0x77</span>, <span class="number">0x8E</span>, <span class="number">0xA5</span>, <span class="number">0xBC</span>,</span><br><span class="line">        <span class="number">0xD3</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0xB9</span>, <span class="number">0xD0</span>, <span class="number">0xE7</span>, <span class="number">0xFE</span>, <span class="number">0x15</span>, <span class="number">0x2C</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x88</span>,</span><br><span class="line">        <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xCD</span>, <span class="number">0xE4</span>, <span class="number">0xFB</span>, <span class="number">0x12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> Te_InvS[<span class="number">16</span>][<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;        <span class="comment">//逆S盒缓存</span></span><br><span class="line">    <span class="type">uint8_t</span> Te_InVSAdd[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;            <span class="comment">//位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;                    <span class="comment">//计算逆S盒</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> n = <span class="number">0</span>; n &lt; <span class="number">16</span>; n++) &#123;</span><br><span class="line">            Te_InVSAdd[<span class="number">0</span>] = (S_BOX[i*<span class="number">16</span>+n] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>;        <span class="comment">//取行</span></span><br><span class="line">            Te_InVSAdd[<span class="number">1</span>] = (S_BOX[i*<span class="number">16</span>+n] &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0x0f</span>;        <span class="comment">//取列</span></span><br><span class="line">            Te_InvS[Te_InVSAdd[<span class="number">0</span>]][Te_InVSAdd[<span class="number">1</span>]] = i * <span class="number">16</span> + n;        <span class="comment">//置值</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">16</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%#x,&quot;</span>, Te_InvS[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到逆sbox</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ReSbox[<span class="number">256</span>] = &#123; <span class="number">0x41</span>,<span class="number">0xe8</span>,<span class="number">0x8f</span>,<span class="number">0x36</span>,<span class="number">0xdd</span>,<span class="number">0x84</span>,<span class="number">0x2b</span>,<span class="number">0xd2</span>,<span class="number">0x79</span>,<span class="number">0x20</span>,<span class="number">0xc7</span>,<span class="number">0x6e</span>,<span class="number">0x15</span>,<span class="number">0xbc</span>,<span class="number">0x63</span>,<span class="number">0xa</span>,<span class="number">0xb1</span>,<span class="number">0x58</span>,<span class="number">0xff</span>,<span class="number">0xa6</span>,<span class="number">0x4d</span>,<span class="number">0xf4</span>,<span class="number">0x9b</span>,<span class="number">0x42</span>,<span class="number">0xe9</span>,<span class="number">0x90</span>,<span class="number">0x37</span>,<span class="number">0xde</span>,<span class="number">0x85</span>,<span class="number">0x2c</span>,<span class="number">0xd3</span>,<span class="number">0x7a</span>,<span class="number">0x21</span>,<span class="number">0xc8</span>,<span class="number">0x6f</span>,<span class="number">0x16</span>,<span class="number">0xbd</span>,<span class="number">0x64</span>,<span class="number">0xb</span>,<span class="number">0xb2</span>,<span class="number">0x59</span>,<span class="number">0</span>,<span class="number">0xa7</span>,<span class="number">0x4e</span>,<span class="number">0xf5</span>,<span class="number">0x9c</span>,<span class="number">0x43</span>,<span class="number">0xea</span>,<span class="number">0x91</span>,<span class="number">0x38</span>,<span class="number">0xdf</span>,<span class="number">0x86</span>,<span class="number">0x2d</span>,<span class="number">0xd4</span>,<span class="number">0x7b</span>,<span class="number">0x22</span>,<span class="number">0xc9</span>,<span class="number">0x70</span>,<span class="number">0x17</span>,<span class="number">0xbe</span>,<span class="number">0x65</span>,<span class="number">0xc</span>,<span class="number">0xb3</span>,<span class="number">0x5a</span>,<span class="number">0x1</span>,<span class="number">0xa8</span>,<span class="number">0x4f</span>,<span class="number">0xf6</span>,<span class="number">0x9d</span>,<span class="number">0x44</span>,<span class="number">0xeb</span>,<span class="number">0x92</span>,<span class="number">0x39</span>,<span class="number">0xe0</span>,<span class="number">0x87</span>,<span class="number">0x2e</span>,<span class="number">0xd5</span>,<span class="number">0x7c</span>,<span class="number">0x23</span>,<span class="number">0xca</span>,<span class="number">0x71</span>,<span class="number">0x18</span>,<span class="number">0xbf</span>,<span class="number">0x66</span>,<span class="number">0xd</span>,<span class="number">0xb4</span>,<span class="number">0x5b</span>,<span class="number">0x2</span>,<span class="number">0xa9</span>,<span class="number">0x50</span>,<span class="number">0xf7</span>,<span class="number">0x9e</span>,<span class="number">0x45</span>,<span class="number">0xec</span>,<span class="number">0x93</span>,<span class="number">0x3a</span>,<span class="number">0xe1</span>,<span class="number">0x88</span>,<span class="number">0x2f</span>,<span class="number">0xd6</span>,<span class="number">0x7d</span>,<span class="number">0x24</span>,<span class="number">0xcb</span>,<span class="number">0x72</span>,<span class="number">0x19</span>,<span class="number">0xc0</span>,<span class="number">0x67</span>,<span class="number">0xe</span>,<span class="number">0xb5</span>,<span class="number">0x5c</span>,<span class="number">0x3</span>,<span class="number">0xaa</span>,<span class="number">0x51</span>,<span class="number">0xf8</span>,<span class="number">0x9f</span>,<span class="number">0x46</span>,<span class="number">0xed</span>,<span class="number">0x94</span>,<span class="number">0x3b</span>,<span class="number">0xe2</span>,<span class="number">0x89</span>,<span class="number">0x30</span>,<span class="number">0xd7</span>,<span class="number">0x7e</span>,<span class="number">0x25</span>,<span class="number">0xcc</span>,<span class="number">0x73</span>,<span class="number">0x1a</span>,<span class="number">0xc1</span>,<span class="number">0x68</span>,<span class="number">0xf</span>,<span class="number">0xb6</span>,<span class="number">0x5d</span>,<span class="number">0x4</span>,<span class="number">0xab</span>,<span class="number">0x52</span>,<span class="number">0xf9</span>,<span class="number">0xa0</span>,<span class="number">0x47</span>,<span class="number">0xee</span>,<span class="number">0x95</span>,<span class="number">0x3c</span>,<span class="number">0xe3</span>,<span class="number">0x8a</span>,<span class="number">0x31</span>,<span class="number">0xd8</span>,<span class="number">0x7f</span>,<span class="number">0x26</span>,<span class="number">0xcd</span>,<span class="number">0x74</span>,<span class="number">0x1b</span>,<span class="number">0xc2</span>,<span class="number">0x69</span>,<span class="number">0x10</span>,<span class="number">0xb7</span>,<span class="number">0x5e</span>,<span class="number">0x5</span>,<span class="number">0xac</span>,<span class="number">0x53</span>,<span class="number">0xfa</span>,<span class="number">0xa1</span>,<span class="number">0x48</span>,<span class="number">0xef</span>,<span class="number">0x96</span>,<span class="number">0x3d</span>,<span class="number">0xe4</span>,<span class="number">0x8b</span>,<span class="number">0x32</span>,<span class="number">0xd9</span>,<span class="number">0x80</span>,<span class="number">0x27</span>,<span class="number">0xce</span>,<span class="number">0x75</span>,<span class="number">0x1c</span>,<span class="number">0xc3</span>,<span class="number">0x6a</span>,<span class="number">0x11</span>,<span class="number">0xb8</span>,<span class="number">0x5f</span>,<span class="number">0x6</span>,<span class="number">0xad</span>,<span class="number">0x54</span>,<span class="number">0xfb</span>,<span class="number">0xa2</span>,<span class="number">0x49</span>,<span class="number">0xf0</span>,<span class="number">0x97</span>,<span class="number">0x3e</span>,<span class="number">0xe5</span>,<span class="number">0x8c</span>,<span class="number">0x33</span>,<span class="number">0xda</span>,<span class="number">0x81</span>,<span class="number">0x28</span>,<span class="number">0xcf</span>,<span class="number">0x76</span>,<span class="number">0x1d</span>,<span class="number">0xc4</span>,<span class="number">0x6b</span>,<span class="number">0x12</span>,<span class="number">0xb9</span>,<span class="number">0x60</span>,<span class="number">0x7</span>,<span class="number">0xae</span>,<span class="number">0x55</span>,<span class="number">0xfc</span>,<span class="number">0xa3</span>,<span class="number">0x4a</span>,<span class="number">0xf1</span>,<span class="number">0x98</span>,<span class="number">0x3f</span>,<span class="number">0xe6</span>,<span class="number">0x8d</span>,<span class="number">0x34</span>,<span class="number">0xdb</span>,<span class="number">0x82</span>,<span class="number">0x29</span>,<span class="number">0xd0</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0xc5</span>,<span class="number">0x6c</span>,<span class="number">0x13</span>,<span class="number">0xba</span>,<span class="number">0x61</span>,<span class="number">0x8</span>,<span class="number">0xaf</span>,<span class="number">0x56</span>,<span class="number">0xfd</span>,<span class="number">0xa4</span>,<span class="number">0x4b</span>,<span class="number">0xf2</span>,<span class="number">0x99</span>,<span class="number">0x40</span>,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x35</span>,<span class="number">0xdc</span>,<span class="number">0x83</span>,<span class="number">0x2a</span>,<span class="number">0xd1</span>,<span class="number">0x78</span>,<span class="number">0x1f</span>,<span class="number">0xc6</span>,<span class="number">0x6d</span>,<span class="number">0x14</span>,<span class="number">0xbb</span>,<span class="number">0x62</span>,<span class="number">0x9</span>,<span class="number">0xb0</span>,<span class="number">0x57</span>,<span class="number">0xfe</span>,<span class="number">0xa5</span>,<span class="number">0x4c</span>,<span class="number">0xf3</span>,<span class="number">0x9a</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据逆sbox进行解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];    <span class="comment">// encKey, decKey</span></span><br><span class="line">    <span class="type">int</span> Nr; <span class="comment">// 10 rounds</span></span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCKSIZE 16  <span class="comment">//AES-128分组长度为16字节</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint8_t y[4] -&gt; uint32_t x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (x) = ((uint32_t)((y)[0] &amp; 0xff)&lt;&lt;24) | ((uint32_t)((y)[1] &amp; 0xff)&lt;&lt;16) | \</span></span><br><span class="line"><span class="meta">             ((uint32_t)((y)[2] &amp; 0xff)&lt;&lt;8)  | ((uint32_t)((y)[3] &amp; 0xff));&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x -&gt; uint8_t y[4]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从uint32_t x中提取从低位开始的第n个字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used for keyExpansion */</span></span><br><span class="line"><span class="comment">// 字节替换然后循环左移1位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((S[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((S[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((S[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (S[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x循环左移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"><span class="comment">// uint32_t x循环右移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for 128-bit blocks, Rijndael never uses more than 10 rcon values */</span></span><br><span class="line"><span class="comment">// AES-128轮常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> rcon[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x01000000</span>UL, <span class="number">0x02000000</span>UL, <span class="number">0x04000000</span>UL, <span class="number">0x08000000</span>UL, <span class="number">0x10000000</span>UL,</span><br><span class="line">        <span class="number">0x20000000</span>UL, <span class="number">0x40000000</span>UL, <span class="number">0x80000000</span>UL, <span class="number">0x1B000000</span>UL, <span class="number">0x36000000</span>UL</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x29</span>, <span class="number">0x40</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0xCA</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0xF5</span>, <span class="number">0x0C</span>, <span class="number">0x23</span>, <span class="number">0x3A</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x7F</span>, <span class="number">0x96</span>, <span class="number">0xAD</span>, <span class="number">0xC4</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x37</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x93</span>, <span class="number">0xAA</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xD8</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x90</span>,</span><br><span class="line">        <span class="number">0xA7</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xEC</span>, <span class="number">0x03</span>, <span class="number">0x1A</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x5F</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xBB</span>, <span class="number">0xD2</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x2E</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0xA1</span>, <span class="number">0xB8</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0xFD</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0x9E</span>, <span class="number">0xB5</span>, <span class="number">0xCC</span>, <span class="number">0xE3</span>, <span class="number">0xFA</span>, <span class="number">0x11</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x84</span>, <span class="number">0x9B</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x25</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x6A</span>, <span class="number">0x81</span>, <span class="number">0x98</span>, <span class="number">0xAF</span>, <span class="number">0xC6</span>, <span class="number">0xDD</span>, <span class="number">0xF4</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x22</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x36</span>, <span class="number">0x4D</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xA9</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x33</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x75</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0xD1</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x16</span>, <span class="number">0x2D</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xB7</span>, <span class="number">0xCE</span>, <span class="number">0xE5</span>, <span class="number">0xFC</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xCB</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x83</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x97</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x4C</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x60</span>, <span class="number">0x77</span>, <span class="number">0x8E</span>, <span class="number">0xA5</span>, <span class="number">0xBC</span>,</span><br><span class="line">        <span class="number">0xD3</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0xB9</span>, <span class="number">0xD0</span>, <span class="number">0xE7</span>, <span class="number">0xFE</span>, <span class="number">0x15</span>, <span class="number">0x2C</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x88</span>,</span><br><span class="line">        <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xCD</span>, <span class="number">0xE4</span>, <span class="number">0xFB</span>, <span class="number">0x12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[<span class="number">256</span>] = </span><br><span class="line">&#123; </span><br><span class="line">    <span class="number">0x41</span>,<span class="number">0xe8</span>,<span class="number">0x8f</span>,<span class="number">0x36</span>,<span class="number">0xdd</span>,<span class="number">0x84</span>,<span class="number">0x2b</span>,<span class="number">0xd2</span>,<span class="number">0x79</span>,<span class="number">0x20</span>,<span class="number">0xc7</span>,<span class="number">0x6e</span>,<span class="number">0x15</span>,<span class="number">0xbc</span>,<span class="number">0x63</span>,<span class="number">0xa</span>,</span><br><span class="line">    <span class="number">0xb1</span>,<span class="number">0x58</span>,<span class="number">0xff</span>,<span class="number">0xa6</span>,<span class="number">0x4d</span>,<span class="number">0xf4</span>,<span class="number">0x9b</span>,<span class="number">0x42</span>,<span class="number">0xe9</span>,<span class="number">0x90</span>,<span class="number">0x37</span>,<span class="number">0xde</span>,<span class="number">0x85</span>,<span class="number">0x2c</span>,<span class="number">0xd3</span>,<span class="number">0x7a</span>,</span><br><span class="line">    <span class="number">0x21</span>,<span class="number">0xc8</span>,<span class="number">0x6f</span>,<span class="number">0x16</span>,<span class="number">0xbd</span>,<span class="number">0x64</span>,<span class="number">0xb</span>,<span class="number">0xb2</span>,<span class="number">0x59</span>,<span class="number">0</span>,<span class="number">0xa7</span>,<span class="number">0x4e</span>,<span class="number">0xf5</span>,<span class="number">0x9c</span>,<span class="number">0x43</span>,<span class="number">0xea</span>,<span class="number">0x91</span>,</span><br><span class="line">    <span class="number">0x38</span>,<span class="number">0xdf</span>,<span class="number">0x86</span>,<span class="number">0x2d</span>,<span class="number">0xd4</span>,<span class="number">0x7b</span>,<span class="number">0x22</span>,<span class="number">0xc9</span>,<span class="number">0x70</span>,<span class="number">0x17</span>,<span class="number">0xbe</span>,<span class="number">0x65</span>,<span class="number">0xc</span>,<span class="number">0xb3</span>,<span class="number">0x5a</span>,<span class="number">0x1</span>,<span class="number">0xa8</span></span><br><span class="line">    ,<span class="number">0x4f</span>,<span class="number">0xf6</span>,<span class="number">0x9d</span>,<span class="number">0x44</span>,<span class="number">0xeb</span>,<span class="number">0x92</span>,<span class="number">0x39</span>,<span class="number">0xe0</span>,<span class="number">0x87</span>,<span class="number">0x2e</span>,<span class="number">0xd5</span>,<span class="number">0x7c</span>,<span class="number">0x23</span>,<span class="number">0xca</span>,<span class="number">0x71</span>,<span class="number">0x18</span>,</span><br><span class="line">    <span class="number">0xbf</span>,<span class="number">0x66</span>,<span class="number">0xd</span>,<span class="number">0xb4</span>,<span class="number">0x5b</span>,<span class="number">0x2</span>,<span class="number">0xa9</span>,<span class="number">0x50</span>,<span class="number">0xf7</span>,<span class="number">0x9e</span>,<span class="number">0x45</span>,<span class="number">0xec</span>,<span class="number">0x93</span>,<span class="number">0x3a</span>,<span class="number">0xe1</span>,<span class="number">0x88</span>,<span class="number">0x2f</span></span><br><span class="line">    ,<span class="number">0xd6</span>,<span class="number">0x7d</span>,<span class="number">0x24</span>,<span class="number">0xcb</span>,<span class="number">0x72</span>,<span class="number">0x19</span>,<span class="number">0xc0</span>,<span class="number">0x67</span>,<span class="number">0xe</span>,<span class="number">0xb5</span>,<span class="number">0x5c</span>,<span class="number">0x3</span>,<span class="number">0xaa</span>,<span class="number">0x51</span>,<span class="number">0xf8</span>,<span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x46</span>,<span class="number">0xed</span>,<span class="number">0x94</span>,<span class="number">0x3b</span>,<span class="number">0xe2</span>,<span class="number">0x89</span>,<span class="number">0x30</span>,<span class="number">0xd7</span>,<span class="number">0x7e</span>,<span class="number">0x25</span>,<span class="number">0xcc</span>,<span class="number">0x73</span>,<span class="number">0x1a</span>,<span class="number">0xc1</span>,<span class="number">0x68</span>,<span class="number">0xf</span>,</span><br><span class="line">    <span class="number">0xb6</span>,<span class="number">0x5d</span>,<span class="number">0x4</span>,<span class="number">0xab</span>,<span class="number">0x52</span>,<span class="number">0xf9</span>,<span class="number">0xa0</span>,<span class="number">0x47</span>,<span class="number">0xee</span>,<span class="number">0x95</span>,<span class="number">0x3c</span>,<span class="number">0xe3</span>,<span class="number">0x8a</span>,<span class="number">0x31</span>,<span class="number">0xd8</span>,<span class="number">0x7f</span>,</span><br><span class="line">    <span class="number">0x26</span>,<span class="number">0xcd</span>,<span class="number">0x74</span>,<span class="number">0x1b</span>,<span class="number">0xc2</span>,<span class="number">0x69</span>,<span class="number">0x10</span>,<span class="number">0xb7</span>,<span class="number">0x5e</span>,<span class="number">0x5</span>,<span class="number">0xac</span>,<span class="number">0x53</span>,<span class="number">0xfa</span>,<span class="number">0xa1</span>,<span class="number">0x48</span>,<span class="number">0xef</span>,</span><br><span class="line">    <span class="number">0x96</span>,<span class="number">0x3d</span>,<span class="number">0xe4</span>,<span class="number">0x8b</span>,<span class="number">0x32</span>,<span class="number">0xd9</span>,<span class="number">0x80</span>,<span class="number">0x27</span>,<span class="number">0xce</span>,<span class="number">0x75</span>,<span class="number">0x1c</span>,<span class="number">0xc3</span>,<span class="number">0x6a</span>,<span class="number">0x11</span>,<span class="number">0xb8</span>,<span class="number">0x5f</span>,</span><br><span class="line">    <span class="number">0x6</span>,<span class="number">0xad</span>,<span class="number">0x54</span>,<span class="number">0xfb</span>,<span class="number">0xa2</span>,<span class="number">0x49</span>,<span class="number">0xf0</span>,<span class="number">0x97</span>,<span class="number">0x3e</span>,<span class="number">0xe5</span>,<span class="number">0x8c</span>,<span class="number">0x33</span>,<span class="number">0xda</span>,<span class="number">0x81</span>,<span class="number">0x28</span>,<span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0x76</span>,<span class="number">0x1d</span>,<span class="number">0xc4</span>,<span class="number">0x6b</span>,<span class="number">0x12</span>,<span class="number">0xb9</span>,<span class="number">0x60</span>,<span class="number">0x7</span>,<span class="number">0xae</span>,<span class="number">0x55</span>,<span class="number">0xfc</span>,<span class="number">0xa3</span>,<span class="number">0x4a</span>,<span class="number">0xf1</span>,<span class="number">0x98</span>,<span class="number">0x3f</span>,</span><br><span class="line">    <span class="number">0xe6</span>,<span class="number">0x8d</span>,<span class="number">0x34</span>,<span class="number">0xdb</span>,<span class="number">0x82</span>,<span class="number">0x29</span>,<span class="number">0xd0</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0xc5</span>,<span class="number">0x6c</span>,<span class="number">0x13</span>,<span class="number">0xba</span>,<span class="number">0x61</span>,<span class="number">0x8</span>,<span class="number">0xaf</span>,</span><br><span class="line">    <span class="number">0x56</span>,<span class="number">0xfd</span>,<span class="number">0xa4</span>,<span class="number">0x4b</span>,<span class="number">0xf2</span>,<span class="number">0x99</span>,<span class="number">0x40</span>,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x35</span>,<span class="number">0xdc</span>,<span class="number">0x83</span>,<span class="number">0x2a</span>,<span class="number">0xd1</span>,<span class="number">0x78</span>,<span class="number">0x1f</span>,</span><br><span class="line">    <span class="number">0xc6</span>,<span class="number">0x6d</span>,<span class="number">0x14</span>,<span class="number">0xbb</span>,<span class="number">0x62</span>,<span class="number">0x9</span>,<span class="number">0xb0</span>,<span class="number">0x57</span>,<span class="number">0xfe</span>,<span class="number">0xa5</span>,<span class="number">0x4c</span>,<span class="number">0xf3</span>,<span class="number">0x9a</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy in[16] to state[4][4] */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[j][i] = *in++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to out[16] */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            *out++ = state[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥扩展</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, AesKey* aesKey)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == aesKey) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion param is NULL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen != <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion keyLen = %d, Not support.\n&quot;</span>, keyLen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span>* w = aesKey-&gt;eK;  <span class="comment">//加密秘钥</span></span><br><span class="line">    <span class="type">uint32_t</span>* v = aesKey-&gt;dK;  <span class="comment">//解密秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* keyLen is 16 Bytes, generate uint32_t W[44]. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[0-3] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        LOAD32H(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[4-43] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ MIX(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">        w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">        w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">        w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">        w += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w = aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//解密秘钥矩阵为加密秘钥矩阵的倒序，方便使用，把ek的11个矩阵倒序排列分配给dk作为解密秘钥</span></span><br><span class="line">    <span class="comment">//即dk[0-3]=ek[41-44], dk[4-7]=ek[37-40]... dk[41-44]=ek[0-3]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            v[i] = w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        w -= <span class="number">4</span>;</span><br><span class="line">        v += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮秘钥加</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            k[i][j] = (<span class="type">uint8_t</span>)BYTE(key[j], <span class="number">3</span> - i);  <span class="comment">/* 把 uint32 key[4] 先转换为矩阵 uint8 k[4][4] */</span></span><br><span class="line">            state[i][j] ^= k[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字节替换</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">subBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = S[state[i][j]]; <span class="comment">//直接使用原始字节作为S盒数据下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆字节替换</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">invSubBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = inv_S[state[i][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//行移位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">//便于行循环移位，先把一行4字节拼成uint_32结构，移位后再转成独立的4个字节uint8_t</span></span><br><span class="line">        LOAD32H(block[i], state[i]);</span><br><span class="line">        block[i] = ROF32(block[i], <span class="number">8</span> * i);</span><br><span class="line">        STORE32H(block[i], state[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逆行移位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">invShiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        LOAD32H(block[i], state[i]);</span><br><span class="line">        block[i] = ROR32(block[i], <span class="number">8</span> * i);</span><br><span class="line">        STORE32H(block[i], state[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Galois Field (256) Multiplication of two Bytes */</span></span><br><span class="line"><span class="comment">// 两字节的伽罗华域乘法运算</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;    <span class="comment">//</span></span><br><span class="line">            p ^= v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">        v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            v ^= <span class="number">0x1B</span>; <span class="comment">/* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            tmp[i][j] = state[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;  <span class="comment">//伽罗华域加法和乘法</span></span><br><span class="line">            state[i][j] = GMul(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ GMul(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">                ^ GMul(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ GMul(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆列混合</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">invMixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>&#125; &#125;;  <span class="comment">//使用列混合矩阵的逆矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            tmp[i][j] = state[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = GMul(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ GMul(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">                ^ GMul(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ GMul(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES-128加密接口，输入key应为16字节长度，输入长度应该是16字节整倍数，</span></span><br><span class="line"><span class="comment">// 这样输出长度与输入长度相同，函数调用外部为输出数据分配内存</span></span><br><span class="line"><span class="comment">//pt是原始数据 ct是加密后的数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aesEncrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* pt, <span class="type">uint8_t</span>* ct, <span class="type">uint32_t</span> len)</span> &#123;</span><br><span class="line"></span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span>* pos = ct;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.eK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == pt || <span class="literal">NULL</span> == ct) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    keyExpansion(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">// 秘钥扩展</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用ECB模式循环加密多个分组长度的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="comment">// 把16字节的明文转换为4x4状态矩阵来进行处理</span></span><br><span class="line">        loadStateArray(state, pt);</span><br><span class="line">        <span class="comment">// 轮秘钥加</span></span><br><span class="line">        addRoundKey(state, rk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            subBytes(state);   <span class="comment">// 字节替换</span></span><br><span class="line">            shiftRows(state);  <span class="comment">// 行移位</span></span><br><span class="line">            mixColumns(state); <span class="comment">// 列混合</span></span><br><span class="line">            addRoundKey(state, rk); <span class="comment">// 轮秘钥加</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        subBytes(state);    <span class="comment">// 字节替换</span></span><br><span class="line">        shiftRows(state);  <span class="comment">// 行移位</span></span><br><span class="line">        <span class="comment">// 此处不进行列混合</span></span><br><span class="line">        addRoundKey(state, rk + <span class="number">4</span>); <span class="comment">// 轮秘钥加</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把4x4状态矩阵转换为uint8_t一维数组输出保存</span></span><br><span class="line">        storeStateArray(state, pos);</span><br><span class="line"></span><br><span class="line">        pos += BLOCKSIZE;  <span class="comment">// 加密数据内存指针移动到下一个分组</span></span><br><span class="line">        pt += BLOCKSIZE;   <span class="comment">// 明文数据指针移动到下一个分组</span></span><br><span class="line">        rk = aesKey.eK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES128解密， 参数要求同加密 ct是加密数据 pt是解密后的数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* ct, <span class="type">uint8_t</span>* pt, <span class="type">uint32_t</span> len)</span> &#123;</span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span>* pos = pt;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.dK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == ct || <span class="literal">NULL</span> == pt) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    keyExpansion(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">//秘钥扩展，同加密</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="comment">// 把16字节的密文转换为4x4状态矩阵来进行处理</span></span><br><span class="line">        loadStateArray(state, ct);</span><br><span class="line">        <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line">        addRoundKey(state, rk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            invShiftRows(state);    <span class="comment">// 逆行移位</span></span><br><span class="line">            invSubBytes(state);     <span class="comment">// 逆字节替换，这两步顺序可以颠倒</span></span><br><span class="line">            addRoundKey(state, rk); <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line">            invMixColumns(state);   <span class="comment">// 逆列混合</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        invSubBytes(state);   <span class="comment">// 逆字节替换</span></span><br><span class="line">        invShiftRows(state);  <span class="comment">// 逆行移位</span></span><br><span class="line">        <span class="comment">// 此处没有逆列混合</span></span><br><span class="line">        addRoundKey(state, rk + <span class="number">4</span>);  <span class="comment">// 轮秘钥加，同加密</span></span><br><span class="line"></span><br><span class="line">        storeStateArray(state, pos);  <span class="comment">// 保存明文数据</span></span><br><span class="line">        pos += BLOCKSIZE;  <span class="comment">// 输出数据内存指针移位分组长度</span></span><br><span class="line">        ct += BLOCKSIZE;   <span class="comment">// 输入数据内存指针移位分组长度</span></span><br><span class="line">        rk = aesKey.dK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">16</span>] = <span class="string">&quot;Re_1s_eaSy123456&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">16</span>] = &#123; <span class="number">0x2B</span>, <span class="number">0xC8</span>, <span class="number">0x20</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0x0D</span>, <span class="number">0xA7</span>, <span class="number">0x9B</span>, <span class="number">0x2A</span>, <span class="number">0x51</span>, <span class="number">0x3A</span>, <span class="number">0xD2</span>, <span class="number">0x71</span>, <span class="number">0x71</span>, <span class="number">0xCA</span>, <span class="number">0x50</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> passwd[<span class="number">17</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    aesDecrypt(key,<span class="number">16</span>,enc,passwd,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, passwd);<span class="comment">//_eZ_Rc4_@nd_AES!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以flag: <strong>WMCTF{Re_1s_eaSy_eZ_Rc4_@nd_AES!}</strong></p>
<h1 id="正向还原"><a href="#正向还原" class="headerlink" title="正向还原"></a>正向还原</h1><p>程序基本逻辑</p>
<ol>
<li>初始化全局变量</li>
<li>JNI_OnLoad动态注册Native函数</li>
<li>CheckUserName用魔改RC4检测</li>
<li>CheckPassword用替换Sbox的AES检测</li>
</ol>
<p>值得一提的是该程序初始化数据的操作定义在.init_array区域</p>
<p><img src="/2023/08/22/%E6%AF%94%E8%B5%9B/WMCTF2023/WMCTF2023-ezAndorid/InitArrayFunc.png"></p>
<p>这里利用到了**_<em>attribute</em>_(constructor)**关键字</p>
<p>使用该关键字可以将函数注册为构造函数,当程序启动时自动执行,一般用于变量初始化的操作</p>
<p>所以在附加调试时下断点无法在这些函数处断下,推测是由于运行app时so文件已经加载进内存</p>
<p>加载时已经调用过这些函数,如果要断点可能需要使用命令以debug模式启动app</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell am Start -D -n</span><br></pre></td></tr></table></figure>

<p>效果</p>
<h2 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezandroidre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AlertDialog;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.zip.Inflater;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">CheckUserName</span><span class="params">(String str)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">CheckPassword</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;ezandroidre&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    EditText name,passwd;</span><br><span class="line">    Button check,exit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messagebox</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        AlertDialog.Builder dialog=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">        dialog.setMessage(message);</span><br><span class="line">        dialog.setPositiveButton(<span class="string">&quot;OK&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dialog.show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Check</span><span class="params">(View view)</span>&#123;</span><br><span class="line">        String UserName=name.getText().toString();</span><br><span class="line">        String Password=passwd.getText().toString();</span><br><span class="line">        <span class="keyword">if</span>(UserName.equals(<span class="string">&quot;&quot;</span>)||Password.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            messagebox(<span class="string">&quot;UserName or Password is empty!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(CheckUserName(UserName)!=<span class="number">1</span>)</span><br><span class="line">            messagebox(<span class="string">&quot;Wrong UserName!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(CheckPassword(Password)!=<span class="number">1</span>)&#123;</span><br><span class="line">            messagebox(<span class="string">&quot;Wrong Password!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            messagebox(<span class="string">&quot;Flag is:&quot;</span>+<span class="string">&quot;WMCTF&#123;&quot;</span>+UserName+Password+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        name=(EditText) findViewById(R.id.name);</span><br><span class="line">        passwd=(EditText) findViewById(R.id.passwd);</span><br><span class="line">        check=(Button)findViewById(R.id.check);</span><br><span class="line">        exit=(Button)findViewById(R.id.exit);</span><br><span class="line"></span><br><span class="line">        check.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                Check(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        exit.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];    <span class="comment">// encKey, decKey</span></span><br><span class="line">    <span class="type">int</span> Nr; <span class="comment">// 10 rounds</span></span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCKSIZE 16  <span class="comment">//AES-128分组长度为16字节</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint8_t y[4] -&gt; uint32_t x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (x) = ((uint32_t)((y)[0] &amp; 0xff)&lt;&lt;24) | ((uint32_t)((y)[1] &amp; 0xff)&lt;&lt;16) | \</span></span><br><span class="line"><span class="meta">             ((uint32_t)((y)[2] &amp; 0xff)&lt;&lt;8)  | ((uint32_t)((y)[3] &amp; 0xff));&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x -&gt; uint8_t y[4]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">  do &#123; (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从uint32_t x中提取从低位开始的第n个字节</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* used for keyExpansion */</span></span><br><span class="line"><span class="comment">// 字节替换然后循环左移1位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((AesSbox[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((AesSbox[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((AesSbox[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (AesSbox[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uint32_t x循环左移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"><span class="comment">// uint32_t x循环右移n位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* for 128-bit blocks, Rijndael never uses more than 10 rcon values */</span></span><br><span class="line"><span class="comment">// AES-128轮常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> rcon[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x01000000</span>UL, <span class="number">0x02000000</span>UL, <span class="number">0x04000000</span>UL, <span class="number">0x08000000</span>UL, <span class="number">0x10000000</span>UL,</span><br><span class="line">        <span class="number">0x20000000</span>UL, <span class="number">0x40000000</span>UL, <span class="number">0x80000000</span>UL, <span class="number">0x1B000000</span>UL, <span class="number">0x36000000</span>UL</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// S盒</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> AesSbox[<span class="number">256</span>] = &#123;</span><br><span class="line">        <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">        <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">        <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">        <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">        <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">        <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">        <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">        <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">        <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">        <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">        <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> NewAesSbox[<span class="number">256</span>] = &#123;</span><br><span class="line">        <span class="number">0x29</span>, <span class="number">0x40</span>, <span class="number">0x57</span>, <span class="number">0x6E</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0xB3</span>, <span class="number">0xCA</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x0F</span>, <span class="number">0x26</span>, <span class="number">0x3D</span>, <span class="number">0x54</span>, <span class="number">0x6B</span>, <span class="number">0x82</span>, <span class="number">0x99</span>, <span class="number">0xB0</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0xF5</span>, <span class="number">0x0C</span>, <span class="number">0x23</span>, <span class="number">0x3A</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x7F</span>, <span class="number">0x96</span>, <span class="number">0xAD</span>, <span class="number">0xC4</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="number">0xF2</span>, <span class="number">0x09</span>, <span class="number">0x20</span>, <span class="number">0x37</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x93</span>, <span class="number">0xAA</span>,</span><br><span class="line">        <span class="number">0xC1</span>, <span class="number">0xD8</span>, <span class="number">0xEF</span>, <span class="number">0x06</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x4B</span>, <span class="number">0x62</span>, <span class="number">0x79</span>, <span class="number">0x90</span>,</span><br><span class="line">        <span class="number">0xA7</span>, <span class="number">0xBE</span>, <span class="number">0xD5</span>, <span class="number">0xEC</span>, <span class="number">0x03</span>, <span class="number">0x1A</span>, <span class="number">0x31</span>, <span class="number">0x48</span>, <span class="number">0x5F</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0xA4</span>, <span class="number">0xBB</span>, <span class="number">0xD2</span>, <span class="number">0xE9</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x2E</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0xA1</span>, <span class="number">0xB8</span>, <span class="number">0xCF</span>, <span class="number">0xE6</span>, <span class="number">0xFD</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x87</span>, <span class="number">0x9E</span>, <span class="number">0xB5</span>, <span class="number">0xCC</span>, <span class="number">0xE3</span>, <span class="number">0xFA</span>, <span class="number">0x11</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0x6D</span>, <span class="number">0x84</span>, <span class="number">0x9B</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0xE0</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x25</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x6A</span>, <span class="number">0x81</span>, <span class="number">0x98</span>, <span class="number">0xAF</span>, <span class="number">0xC6</span>, <span class="number">0xDD</span>, <span class="number">0xF4</span>,</span><br><span class="line">        <span class="number">0x0B</span>, <span class="number">0x22</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0x08</span>, <span class="number">0x1F</span>, <span class="number">0x36</span>, <span class="number">0x4D</span>, <span class="number">0x64</span>, <span class="number">0x7B</span>, <span class="number">0x92</span>, <span class="number">0xA9</span>, <span class="number">0xC0</span>,</span><br><span class="line">        <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x33</span>, <span class="number">0x4A</span>, <span class="number">0x61</span>, <span class="number">0x78</span>, <span class="number">0x8F</span>, <span class="number">0xA6</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD4</span>, <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x75</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0xD1</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x16</span>, <span class="number">0x2D</span>, <span class="number">0x44</span>, <span class="number">0x5B</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x89</span>, <span class="number">0xA0</span>, <span class="number">0xB7</span>, <span class="number">0xCE</span>, <span class="number">0xE5</span>, <span class="number">0xFC</span>, <span class="number">0x13</span>, <span class="number">0x2A</span>, <span class="number">0x41</span>, <span class="number">0x58</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0x9D</span>, <span class="number">0xB4</span>, <span class="number">0xCB</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x3E</span>,</span><br><span class="line">        <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x83</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xC8</span>, <span class="number">0xDF</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x3B</span>, <span class="number">0x52</span>, <span class="number">0x69</span>, <span class="number">0x80</span>, <span class="number">0x97</span>, <span class="number">0xAE</span>, <span class="number">0xC5</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x4F</span>, <span class="number">0x66</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0xD9</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x4C</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0xBF</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x60</span>, <span class="number">0x77</span>, <span class="number">0x8E</span>, <span class="number">0xA5</span>, <span class="number">0xBC</span>,</span><br><span class="line">        <span class="number">0xD3</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0x46</span>, <span class="number">0x5D</span>, <span class="number">0x74</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>,</span><br><span class="line">        <span class="number">0xB9</span>, <span class="number">0xD0</span>, <span class="number">0xE7</span>, <span class="number">0xFE</span>, <span class="number">0x15</span>, <span class="number">0x2C</span>, <span class="number">0x43</span>, <span class="number">0x5A</span>, <span class="number">0x71</span>, <span class="number">0x88</span>,</span><br><span class="line">        <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xCD</span>, <span class="number">0xE4</span>, <span class="number">0xFB</span>, <span class="number">0x12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> EncUserName[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncUserNameData[<span class="number">10</span>]=&#123;<span class="number">47</span>, <span class="number">54</span>, <span class="number">165</span>, <span class="number">17</span>, <span class="number">82</span>, <span class="number">2</span>, <span class="number">242</span>, <span class="number">159</span>, <span class="number">113</span>, <span class="number">127</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> encPasswdData[<span class="number">16</span>] = &#123; <span class="number">0x2B</span>, <span class="number">0xC8</span>, <span class="number">0x20</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0x0D</span>, <span class="number">0xA7</span>, <span class="number">0x9B</span>, <span class="number">0x2A</span>, <span class="number">0x51</span>, <span class="number">0x3A</span>, <span class="number">0xD2</span>, <span class="number">0x71</span>, <span class="number">0x71</span>, <span class="number">0xCA</span>, <span class="number">0x50</span> &#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> encPasswd[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">/* copy in[16] to state[4][4] */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[j][i] = *in++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* copy state[4][4] to out[16] */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            *out++ = state[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//秘钥扩展</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, AesKey* aesKey)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == aesKey) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion param is NULL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen != <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyExpansion keyLen = %d, Not support.\n&quot;</span>, keyLen);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span>* w = aesKey-&gt;eK;  <span class="comment">//加密秘钥</span></span><br><span class="line">    <span class="type">uint32_t</span>* v = aesKey-&gt;dK;  <span class="comment">//解密秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* keyLen is 16 Bytes, generate uint32_t W[44]. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[0-3] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">LOAD32H</span>(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* W[4-43] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ <span class="built_in">MIX</span>(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">        w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">        w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">        w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">        w += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w = aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//解密秘钥矩阵为加密秘钥矩阵的倒序，方便使用，把ek的11个矩阵倒序排列分配给dk作为解密秘钥</span></span><br><span class="line">    <span class="comment">//即dk[0-3]=ek[41-44], dk[4-7]=ek[37-40]... dk[41-44]=ek[0-3]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            v[i] = w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        w -= <span class="number">4</span>;</span><br><span class="line">        v += <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮秘钥加</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            k[i][j] = (<span class="type">uint8_t</span>)<span class="built_in">BYTE</span>(key[j], <span class="number">3</span> - i);  <span class="comment">/* 把 uint32 key[4] 先转换为矩阵 uint8 k[4][4] */</span></span><br><span class="line">            state[i][j] ^= k[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字节替换</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">subBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* i: row, j: col */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            state[i][j] = AesSbox[state[i][j]]; <span class="comment">//直接使用原始字节作为S盒数据下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//行移位</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">shiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> block[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* i: row */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="comment">//便于行循环移位，先把一行4字节拼成uint_32结构，移位后再转成独立的4个字节uint8_t</span></span><br><span class="line">        <span class="built_in">LOAD32H</span>(block[i], state[i]);</span><br><span class="line">        block[i] = <span class="built_in">ROF32</span>(block[i], <span class="number">8</span> * i);</span><br><span class="line">        <span class="built_in">STORE32H</span>(block[i], state[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Galois Field (256) Multiplication of two Bytes */</span></span><br><span class="line"><span class="comment">// 两字节的伽罗华域乘法运算</span></span><br><span class="line"><span class="function"><span class="type">uint8_t</span> <span class="title">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;    <span class="comment">//</span></span><br><span class="line">            p ^= v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">        v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            v ^= <span class="number">0x1B</span>; <span class="comment">/* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy state[4][4] to tmp[4][4] */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">            tmp[i][j] = state[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;  <span class="comment">//伽罗华域加法和乘法</span></span><br><span class="line">            state[i][j] = <span class="built_in">GMul</span>(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">                          ^ <span class="built_in">GMul</span>(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j]) ^ <span class="built_in">GMul</span>(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">aesEncrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* pt, <span class="type">uint8_t</span>* ct, <span class="type">uint32_t</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span>* pos = ct;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.eK;  <span class="comment">//解密秘钥指针</span></span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == key || <span class="literal">NULL</span> == pt || <span class="literal">NULL</span> == ct) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param err.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyLen &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;keyLen must be 16.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len % BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;inLen is invalid.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    <span class="built_in">keyExpansion</span>(actualKey, <span class="number">16</span>, &amp;aesKey);  <span class="comment">// 秘钥扩展</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用ECB模式循环加密多个分组长度的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="comment">// 把16字节的明文转换为4x4状态矩阵来进行处理</span></span><br><span class="line">        <span class="built_in">loadStateArray</span>(state, pt);</span><br><span class="line">        <span class="comment">// 轮秘钥加</span></span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">subBytes</span>(state);   <span class="comment">// 字节替换</span></span><br><span class="line">            <span class="built_in">shiftRows</span>(state);  <span class="comment">// 行移位</span></span><br><span class="line">            <span class="built_in">mixColumns</span>(state); <span class="comment">// 列混合</span></span><br><span class="line">            <span class="built_in">addRoundKey</span>(state, rk); <span class="comment">// 轮秘钥加</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">subBytes</span>(state);    <span class="comment">// 字节替换</span></span><br><span class="line">        <span class="built_in">shiftRows</span>(state);  <span class="comment">// 行移位</span></span><br><span class="line">        <span class="comment">// 此处不进行列混合</span></span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk + <span class="number">4</span>); <span class="comment">// 轮秘钥加</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把4x4状态矩阵转换为uint8_t一维数组输出保存</span></span><br><span class="line">        <span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line"></span><br><span class="line">        pos += BLOCKSIZE;  <span class="comment">// 加密数据内存指针移动到下一个分组</span></span><br><span class="line">        pt += BLOCKSIZE;   <span class="comment">// 明文数据指针移动到下一个分组</span></span><br><span class="line">        rk = aesKey.eK;    <span class="comment">// 恢复rk指针到秘钥初始位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> RC4Sbox[<span class="number">256</span>] = &#123;<span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>&amp; a, <span class="type">unsigned</span> <span class="type">char</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_sbox</span><span class="params">( <span class="type">unsigned</span> <span class="type">char</span> key[],<span class="type">unsigned</span> <span class="type">int</span> keyLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)<span class="comment">//赋值</span></span><br><span class="line">        RC4Sbox[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Ttable[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        Ttable[i] = key[i % keyLen];<span class="comment">//根据初始化t表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + RC4Sbox[i] + Ttable[i]) % <span class="number">256</span>;	<span class="comment">//打乱s盒</span></span><br><span class="line">        <span class="built_in">swap</span>(RC4Sbox[i], RC4Sbox[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4_enc_dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data[],<span class="type">unsigned</span> <span class="type">int</span> dataLen,<span class="type">unsigned</span> <span class="type">char</span> key[],<span class="type">unsigned</span> <span class="type">int</span> keyLen)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">init_sbox</span>(key,keyLen);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> h = <span class="number">0</span>; h &lt; dataLen; h++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + RC4Sbox[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(RC4Sbox[i], RC4Sbox[j]);</span><br><span class="line">        t = (RC4Sbox[i] + RC4Sbox[j]) % <span class="number">256</span>;</span><br><span class="line">        k = RC4Sbox[t];	<span class="comment">//求密钥流,并对明文加密</span></span><br><span class="line">        data[h] =data[h]^k^h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//较小的先执行</span></span><br><span class="line"><span class="comment">//初始化加密后的用户名</span></span><br><span class="line">__attribute__ ((<span class="built_in">constructor</span>(<span class="number">101</span>))) <span class="function"><span class="type">void</span> <span class="title">initEncName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">        encPasswd[i]=encPasswdData[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化替换后的AESSbox</span></span><br><span class="line">__attribute__ ((<span class="built_in">constructor</span>(<span class="number">102</span>))) <span class="function"><span class="type">void</span> <span class="title">initAesSbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">        AesSbox[i]=NewAesSbox[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化加密后的密码</span></span><br><span class="line">__attribute__ ((<span class="built_in">constructor</span>(<span class="number">103</span>))) <span class="function"><span class="type">void</span> <span class="title">initEncPasswd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">        EncUserName[i]=EncUserNameData[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">CheckUserName</span><span class="params">(JNIEnv* env,jobject obj,jstring str)</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* UserName=(<span class="type">unsigned</span> <span class="type">char</span>*)env-&gt;<span class="built_in">GetStringUTFChars</span>(str, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">11</span>]=<span class="string">&quot;helloWorld&quot;</span>;</span><br><span class="line">    <span class="built_in">RC4_enc_dec</span>(UserName, <span class="number">10</span>, key, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(UserName, EncUserName, <span class="number">10</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">CheckPassword</span><span class="params">(JNIEnv* env,jobject obj,jstring str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* passwd=(<span class="type">unsigned</span> <span class="type">char</span>*)env-&gt;<span class="built_in">GetStringUTFChars</span>(str,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">17</span>]=<span class="string">&quot;Re_1s_eaSy123456&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">aesEncrypt</span>(key,<span class="number">16</span>,passwd,enc,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(enc,encPasswd,<span class="number">16</span>)==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>*  className=<span class="string">&quot;com/example/ezandroidre/MainActivity&quot;</span>;</span><br><span class="line"><span class="type">static</span> JNINativeMethod methods[]=&#123;</span><br><span class="line">        &#123;<span class="string">&quot;CheckUserName&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)I&quot;</span>,(<span class="type">void</span>*) CheckUserName&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;CheckPassword&quot;</span>,<span class="string">&quot;(Ljava/lang/String;)I&quot;</span>,(<span class="type">void</span>*) CheckPassword&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="type">void</span> *reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv* env=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;<span class="built_in">GetEnv</span>((<span class="type">void</span>**)&amp;env,JNI_VERSION_1_6)==JNI_OK)&#123;</span><br><span class="line">        jclass clazz=env-&gt;<span class="built_in">FindClass</span>(className);</span><br><span class="line">        <span class="keyword">if</span>(clazz)&#123;</span><br><span class="line">            env-&gt;<span class="built_in">RegisterNatives</span>(clazz,methods,<span class="built_in">sizeof</span>(methods)/<span class="built_in">sizeof</span>(methods[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;204dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;UserName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/passwd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;276dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/check&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;352dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;CheckOut&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/exit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">&quot;8dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;432dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Exit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="总结收获"><a href="#总结收获" class="headerlink" title="总结收获"></a>总结收获</h1><ol>
<li>JNI_OnLoad动态注册原理和实现方法</li>
<li>AES加密基本流程 逆解AES</li>
<li>_<em>attribute</em>_(constructor())  func() 注册构造函数方法</li>
</ol>
]]></content>
      <categories>
        <category>WMCTF2023</category>
      </categories>
      <tags>
        <tag>AES</tag>
        <tag>RC4</tag>
        <tag>OLLVM</tag>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-08日报</title>
    <url>/2023/10/08/%E6%97%A5%E6%8A%A5/2023-10/2023-10-08%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="一-学习IATHook的原理并用代码实现"><a href="#一-学习IATHook的原理并用代码实现" class="headerlink" title="一.学习IATHook的原理并用代码实现"></a>一.学习IATHook的原理并用代码实现</h2><p>IATHook是程序导入dll时,每个dll都会有一张对应的导入表,每个导入表记录了INT和IAT的地址<br>其中IAT记录了该dll的导入函数真实地址<br>IATHook的基本流程:</p>
<ol>
<li>获取目标函数地址</li>
<li>根据dll名查找导入表</li>
<li>查找IAT表</li>
<li>修改IAT表项</li>
</ol>
<p>可以修改自身IAT或者修改其他进程IAT,修改其他进程时使用Dll注入比较方便</p>
<h2 id="学习main函数前后执行代码的方法"><a href="#学习main函数前后执行代码的方法" class="headerlink" title="学习main函数前后执行代码的方法"></a>学习main函数前后执行代码的方法</h2><p>主要是利用C++的构造函数和析构函数,或者GNUC的attribute关键字,用起来并不复杂,这个可以用来出题</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>main函数前后执行代码</title>
    <url>/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/mlyhzt/article/details/111351883">如何在main函数之前和之后执行一段程序</a></p>
<h1 id="main之前执行代码"><a href="#main之前执行代码" class="headerlink" title="main之前执行代码"></a>main之前执行代码</h1><h2 id="C-全局变量初始化时调用构造函数"><a href="#C-全局变量初始化时调用构造函数" class="headerlink" title="C++全局变量初始化时调用构造函数"></a>C++全局变量初始化时调用构造函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">A</span>()&#123;<span class="built_in">printf</span>(<span class="string">&quot;BeforeMain\n&quot;</span>);&#125;<span class="comment">//构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;<span class="comment">//声明一个全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Main\n&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/beforemain1.png" alt="beforemain1"></p>
<h2 id="C-全局变量调用函数赋值"><a href="#C-全局变量调用函数赋值" class="headerlink" title="C++全局变量调用函数赋值"></a>C++全局变量调用函数赋值</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;before main\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">f</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/beforemain2.png" alt="beforemain2"></p>
<h2 id="GNUC编译器-attribute-constructor"><a href="#GNUC编译器-attribute-constructor" class="headerlink" title="GNUC编译器_attribute_((constructor))"></a>GNUC编译器_<em>attribute</em>_((constructor))</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((constructor)) <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello before main!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/beforemain3.png" alt="beforemain3"></p>
<h1 id="main之后执行代码"><a href="#main之后执行代码" class="headerlink" title="main之后执行代码"></a>main之后执行代码</h1><h2 id="C-析构函数"><a href="#C-析构函数" class="headerlink" title="C++析构函数"></a>C++析构函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~<span class="built_in">A</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;after main!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/aftermain1.png" alt="aftermain1"></p>
<h2 id="GNUC编译器-attribute-destructor"><a href="#GNUC编译器-attribute-destructor" class="headerlink" title="GNUC编译器_attribute_((destructor))"></a>GNUC编译器_<em>attribute</em>_((destructor))</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((destructor)) <span class="type">void</span> <span class="title function_">after</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;after\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;main\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/aftermain2.png" alt="aftermain2"></p>
<h2 id="onexit-func-或atexit-func"><a href="#onexit-func-或atexit-func" class="headerlink" title="onexit(func)或atexit(func)"></a>onexit(func)或atexit(func)</h2><p>onexit: 要求注册的函数返回值类型为int</p>
<p>atexit: 要求注册的函数返回值类型为void</p>
<p><strong>均要求注册函数没有参数</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func1</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;function 1&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;function 2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hh\n&quot;</span>);</span><br><span class="line">	<span class="built_in">onexit</span>(func1);</span><br><span class="line">    <span class="built_in">atexit</span>(func2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hh\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以发现两个exit函数都在main之后执行,并且func2先于func1,这是由于func1先入栈,func2后入栈,所以调用关系反过来了</p>
<p><img src="/2023/10/08/Reverse/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/main%E5%87%BD%E6%95%B0%E5%89%8D%E5%90%8E%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81/aftermain3.png"></p>
]]></content>
      <categories>
        <category>小知识点</category>
      </categories>
      <tags>
        <tag>main前后执行代码</tag>
      </tags>
  </entry>
  <entry>
    <title>IATHook</title>
    <url>/2023/10/08/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/Hook/IATHook/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Buuctf [安洵杯 2019] crackMe 这题使用到了IATHook技术,Hook自身进程的MessageBoxA函数从而隐藏真实代码逻辑</p>
<h1 id="IAT表"><a href="#IAT表" class="headerlink" title="IAT表"></a>IAT表</h1><p>某些程序的运行可能依赖其他dll的一些函数,例如MessageBox函数,程序调用该函数时实际上要查找IAT表中的表项从而获取函数地址,通过修改IAT表即可Hook导入的函数</p>
<h1 id="Hook自身进程IAT"><a href="#Hook自身进程IAT" class="headerlink" title="Hook自身进程IAT"></a>Hook自身进程IAT</h1><p>Hook自身进程的IAT表项比较简单</p>
<ol>
<li>首先加载Dll或者获取Dll句柄,再获取目标函数地址</li>
<li>查找dll对应的导入表</li>
<li>查找IAT表中目标函数对应表项</li>
<li>修改IAT表项中保存的目标函数地址</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//远程操作进行IATHook比较繁琐,可以利用dll注入实现IAThook</span></span><br><span class="line"><span class="function"><span class="type">int</span> _stdcall <span class="title">newFunc</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">MessageBoxW</span>(<span class="number">0</span>, <span class="string">L&quot;HookSuccess!&quot;</span>, <span class="string">L&quot;Good&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	HANDLE hProcess = <span class="built_in">GetCurrentProcess</span>();<span class="comment">//当前进程句柄</span></span><br><span class="line">	DWORD BaseAddr = (DWORD)<span class="built_in">GetModuleHandle</span>(<span class="number">0</span>);<span class="comment">//获取当前进程基址</span></span><br><span class="line">	<span class="comment">//1.加载dll</span></span><br><span class="line">	<span class="comment">//HMODULE libAddr = LoadLibraryA(&quot;User32.dll&quot;);</span></span><br><span class="line">	HMODULE libAddr = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;User32.dll&quot;</span>);</span><br><span class="line">	PVOID funcAddr =<span class="built_in">GetProcAddress</span>(libAddr, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	<span class="comment">//2.查找dll对应的导入表</span></span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionalHeader= (PIMAGE_OPTIONAL_HEADER)(BaseAddr + *(PDWORD)(BaseAddr + <span class="number">0x3c</span>) + <span class="number">0x18</span>);<span class="comment">//base+3c处是pe头偏移 pe头+18是可选头地址</span></span><br><span class="line">	PIMAGE_IMPORT_DESCRIPTOR pImportTable = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionalHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + BaseAddr);<span class="comment">//导入表地址</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">stricmp</span>((<span class="type">char</span>*)(BaseAddr + pImportTable-&gt;Name), <span class="string">&quot;User32.dll&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">			pImportTable++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3.遍历IAT表,找目标函数所在表项</span></span><br><span class="line">	PIMAGE_THUNK_DATA pIAT =(PIMAGE_THUNK_DATA)(BaseAddr+pImportTable-&gt;FirstThunk); <span class="comment">//IAT表</span></span><br><span class="line">	PIMAGE_THUNK_DATA pINT = (PIMAGE_THUNK_DATA)(BaseAddr + pImportTable-&gt;OriginalFirstThunk);<span class="comment">//INT表</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (pIAT-&gt;u1.AddressOfData != (DWORD)funcAddr)</span><br><span class="line">		pIAT++;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4.修改目标函数地址表项</span></span><br><span class="line">	LPVOID lpAddress =(LPVOID)((DWORD)pIAT &gt;&gt; <span class="number">12</span> &lt;&lt; <span class="number">12</span>);<span class="comment">//目标函数对应IAT表项所在页面基址</span></span><br><span class="line">	DWORD old = <span class="number">0</span>, funcaddr = (DWORD)newFunc;</span><br><span class="line">	MEMORY_BASIC_INFORMATION information ;</span><br><span class="line">	<span class="built_in">VirtualQuery</span>(lpAddress, &amp;information, <span class="number">0x1000</span>);<span class="comment">//获取页面相关信息</span></span><br><span class="line">	<span class="built_in">VirtualProtect</span>(lpAddress, <span class="number">0x1000</span>, PAGE_EXECUTE_READWRITE, &amp;old);<span class="comment">//取消页保护 第四个参数必须有,否则可能出错</span></span><br><span class="line">	<span class="built_in">WriteProcessMemory</span>(hProcess, pIAT, &amp;funcaddr, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">VirtualProtect</span>(lpAddress, <span class="number">0x1000</span>, old, &amp;old);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">MessageBoxA</span>(<span class="number">0</span>, <span class="string">&quot;HookFailed&quot;</span>, <span class="string">&quot;Bad&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源代码正常逻辑应该输出HookFailed,实际上弹窗的是我们手动构造的新的函数,说明Hook成功</p>
<p><img src="/2023/10/08/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/Hook/IATHook/1_IATHookSelf.png" alt="image-20231008162810440"></p>
<h1 id="Dll注入实现IATHook"><a href="#Dll注入实现IATHook" class="headerlink" title="Dll注入实现IATHook"></a>Dll注入实现IATHook</h1><p>同修改自身进程IAT类似,修改其他进程可以通过一个进程操作目标进程进行IATHook,但是会稍微麻烦一点</p>
<p>Dll注入实现IATHook更加简单,因为Dll被注入后即可访问目标进程的内存空间</p>
<p>测试程序代码,没被hook时会输出HookFailed</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;NormalMessageBox&quot;</span>, <span class="string">&quot;Normal&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Plz hook MessageBox&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	MessageBoxA(<span class="number">0</span>, <span class="string">&quot;HookFailed!&quot;</span>, <span class="string">&quot;Failed&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dll代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD BaseAddr;</span><br><span class="line">DWORD Pid;</span><br><span class="line">HANDLE hProcess;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化进程基址 Pid 句柄等</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	BaseAddr = <span class="built_in">GetModuleHandle</span>(<span class="number">0</span>);</span><br><span class="line">	Pid = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">	hProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">HookIAT</span><span class="params">(LPCSTR desLibName,LPCSTR desFuncName,DWORD newFuncAddr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!(desLibName &amp;&amp; desFuncName &amp;&amp; newFuncAddr))<span class="comment">//输入有误</span></span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	<span class="comment">//1.获取目标dll基址和目标函数地址</span></span><br><span class="line">	HMODULE libBaseAddr = <span class="built_in">GetModuleHandleA</span>(desLibName);</span><br><span class="line">	LPVOID desFuncAddr = <span class="built_in">GetProcAddress</span>(libBaseAddr, desFuncName);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.查找dll对应的导入表</span></span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pOptionalHeader = (PIMAGE_OPTIONAL_HEADER)(BaseAddr + *(PDWORD)(BaseAddr + <span class="number">0x3c</span>) + <span class="number">0x18</span>);<span class="comment">//base+3c处是pe头偏移 pe头+18是可选头地址</span></span><br><span class="line">	PIMAGE_IMPORT_DESCRIPTOR pImportTable = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionalHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + BaseAddr);<span class="comment">//导入表地址</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">stricmp</span>((<span class="type">char</span>*)(BaseAddr + pImportTable-&gt;Name), desLibName) != <span class="number">0</span>) </span><br><span class="line">		pImportTable++;<span class="comment">//找到目标dll对应的导入表</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//3.遍历IAT表,找目标函数所在表项</span></span><br><span class="line">	PIMAGE_THUNK_DATA pIAT = (PIMAGE_THUNK_DATA)(BaseAddr + pImportTable-&gt;FirstThunk); <span class="comment">//IAT表</span></span><br><span class="line">	<span class="keyword">while</span> (pIAT-&gt;u1.AddressOfData !=desFuncAddr)</span><br><span class="line">		pIAT++;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4.修改目标函数对应IAT表项</span></span><br><span class="line">	LPVOID pageBaseAddr= ((DWORD)pIAT&gt;&gt;<span class="number">12</span>&lt;&lt;<span class="number">12</span>);</span><br><span class="line">	DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">VirtualProtect</span>(pageBaseAddr, <span class="number">0x1000</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect);<span class="comment">//取消页保护 第四个参数必须有,否则可能出错</span></span><br><span class="line">	<span class="built_in">WriteProcessMemory</span>(hProcess, pIAT, &amp;newFuncAddr, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">VirtualProtect</span>(pageBaseAddr, <span class="number">0x1000</span>, oldProtect, &amp;oldProtect);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> _stdcall <span class="title">newFunc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">MessageBoxW</span>(<span class="number">0</span>, <span class="string">L&quot;HookSuccess!&quot;</span>, <span class="string">L&quot;Good&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HMODULE hInstance, DWORD fdwReason, LPVOID lpReserved)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">Init</span>();</span><br><span class="line">    <span class="keyword">switch</span> (fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:    <span class="comment">//当进程加载dll模块时执行</span></span><br><span class="line">		<span class="comment">//MessageBoxW(0, L&quot;LibLoad&quot;, L&quot;Load&quot;, 0);</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;LibLoadSuccess!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">HookIAT</span>(<span class="string">&quot;User32.dll&quot;</span>,<span class="string">&quot;MessageBoxA&quot;</span>,newFunc);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:        <span class="comment">//当进程卸载dll模块时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shlwapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;psapi.h&gt;</span></span></span><br><span class="line"><span class="comment">// 根据进程名获取进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">wchar_t</span>* processName)</span> &#123;</span><br><span class="line"></span><br><span class="line">	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);<span class="comment">// 创建一个进程快照</span></span><br><span class="line">	<span class="keyword">if</span> (snapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果创建失败，返回 0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义一个 PROCESSENTRY32 结构体，用于存储进程信息</span></span><br><span class="line">	PROCESSENTRY32 processEntry = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	processEntry.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);   <span class="comment">//必须初始化,否则调用Process32First会失败</span></span><br><span class="line">	<span class="keyword">if</span> (!Process32First(snapshot, &amp;processEntry)) &#123;</span><br><span class="line">		CloseHandle(snapshot);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 如果获取第一个进程信息失败，关闭进程快照句柄并返回 0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 遍历进程列表</span></span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="type">wchar_t</span> currentProcessName[MAX_PATH];                           <span class="comment">// 获取当前进程的名称</span></span><br><span class="line">		wcscpy_s(currentProcessName, MAX_PATH, processEntry.szExeFile); <span class="comment">//szExeFile存储了进程对应可执行文件的名称</span></span><br><span class="line">		<span class="keyword">if</span> (wcscmp(currentProcessName, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">			CloseHandle(snapshot);                                  <span class="comment">// 如果当前进程名称和指定的进程名称相同，返回进程 ID</span></span><br><span class="line">			<span class="keyword">return</span> processEntry.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (Process32Next(snapshot, &amp;processEntry));               <span class="comment">//获取快照中下一个进程的信息</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果遍历完整个进程列表都没有找到指定进程，关闭进程快照句柄并返回 0</span></span><br><span class="line">	CloseHandle(snapshot);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建远程线程方式向指定进程注入dll</span></span><br><span class="line">BOOL <span class="title function_">InjectDllByRemoteThread</span><span class="params">(DWORD desProcId, LPCWSTR dllPath)</span> &#123;</span><br><span class="line">	<span class="comment">//打开进程获取进程句柄</span></span><br><span class="line">	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, desProcId);</span><br><span class="line">	<span class="keyword">if</span> (!hProcess)</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//申请空间</span></span><br><span class="line">	DWORD pathSize = (wcslen(dllPath)+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">	LPVOID newMemAddr = VirtualAllocEx(hProcess, <span class="number">0</span>, pathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (!newMemAddr)</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//写入dll路径</span></span><br><span class="line">	<span class="keyword">if</span> (!WriteProcessMemory(hProcess, newMemAddr, dllPath, pathSize, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建远程线程</span></span><br><span class="line">	HANDLE hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)LoadLibraryW, newMemAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!hThread)</span><br><span class="line">	&#123;</span><br><span class="line">		VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	WaitForSingleObject(hThread, INFINITE);<span class="comment">//等待线程信号,保证成功注入</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//回收资源</span></span><br><span class="line">	VirtualFreeEx(hProcess, newMemAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回成功</span></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据进程窗口名获取进程PID</span></span><br><span class="line">DWORD <span class="title function_">GetPidByWindowName</span><span class="params">(LPCWSTR windName)</span> &#123;</span><br><span class="line">    DWORD Pid = <span class="number">0</span>;</span><br><span class="line">    HWND hwnd = FindWindow(<span class="literal">NULL</span>, windName);<span class="comment">//获取窗口句柄</span></span><br><span class="line">    GetWindowThreadProcessId(hwnd, &amp;Pid);<span class="comment">//根据窗口句柄获取PID</span></span><br><span class="line">    <span class="keyword">return</span> Pid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    DWORD Pid = <span class="number">0</span>;</span><br><span class="line">    Pid=GetPidByWindowName(<span class="string">L&quot;C:\\Users\\admin\\Desktop\\test.exe&quot;</span>);<span class="comment">//注意要填写完整窗口名</span></span><br><span class="line">    <span class="comment">//Pid=GetProcessIdByName(L&quot;test.exe&quot;);//仅填写进程名即可</span></span><br><span class="line">    <span class="keyword">if</span> (InjectDllByRemoteThread(Pid, <span class="string">L&quot;C:\\Users\\admin\\Desktop\\InjectedDll.dll&quot;</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;InjectedSuccess!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;InjectedFailed!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试文件:test.exe 注入dll:InjectedDll.dll dll注入程序:InjectDllForIATHook.exe</p>
<p>注意这里文件需要放在桌面</p>
<p><img src="/2023/10/08/Reverse/%E9%80%86%E5%90%91%E6%8A%80%E6%9C%AF/Hook/IATHook/2_IATHookByInjectDll.png" alt="image-20231008201315938"></p>
]]></content>
      <categories>
        <category>Hook</category>
      </categories>
      <tags>
        <tag>IATHook</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-10日报</title>
    <url>/2023/10/10/%E6%97%A5%E6%8A%A5/2023-10/2023-10-10%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="1-学习WinSocket网络编程"><a href="#1-学习WinSocket网络编程" class="headerlink" title="1. 学习WinSocket网络编程"></a>1. 学习WinSocket网络编程</h2><p>这两天学到了TCP的服务端和客户端,UDP的服务端和客户端<br>socket套接字个人理解是主机用于收发数据的抽象对象<br>套接字绑定则是将套接字和ip地址及端口号进行绑定,方便其他主机定位本机</p>
<p>TCP是面向连接的,所以客户端和服务端都需要进行套接字绑定,方便向对方收发数据<br>服务端:绑定套接字后对套接字进行监听并等待连接,如果有连接请求则尝试建立连接<br>建立成功后分配一个AcceptSocket作为和服务端通信的对象<br>通过对AcceptSocket对象调用recv接收数据,调用send发送数据</p>
<p>客户端:绑定套接字后通过该套接字和目的主机ip地址及端口即可请求连接<br>连接建立成功后可以直接通过绑定好的套接字收发数据</p>
<h2 id="2-学习ELF文件结构和编译链接"><a href="#2-学习ELF文件结构和编译链接" class="headerlink" title="2.学习ELF文件结构和编译链接"></a>2.学习ELF文件结构和编译链接</h2><p>回头再看程序员的自我修养发现elf文件结构和pe结构类似,比以前好理解<br>准备深入学习一下elf文件结构和编译链接的知识</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-11日报</title>
    <url>/2023/10/11/%E6%97%A5%E6%8A%A5/2023-10/2023-10-11%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="1-柏鹭杯"><a href="#1-柏鹭杯" class="headerlink" title="1.柏鹭杯"></a>1.柏鹭杯</h2><p>柏鹭杯坐大牢,七个小时才签个到<br>签到题想太多了,被变量在栈上的位置困惑住很久<br>不过有意思的是这些浮点数指令,明天可以总结一下,是不错的出题思路</p>
<h2 id="2-网络编程-多线程处理"><a href="#2-网络编程-多线程处理" class="headerlink" title="2.网络编程-多线程处理"></a>2.网络编程-多线程处理</h2><p>前面学到的网络编程都是服务端一次对接一个客户端,显然并不够用<br>所以可以利用多线程技术让服务端一次对接多个客户端<br>代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 0. 初始化</span></span><br><span class="line">    WORD wsVersion = <span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">WSAStartup</span>(wsVersion, &amp;wsaData);</span><br><span class="line">    <span class="comment">// 1. 创建套接字</span></span><br><span class="line">    SOCKET sSocket = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == sSocket) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;套接字创建失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;套接字创建成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 绑定套接字</span></span><br><span class="line">    sockaddr_in sockAddrInfo = &#123; <span class="number">0</span> &#125;;    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="type">char</span> ipaddr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> port = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Plz input local ipaddr:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ipaddr);</span><br><span class="line">    sockAddrInfo.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(ipaddr);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Plz input local port:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;port);</span><br><span class="line">    sockAddrInfo.sin_port = <span class="built_in">htons</span>(port); <span class="comment">// 端口</span></span><br><span class="line">    sockAddrInfo.sin_family = AF_INET; <span class="comment">// 地址族规范</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bRes = <span class="built_in">bind</span>(sSocket, (sockaddr*)&amp;sockAddrInfo, <span class="built_in">sizeof</span>(sockAddrInfo));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == bRes) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;绑定失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;绑定成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 监听套接字</span></span><br><span class="line">    <span class="type">int</span> lRes = <span class="built_in">listen</span>(sSocket, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == lRes) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;监听失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;监听成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 4. 等待连接</span></span><br><span class="line">        sockaddr_in acceptSockAddrInfo = &#123; <span class="number">0</span> &#125;;    <span class="comment">// 初始化</span></span><br><span class="line">        <span class="type">int</span> acceptSockAddrLen = <span class="built_in">sizeof</span>(acceptSockAddrInfo);</span><br><span class="line">        SOCKET aSocket = <span class="built_in">accept</span>(sSocket, (sockaddr*)&amp;acceptSockAddrInfo, &amp;acceptSockAddrLen);</span><br><span class="line">        <span class="keyword">if</span> (INVALID_SOCKET != aSocket) &#123;</span><br><span class="line">            HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, (LPVOID)aSocket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 关闭套接字</span></span><br><span class="line">    <span class="built_in">closesocket</span>(sSocket);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    SOCKET aSocket = (SOCKET)lpParameter;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">// 收发数据</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ret = <span class="built_in">recv</span>(aSocket, buf, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, <span class="string">&quot;close&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Recv data: %s \n&quot;</span>, buf);</span><br><span class="line">        <span class="built_in">send</span>(aSocket, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (ret != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开连接(被动)</span></span><br><span class="line">    <span class="built_in">shutdown</span>(aSocket, SD_BOTH);</span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    <span class="built_in">closesocket</span>(aSocket);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>主函数中创建了线程后没有等待线程信号,马上调用closehandle函数<br>我怀疑这可能会关闭子线程,导致子线程无法正常执行<br>后来经过测试以及询问gpt发现并不会影响</p>
<p>操作系统中，句柄（handle）是一个抽象的对象，用于标识资源（如文件、套接字、线程、进程等）。<br>关闭句柄<strong>只是告诉操作系统不再使用该句柄，不再需要对应的资源</strong>。<br>关闭句柄并不会影响已经创建的线程、进程等的执行。<strong>线程在被创建后会独立地执行，不受创建线程时的句柄状态的影响</strong>。<br>关闭句柄主要是为了释放操作系统内部的资源记录和管理句柄的内存，防止资源泄漏。</p>
<p>总而言之句柄只是抽象的资源对象,对象本身的行为并不会受到影响<br>就像openprocess返回的进程句柄,使用完毕后即可关闭,但是我们关闭了进程句柄并不会导致进程关闭,这是同样的道理</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-13日报</title>
    <url>/2023/10/13/%E6%97%A5%E6%8A%A5/2023-10/2023-10-13%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>1.整理了下编译原理的自动机部分,完成NFA转DFA的代码</p>
<p>2.做招新宣讲ppt,逆向ppt明天再改改,写个简单的讲稿</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-22日报</title>
    <url>/2023/10/23/%E6%97%A5%E6%8A%A5/2023-10/2023-10-22%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="完成N1CTF-re签到题AdditionPlus"><a href="#完成N1CTF-re签到题AdditionPlus" class="headerlink" title="完成N1CTF re签到题AdditionPlus"></a>完成N1CTF re签到题AdditionPlus</h2><p>这题昨天的思路就是使用Ponce插件爆,可惜没设置好ponce最大执行时间所以没爆出来<br>今天把时间和空间设置拉满就爆出来了,patch程序八位字节一组爆即可</p>
<h2 id="使用了几个Xposed模块"><a href="#使用了几个Xposed模块" class="headerlink" title="使用了几个Xposed模块"></a>使用了几个Xposed模块</h2><p>qq防撤回还是很有用的,还有一些解锁vip,以后可以多搞搞机,整点xposed开发</p>
<h2 id="学了一点手机抓包"><a href="#学了一点手机抓包" class="headerlink" title="学了一点手机抓包"></a>学了一点手机抓包</h2><p>基本配置也不难,手机设置代理到主机,主机开启抓包即可<br>注意windwos需要关闭防火墙,否则没有任何反应,kali虚拟机可以直接抓</p>
<h2 id="了解了一下eCapture抓包工具"><a href="#了解了一下eCapture抓包工具" class="headerlink" title="了解了一下eCapture抓包工具"></a>了解了一下eCapture抓包工具</h2><p>该工具基于ebpf技术,对linux内核版本要求至少是&gt;&#x3D;4.18,可惜测试机内核老用不了<br>kali试了一下也没成功,还得继续研究下ebpf技术基础才可以</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-23日报</title>
    <url>/2023/10/23/%E6%97%A5%E6%8A%A5/2023-10/2023-10-23%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>学到了定时器,async await,bootstarp框架<br>框架开发非常方便,比手搓好多了</p>
<h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>看懂了first follow select集合的定义和运算<br>判断LL(1)文法的方法</p>
<h2 id="ebpf"><a href="#ebpf" class="headerlink" title="ebpf"></a>ebpf</h2><p>找到一篇不错的开源文档<a href="https://github.com/eunomia-bpf/bpf-developer-tutorial">https://github.com/eunomia-bpf/bpf-developer-tutorial</a><br>准备跟着示例学了,甚至有一键创建环境我哭死</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-24日报</title>
    <url>/2023/10/24/%E6%97%A5%E6%8A%A5/2023-10/2023-10-24%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="完成polyre"><a href="#完成polyre" class="headerlink" title="完成polyre"></a>完成polyre</h2><p>这题使用到了OLLVM混淆,有平坦化和虚假控制流</p>
<ol>
<li>deflat直接使用github项目的脚本即可,参数传入需要解混淆的函数首地址</li>
<li>去虚假控制流学到个骚操作–直接修改混淆的全局变量为const类型</li>
<li>最后的加密算法是CRC64<br>算是了解到了CRC64如何逆,并不复杂</li>
</ol>
<h2 id="尝试复现N1CTF-N1LLua"><a href="#尝试复现N1CTF-N1LLua" class="headerlink" title="尝试复现N1CTF-N1LLua"></a>尝试复现N1CTF-N1LLua</h2><ol>
<li>了解到一点点lua逆向知识,代码存储在resources.assets文件中</li>
<li>可以通过unluac.jar进行解包和反汇编</li>
<li>这题用lua5.3套了一个lua5.2<br> 外部代码加载内部函数的16进制码并运行<br>明天配置一下lua的环境</li>
</ol>
<h2 id="看了下n1go"><a href="#看了下n1go" class="headerlink" title="看了下n1go"></a>看了下n1go</h2><p>好抽象,wp代码复制下来运行不了,代码也看不懂,4万行代码如何手撕是个问题,晚点再看</p>
<h1 id="明日计划"><a href="#明日计划" class="headerlink" title="明日计划"></a>明日计划</h1><ol>
<li>复现N1LLua</li>
<li>开发第一个ebpf程序</li>
</ol>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>polyre</title>
    <url>/2023/10/24/%E9%A2%98%E7%9B%AE/OLLVM/polyre/</url>
    <content><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol>
<li><a href="https://security.tencent.com/index.php/blog/msg/112">利用符号执行去除控制流平坦化</a></li>
<li><a href="https://blog.csdn.net/liuxiaohuai_/article/details/114369681">buuctf [RoarCTF2019]polyre</a></li>
</ol>
<h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><p>映入眼帘的是非常生草的执行流</p>
<p><img src="/2023/10/24/%E9%A2%98%E7%9B%AE/OLLVM/polyre/1_main.png" alt="1_main"></p>
<h1 id="deflat"><a href="#deflat" class="headerlink" title="deflat"></a>deflat</h1><p>deflat脚本项目地址<a href="https://github.com/pcy190/deflat">https://github.com/pcy190/deflat</a></p>
<p>首先要安装angr</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install angr</span><br></pre></td></tr></table></figure>

<p>然后直接使用脚本去平坦化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python deflat.py polyre 0x400620 #需要去混淆的函数首地址</span><br></pre></td></tr></table></figure>



<p><img src="/2023/10/24/%E9%A2%98%E7%9B%AE/OLLVM/polyre/2_deflat.png" alt="2_deflat"></p>
<p>去混淆成功</p>
<p><img src="/2023/10/24/%E9%A2%98%E7%9B%AE/OLLVM/polyre/3_deflatSuccess.png" alt="3_deflatSuccess"></p>
<h1 id="去除虚假控制流"><a href="#去除虚假控制流" class="headerlink" title="去除虚假控制流"></a>去除虚假控制流</h1><p>可以发现还有虚假控制流干扰</p>
<p><img src="/2023/10/24/%E9%A2%98%E7%9B%AE/OLLVM/polyre/4_%E8%99%9A%E5%81%87%E6%89%A7%E8%A1%8C%E6%B5%81.png" alt="4_虚假执行流"></p>
<p>跟进603054这个变量,patch其值为0,回来修改类型为const int即可反混淆</p>
<p><img src="/2023/10/24/%E9%A2%98%E7%9B%AE/OLLVM/polyre/5_603054.png" alt="5_603054"></p>
<p>得到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// [rsp+1E0h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1E8h] [rbp-108h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">48</span>]; <span class="comment">// [rsp+1F0h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">60</span>]; <span class="comment">// [rsp+220h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+25Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+260h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+26Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// [rsp+272h] [rbp-7Eh]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+273h] [rbp-7Dh]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+274h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *v16; <span class="comment">// [rsp+278h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+284h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+288h] [rbp-68h]</span></span><br><span class="line">  <span class="type">bool</span> v19; <span class="comment">// [rsp+28Fh] [rbp-61h]</span></span><br><span class="line">  <span class="type">char</span> *v20; <span class="comment">// [rsp+290h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+298h] [rbp-58h]</span></span><br><span class="line">  <span class="type">bool</span> v22; <span class="comment">// [rsp+29Fh] [rbp-51h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+2A0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">bool</span> v24; <span class="comment">// [rsp+2AFh] [rbp-41h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+2B0h] [rbp-40h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+2B8h] [rbp-38h]</span></span><br><span class="line">  __int64 v27; <span class="comment">// [rsp+2C0h] [rbp-30h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+2C8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+2D0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+2D4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// [rsp+2D8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [rsp+2E0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+2E4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">bool</span> v34; <span class="comment">// [rsp+2EBh] [rbp-5h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  v11 = input;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = i;</span><br><span class="line">    v13 = i &lt; <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">64</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v14 = input[i];</span><br><span class="line">    v15 = v14;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">10</span> )						<span class="comment">//找到换行符</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = &amp;input[i];</span><br><span class="line">      *v16 = <span class="number">0</span>;                                 <span class="comment">//换行符处置零</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )                          </span><br><span class="line">  &#123;</span><br><span class="line">    v18 = j;</span><br><span class="line">    v19 = j &lt; <span class="number">6</span>;							<span class="comment">// 6*8字节=48字符</span></span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v20 = input;</span><br><span class="line">    v4 = *(_QWORD *)&amp;input[<span class="number">8</span> * j];              <span class="comment">// 8字节一组</span></span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )                        <span class="comment">// 每8字节进行CRC64运算</span></span><br><span class="line">    &#123;</span><br><span class="line">      v21 = k;</span><br><span class="line">      v22 = k &lt; <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">64</span> )                            <span class="comment">// 64是对于8字节的每一位都要进行运算</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v23 = v4;</span><br><span class="line">      v24 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &gt;= <span class="number">0</span> )                            <span class="comment">// 最高位为0,则无法继续除法</span></span><br><span class="line">      &#123;</span><br><span class="line">        v27 = v4;</span><br><span class="line">        v28 = <span class="number">2</span> * v4;                           <span class="comment">// 直接左移1位</span></span><br><span class="line">        v4 *= <span class="number">2LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                      <span class="comment">// 最高位为1,可以继续除法</span></span><br><span class="line">      &#123;</span><br><span class="line">        v25 = <span class="number">2</span> * v4;</span><br><span class="line">        v26 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 = (<span class="number">2</span> * v4) ^ <span class="number">0xB0004B7679FA26B3</span>LL;   <span class="comment">// 先左移位再异或,即模二除法</span></span><br><span class="line">      &#125;</span><br><span class="line">      v29 = k;</span><br><span class="line">    &#125;                                           <span class="comment">// 进行crc64运算,得到冗余校验码</span></span><br><span class="line">    v30 = <span class="number">8</span> * j;</span><br><span class="line">    v31 = &amp;s1[<span class="number">8</span> * j];</span><br><span class="line">    *(_QWORD *)v31 = v4;                        <span class="comment">// 保存值</span></span><br><span class="line">    v32 = j + <span class="number">1</span>;                                <span class="comment">// 下一个八字节</span></span><br><span class="line">  &#125;</span><br><span class="line">  v33 = <span class="built_in">memcmp</span>(s1, qword_402170, <span class="number">48uLL</span>);		<span class="comment">//和密文比较</span></span><br><span class="line">  v34 = v33 != <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v33 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CRC64"><a href="#CRC64" class="headerlink" title="CRC64"></a>CRC64</h1><p>通过分析得知这是一个CRC64算法</p>
<p>通过对输入的数据进行CRC64计算并和密文比较</p>
<p>那么求明文只需要对密文进行CRC64运算即可</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#密文数组</span></span><br><span class="line">secret = [<span class="number">0xBC8FF26D43536296</span>, <span class="number">0x520100780530EE16</span>, <span class="number">0x4DC0B5EA935F08EC</span>,</span><br><span class="line">          <span class="number">0x342B90AFD853F450</span>, <span class="number">0x8B250EBCAA2C3681</span>, <span class="number">0x55759F81A2C68AE4</span>]</span><br><span class="line"><span class="comment">#crc产生式</span></span><br><span class="line">key = <span class="number">0xB0004B7679FA26B3</span> <span class="comment">#注意产生式的最低位为1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于每个8字节数据,进行64位的CRC64运算</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> secret:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        sign = s &amp; <span class="number">1</span><span class="comment">#校验码最低位为1 则说明原始数据这一位为1</span></span><br><span class="line">        <span class="keyword">if</span> sign == <span class="number">1</span>:</span><br><span class="line">            s ^= key<span class="comment">#如果原始数据该位为1则说明进行异或,否则直接跳过</span></span><br><span class="line">        s //= <span class="number">2</span>		<span class="comment">##判断下一个</span></span><br><span class="line">        <span class="comment"># 补上原始数据这一位的1</span></span><br><span class="line">        <span class="keyword">if</span> sign == <span class="number">1</span>:</span><br><span class="line">            s |= <span class="number">0x8000000000000000</span> <span class="comment">#1000 ... 0000 64位</span></span><br><span class="line">    <span class="comment"># 64次运算后得到原始8字节数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(s))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原字符数据</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="number">8</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(s&amp;<span class="number">0xFF</span>)</span><br><span class="line">        s &gt;&gt;= <span class="number">8</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)<span class="comment">#flag&#123;6ff29390-6c20-4c56-ba70-a95758e3d1f8&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为什么是这么逆运算需要解释一下</p>
<p>例如数据1011 0110 产生式1001 0010 这种就是模拟这题的情况: <strong>产生式和原始数据位数相同</strong></p>
<p>由于是从最高位开始判断,每次运算后都进行一次左移</p>
<p>当进行到第0位时,此时数据位为0,生成的余数已有7位,再左移一位得到8位数据</p>
<p>到这题的情况,产生式是0xB0004B7679FA26B3,<strong>最低位为1</strong></p>
<p>对于原始数据的最低位:</p>
<p>若为0,此时已经有63位数据,直接左移一位得到64位数据,显然这个数据最低位为0(直接左移得到)</p>
<p>若为1,此时已经有63位数据,先左移一位得到64位(最低位为0),再和0xB0004B7679FA26B3异或(最低位必定变成1)</p>
<p>所以对于密文的最低位:</p>
<p>若为0,则说明原始数据这一位是0</p>
<p>若为1,则说明原始数据这一位是1</p>
<p>逆运算时:</p>
<p>密文无论如何都右移一位,如果最低位为0则不做处理,如果为1则需要在最高位处补上1</p>
]]></content>
      <categories>
        <category>OLLVM</category>
      </categories>
      <tags>
        <tag>OLLVM</tag>
        <tag>CRC64</tag>
      </tags>
  </entry>
  <entry>
    <title>N1CTF2023-N1LLua</title>
    <url>/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/</url>
    <content><![CDATA[<h1 id="N1LLua"><a href="#N1LLua" class="headerlink" title="N1LLua"></a>N1LLua</h1><h2 id="提取lua字节码"><a href="#提取lua字节码" class="headerlink" title="提取lua字节码"></a>提取lua字节码</h2><p>使用UABE<a href="https://github.com/SeriousCache/UABE">https://github.com/SeriousCache/UABE</a> 最新的3.0beta1版</p>
<p><strong>注意这里要用插件里Export导出为main.luac 用上面两个export选项会失败(吐血)</strong></p>
<p><img src="/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/0_%E6%8F%90%E5%8F%96lua%E4%BB%A3%E7%A0%81.png" alt="0_提取lua代码"></p>
<h2 id="反编译字节码"><a href="#反编译字节码" class="headerlink" title="反编译字节码"></a>反编译字节码</h2><p>使用unluac,下载地址<a href="https://sourceforge.net/projects/unluac/">https://sourceforge.net/projects/unluac/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar unluac_2023_09_20.jar  main.luac &gt; main.lua</span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/1_%E8%8E%B7%E5%8F%96mainlua.png" alt="1_获取mainlua"></p>
<p>分析可以得知main.lua是lua5.3,加载了lua5.2的代码</p>
<p>L2_2这段十六进制字符串就是新的luac字节码</p>
<p><img src="/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/2_load.png" alt="2_load"></p>
<p>将十六进制输出为新的文件</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 16进制数据字符串</span></span><br><span class="line">hex_string = <span class="string">&quot;1b4c7561520001040804080019930d0a1a0a0a0000005f000000000102090000002500000008000080254000000800808006404000660000001e0000001f0000001f00800002000000040800000000000000656e6372797074000405000000000000006d61696e00020000002b0000003a0000000300132e000000cd004001c7c000000d414001070101004181000081c10000c701c0000742c0004702c1008742c100c10200000183010041030000e10206804d818102c6c34100c703c20706c4410007044208524441024dc481088d4401021d848001524442024d048208dd838001cdc08301c6c34100c703c20706c44100070442085244c1014d4482088d4481011d8480015244c2014d848208dd8380010dc10302e042f97fcd0240010d434001400380010a0001060a4083051f0080000a00000003000000000000f03f0300000000000000400300000000000000000300002037efc6e34103000000000000084003000000000000104003000000000000404004060000000000000062697433320004050000000000000062786f7200030000000000001440000000000100000000000a0000000000000040746573742e6c7561002e0000002c0000002c0000002c0000002c0000002d0000002e0000002f0000002f0000002f0000002f00000031000000310000003100000031000000320000003500000035000000350000003500000035000000350000003500000035000000350000003500000035000000350000003600000036000000360000003600000036000000360000003600000036000000360000003600000036000000360000003100000039000000390000003900000039000000390000003a0000000f00000002000000000000007600000000002e00000002000000000000006b00000000002e00000002000000000000007000000000002e0000000300000000000000763000040000002e0000000300000000000000763100040000002e000000040000000000000073756d00050000002e000000060000000000000064656c746100060000002e00000003000000000000006b30000a0000002e00000003000000000000006b31000a0000002e00000003000000000000006b32000a0000002e00000003000000000000006b33000a0000002e0000000c0000000000000028666f7220696e64657829000d000000280000000c0000000000000028666f72206c696d697429000d000000280000000b0000000000000028666f72207374657029000d00000028000000020000000000000069000e000000270000000100000005000000000000005f454e56004d0000005c00000001000b140000004b00000281000000c14000000181000041c100006440000280000000c1000100150100010e41410241810100e1000180c6c14100000200014002800080020003dd410002e040fe7f9f0000011f00800008000000030000e0dfb7d5eb41030000c057d75fe941030000c01bb8d5eb41030000e01f0200e84103000000000000000003000000000000f03f030000000000000040040800000000000000656e637279707400000000000100000000000a0000000000000040746573742e6c756100140000005000000050000000500000005000000050000000500000005100000053000000530000005300000053000000530000005400000054000000540000005400000054000000530000005b0000005c0000000700000002000000000000007800000000001400000002000000000000006b0006000000140000000200000000000000760007000000140000000c0000000000000028666f7220696e64657829000b000000120000000c0000000000000028666f72206c696d697429000b000000120000000b0000000000000028666f72207374657029000b00000012000000020000000000000069000c000000110000000100000005000000000000005f454e56000100000000000a0000000000000040746573742e6c756100090000003a0000002b0000005c0000004d0000005e0000005e0000005e0000005e0000005f000000000000000100000005000000000000005f454e5600&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将16进制字符串转换为字节数据</span></span><br><span class="line">byte_data = <span class="built_in">bytes</span>.fromhex(hex_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字节数据写入文件</span></span><br><span class="line">file_path = <span class="string">&quot;main2.luac&quot;</span>  <span class="comment"># 输出文件路径</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(byte_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;16进制数据已写入文件：<span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="分析加载的代码"><a href="#分析加载的代码" class="headerlink" title="分析加载的代码"></a>分析加载的代码</h2><p>先反编译一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar unluac_2023_09_20.jar main2.luac &gt; main2.lua</span><br></pre></td></tr></table></figure>

<p>可以看到基本逻辑像是tea加密</p>
<p>但值得注意的是这个for循环里的不是标准tea,v1^4是v1的四次方</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">(v, k, p)</span></span></span><br><span class="line">  <span class="keyword">local</span> v0, v1 = v[p + <span class="number">1</span>], v[p + <span class="number">2</span>]</span><br><span class="line">  <span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">local</span> delta = <span class="number">2654435769</span></span><br><span class="line">  <span class="keyword">local</span> k0, k1, k2, k3 = k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>], k[<span class="number">4</span>]</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">32</span> <span class="keyword">do</span></span><br><span class="line">    sum = sum + delta</span><br><span class="line">    v0 = v0 + bit32.bxor(bit32.bxor(v1 ^ <span class="number">4</span> + k0, v1 + sum), v1 ^ <span class="number">5</span> + k1)</span><br><span class="line">    v1 = v1 + bit32.bxor(bit32.bxor(v0 ^ <span class="number">4</span> + k2, v0 + sum), v0 ^ <span class="number">5</span> + k3)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  v[p + <span class="number">1</span>], v[p + <span class="number">2</span>] = v0, v1</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="keyword">local</span> k = &#123;</span><br><span class="line">    <span class="number">3735928575</span>,</span><br><span class="line">    <span class="number">3405691582</span>,</span><br><span class="line">    <span class="number">3735929054</span>,</span><br><span class="line">    <span class="number">3221229823</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">local</span> v = x</span><br><span class="line">  <span class="keyword">for</span> i = <span class="number">0</span>, #v - <span class="number">1</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    encrypt(v, k, i)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> main(...)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改加载代码的汇编码"><a href="#修改加载代码的汇编码" class="headerlink" title="修改加载代码的汇编码"></a>修改加载代码的汇编码</h2><p>这一步是为了将encrypt函数变成decrypt函数</p>
<p>由于修改lua文件无法编译得到对应的luac文件,所以可以先输出luac对应的汇编代码并进行修改,再输出为luac文件</p>
<p>反编译字节码得汇编码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar unluac_2023_09_20.jar --disassemble main2.luac &gt; main2.luaasm</span><br></pre></td></tr></table></figure>

<p>分析一下汇编码</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">.version	<span class="number">5.2</span>	<span class="comment">--lua版本</span></span><br><span class="line"></span><br><span class="line">.<span class="built_in">format</span>	<span class="number">0</span>		<span class="comment">--字节码格式</span></span><br><span class="line">.endianness	LITTLE	<span class="comment">--小端序</span></span><br><span class="line">.int_size	<span class="number">4</span>		<span class="comment">--整数字节大小</span></span><br><span class="line">.size_t_size	<span class="number">8</span>	<span class="comment">--数据类型字节大小</span></span><br><span class="line">.instruction_size	<span class="number">4</span>	<span class="comment">--指令字节大小</span></span><br><span class="line">.number_format	float	<span class="number">8</span>	<span class="comment">--数字格式为浮点数,大小8字节</span></span><br><span class="line"></span><br><span class="line">.function	main	</span><br><span class="line"></span><br><span class="line">.linedefined	<span class="number">10</span>		<span class="comment">--函数字节码起始行</span></span><br><span class="line">.lastlinedefined	<span class="number">95</span>	 <span class="comment">--函数字节码结束行</span></span><br><span class="line">.numparams	<span class="number">0</span>			<span class="comment">--没有显式参数(无参)</span></span><br><span class="line">.is_vararg	<span class="number">1</span>			<span class="comment">--变长参数</span></span><br><span class="line">.maxstacksize	<span class="number">2</span>		<span class="comment">--最大栈大小</span></span><br><span class="line">.source	<span class="string">&quot;@test.lua&quot;</span>		<span class="comment">--来源于哪个源文件</span></span><br><span class="line"></span><br><span class="line">.upvalue	<span class="string">&quot;_ENV&quot;</span>	<span class="number">0</span>	<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">.constant	k0	<span class="string">&quot;encrypt&quot;</span>	<span class="comment">--k0作为字符串常量encrypt的索引</span></span><br><span class="line">.constant	k1	<span class="string">&quot;main&quot;</span>		<span class="comment">--k1表示字符串main</span></span><br><span class="line"></span><br><span class="line">.line	<span class="number">58</span>	closure       r0    f0	<span class="comment">--函数f0暂存到r0寄存器</span></span><br><span class="line">.line	<span class="number">43</span>	settabup      u0    k0    r0 ; k0 = <span class="string">&quot;encrypt&quot;</span> <span class="comment">--f0和encrypt绑定(即encrypt函数)</span></span><br><span class="line">.line	<span class="number">92</span>	closure       r0    f1</span><br><span class="line">.line	<span class="number">77</span>	settabup      u0    k1    r0 ; k1 = <span class="string">&quot;main&quot;</span></span><br><span class="line">.line	<span class="number">94</span>	gettabup      r0    u0    k1 ; k1 = <span class="string">&quot;main&quot;</span>	<span class="comment">--f1即用户入口main函数</span></span><br><span class="line">.line	<span class="number">94</span>	vararg        r1     <span class="number">0</span></span><br><span class="line">.line	<span class="number">94</span>	tailcall      r0     <span class="number">0</span></span><br><span class="line">.line	<span class="number">94</span>	<span class="keyword">return</span>        r0     <span class="number">0</span></span><br><span class="line">.line	<span class="number">95</span>	<span class="keyword">return</span>        r0     <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--main中函数f0的定义</span></span><br><span class="line">.function	main/f0</span><br><span class="line"></span><br><span class="line">.linedefined	<span class="number">43</span></span><br><span class="line">.lastlinedefined	<span class="number">58</span></span><br><span class="line">.numparams	<span class="number">3</span></span><br><span class="line">.is_vararg	<span class="number">0</span></span><br><span class="line">.maxstacksize	<span class="number">19</span></span><br><span class="line">.source	<span class="string">&quot;@test.lua&quot;</span></span><br><span class="line"></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v&quot;</span>	<span class="number">0</span>	<span class="number">46</span>					<span class="comment">--局部变量v 索引0 作用范围从46行开始</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k&quot;</span>	<span class="number">0</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;p&quot;</span>	<span class="number">0</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v0&quot;</span>	<span class="number">4</span>	<span class="number">46</span>				<span class="comment">--局部变量v0 索引4 作用范围从46行开始</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v1&quot;</span>	<span class="number">4</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;sum&quot;</span>	<span class="number">5</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;delta&quot;</span>	<span class="number">6</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k0&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k1&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k2&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k3&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for index)&quot;</span>	<span class="number">13</span>	<span class="number">40</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for limit)&quot;</span>	<span class="number">13</span>	<span class="number">40</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for step)&quot;</span>	<span class="number">13</span>	<span class="number">40</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;i&quot;</span>	<span class="number">14</span>	<span class="number">39</span></span><br><span class="line"></span><br><span class="line">.upvalue	<span class="string">&quot;_ENV&quot;</span>	<span class="number">0</span>	<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">.constant	k0	<span class="number">1</span></span><br><span class="line">.constant	k1	<span class="number">2</span></span><br><span class="line">.constant	k2	<span class="number">0</span></span><br><span class="line">.constant	k3	<span class="number">2654435769</span></span><br><span class="line">.constant	k4	<span class="number">3</span></span><br><span class="line">.constant	k5	<span class="number">4</span></span><br><span class="line">.constant	k6	<span class="number">32</span></span><br><span class="line">.constant	k7	<span class="string">&quot;bit32&quot;</span></span><br><span class="line">.constant	k8	<span class="string">&quot;bxor&quot;</span></span><br><span class="line">.constant	k9	<span class="number">5</span></span><br><span class="line"></span><br><span class="line">.line	<span class="number">44</span>	add           r3    r2    k0 ; k0 = <span class="number">1</span>		<span class="comment">--r3=r2+k0</span></span><br><span class="line">.line	<span class="number">44</span>	gettable      r3    r0    r3			   <span class="comment">--获取表r0键为r3的值存到r3</span></span><br><span class="line">.line	<span class="number">44</span>	add           r4    r2    k1 ; k1 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">44</span>	gettable      r4    r0    r4</span><br><span class="line">.line	<span class="number">45</span>	loadk         r5    k2 ; k2 = <span class="number">0</span>				<span class="comment">--将k2的值加载到r5</span></span><br><span class="line">.line	<span class="number">46</span>	loadk         r6    k3 ; k3 = <span class="number">2654435769</span></span><br><span class="line">.line	<span class="number">47</span>	gettable      r7    r1    k0 ; k0 = <span class="number">1</span>		<span class="comment">--r1存储数组k</span></span><br><span class="line">.line	<span class="number">47</span>	gettable      r8    r1    k1 ; k1 = <span class="number">2</span>		<span class="comment">--r7-10存储变量k1-k3</span></span><br><span class="line">.line	<span class="number">47</span>	gettable      r9    r1    k4 ; k4 = <span class="number">3</span></span><br><span class="line">.line	<span class="number">47</span>	gettable     r10    r1    k5 ; k5 = <span class="number">4</span></span><br><span class="line">.line	<span class="number">49</span>	loadk        r11    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">49</span>	loadk        r12    k6 ; k6 = <span class="number">32</span></span><br><span class="line">.line	<span class="number">49</span>	loadk        r13    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">49</span>	forprep      r11   l40	<span class="comment">--准备循环,将标签l40和r11寄存器绑定,l40是循环结束处</span></span><br><span class="line">.label	l15	<span class="comment">--循环标签,标记循环开始</span></span><br><span class="line">.line	<span class="number">50</span>	add           r5    r5    r6	<span class="comment">--sum+=delta</span></span><br><span class="line">.line	<span class="number">53</span>	gettabup     r15    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span>	<span class="comment">--将bit32函数从u0中提取到r15</span></span><br><span class="line">.line	<span class="number">53</span>	gettable     r15   r15    k8 ; k8 = <span class="string">&quot;bxor&quot;</span>	<span class="comment">--从bit32中提取bxor函数到r</span></span><br><span class="line">.line	<span class="number">53</span>	gettabup     r16    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span>	<span class="comment">--从u0提取bit32</span></span><br><span class="line">.line	<span class="number">53</span>	gettable     r16   r16    k8 ; k8 = <span class="string">&quot;bxor&quot;</span>	<span class="comment">--从bit32提取bxor到r16</span></span><br><span class="line">.line	<span class="number">53</span>	<span class="built_in">pow</span>          r17    r4    k5 ; k5 = <span class="number">4</span></span><br><span class="line">.line	<span class="number">53</span>	add          r17   r17    r7</span><br><span class="line">.line	<span class="number">53</span>	add          r18    r4    r5</span><br><span class="line">.line	<span class="number">53</span>	call         r16     <span class="number">3</span>     <span class="number">2</span><span class="comment">--调用r16存储的函数,有3个参数,2个期望返回值</span></span><br><span class="line">.line	<span class="number">53</span>	<span class="built_in">pow</span>          r17    r4    k9 ; k9 = <span class="number">5</span></span><br><span class="line">.line	<span class="number">53</span>	add          r17   r17    r8</span><br><span class="line">.line	<span class="number">53</span>	call         r15     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">53</span>	add           r3    r3   r15</span><br><span class="line">.line	<span class="number">54</span>	gettabup     r15    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	gettable     r15   r15    k8 ; k8 = <span class="string">&quot;bxor&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	gettabup     r16    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	gettable     r16   r16    k8 ; k8 = <span class="string">&quot;bxor&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	<span class="built_in">pow</span>          r17    r3    k5 ; k5 = <span class="number">4</span></span><br><span class="line">.line	<span class="number">54</span>	add          r17   r17    r9</span><br><span class="line">.line	<span class="number">54</span>	add          r18    r3    r5</span><br><span class="line">.line	<span class="number">54</span>	call         r16     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">54</span>	<span class="built_in">pow</span>          r17    r3    k9 ; k9 = <span class="number">5</span></span><br><span class="line">.line	<span class="number">54</span>	add          r17   r17   r10</span><br><span class="line">.line	<span class="number">54</span>	call         r15     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">54</span>	add           r4    r4   r15</span><br><span class="line">.label	l40		<span class="comment">--循环标签,标记循环结束</span></span><br><span class="line">.line	<span class="number">49</span>	forloop      r11   l15</span><br><span class="line">.line	<span class="number">57</span>	add          r11    r2    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">57</span>	add          r12    r2    k1 ; k1 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">57</span>	move         r13    r3</span><br><span class="line">.line	<span class="number">57</span>	settable      r0   r12    r4</span><br><span class="line">.line	<span class="number">57</span>	settable      r0   r11   r13</span><br><span class="line">.line	<span class="number">58</span>	<span class="keyword">return</span>        r0     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.function	main/f1</span><br><span class="line"></span><br><span class="line">.linedefined	<span class="number">77</span></span><br><span class="line">.lastlinedefined	<span class="number">92</span></span><br><span class="line">.numparams	<span class="number">1</span></span><br><span class="line">.is_vararg	<span class="number">0</span></span><br><span class="line">.maxstacksize	<span class="number">11</span></span><br><span class="line">.source	<span class="string">&quot;@test.lua&quot;</span></span><br><span class="line"></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;x&quot;</span>	<span class="number">0</span>	<span class="number">20</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k&quot;</span>	<span class="number">6</span>	<span class="number">20</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v&quot;</span>	<span class="number">7</span>	<span class="number">20</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for index)&quot;</span>	<span class="number">11</span>	<span class="number">18</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for limit)&quot;</span>	<span class="number">11</span>	<span class="number">18</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for step)&quot;</span>	<span class="number">11</span>	<span class="number">18</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;i&quot;</span>	<span class="number">12</span>	<span class="number">17</span></span><br><span class="line"></span><br><span class="line">.upvalue	<span class="string">&quot;_ENV&quot;</span>	<span class="number">0</span>	<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">.constant	k0	<span class="number">3735928575</span></span><br><span class="line">.constant	k1	<span class="number">3405691582</span></span><br><span class="line">.constant	k2	<span class="number">3735929054</span></span><br><span class="line">.constant	k3	<span class="number">3221229823</span></span><br><span class="line">.constant	k4	<span class="number">0</span></span><br><span class="line">.constant	k5	<span class="number">1</span></span><br><span class="line">.constant	k6	<span class="number">2</span></span><br><span class="line">.constant	k7	<span class="string">&quot;encrypt&quot;</span></span><br><span class="line"></span><br><span class="line">.line	<span class="number">80</span>	newtable      r1     <span class="number">4</span>     <span class="number">0</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r2    k0 ; k0 = <span class="number">3735928575</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r3    k1 ; k1 = <span class="number">3405691582</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r4    k2 ; k2 = <span class="number">3735929054</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r5    k3 ; k3 = <span class="number">3221229823</span></span><br><span class="line">.line	<span class="number">80</span>	setlist       r1     <span class="number">4</span>     <span class="number">1</span></span><br><span class="line">.line	<span class="number">81</span>	move          r2    r0</span><br><span class="line">.line	<span class="number">83</span>	loadk         r3    k4 ; k4 = <span class="number">0</span></span><br><span class="line">.line	<span class="number">83</span>	<span class="built_in">len</span>           r4    r2</span><br><span class="line">.line	<span class="number">83</span>	<span class="built_in">sub</span>           r4    r4    k5 ; k5 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">83</span>	loadk         r5    k6 ; k6 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">83</span>	forprep       r3   l18</span><br><span class="line">.label	l13</span><br><span class="line">.line	<span class="number">84</span>	gettabup      r7    u0    k7 ; k7 = <span class="string">&quot;encrypt&quot;</span></span><br><span class="line">.line	<span class="number">84</span>	move          r8    r2</span><br><span class="line">.line	<span class="number">84</span>	move          r9    r1</span><br><span class="line">.line	<span class="number">84</span>	move         r10    r6</span><br><span class="line">.line	<span class="number">84</span>	call          r7     <span class="number">4</span>     <span class="number">1</span></span><br><span class="line">.label	l18</span><br><span class="line">.line	<span class="number">83</span>	forloop       r3   l13</span><br><span class="line">.line	<span class="number">91</span>	<span class="keyword">return</span>        r2     <span class="number">2</span></span><br><span class="line">.line	<span class="number">92</span>	<span class="keyword">return</span>        r0     <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>可以将encrypt内部的类tea加密修改为解密,直接将整行的代码块挪动位置,修改部分关键指令即可</p>
<ol>
<li><p>修改最初的main&#x2F;f0的.constant	k2	0为84941944608(sum+&#x3D;delta 进行32次循环后)</p>
</li>
<li><p>将line50提到line53下面,再将line54的代码全部提到line53上面</p>
</li>
<li><p>将line50 line54 line53这三段代码最后的add修改为sub</p>
</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">.version	<span class="number">5.2</span></span><br><span class="line"></span><br><span class="line">.<span class="built_in">format</span>	<span class="number">0</span></span><br><span class="line">.endianness	LITTLE</span><br><span class="line">.int_size	<span class="number">4</span></span><br><span class="line">.size_t_size	<span class="number">8</span></span><br><span class="line">.instruction_size	<span class="number">4</span></span><br><span class="line">.number_format	float	<span class="number">8</span></span><br><span class="line"></span><br><span class="line">.function	main</span><br><span class="line"></span><br><span class="line">.linedefined	<span class="number">10</span></span><br><span class="line">.lastlinedefined	<span class="number">95</span></span><br><span class="line">.numparams	<span class="number">0</span></span><br><span class="line">.is_vararg	<span class="number">1</span></span><br><span class="line">.maxstacksize	<span class="number">2</span></span><br><span class="line">.source	<span class="string">&quot;@test.lua&quot;</span></span><br><span class="line"></span><br><span class="line">.upvalue	<span class="string">&quot;_ENV&quot;</span>	<span class="number">0</span>	<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">.constant	k0	<span class="string">&quot;encrypt&quot;</span></span><br><span class="line">.constant	k1	<span class="string">&quot;main&quot;</span></span><br><span class="line"></span><br><span class="line">.line	<span class="number">58</span>	closure       r0    f0</span><br><span class="line">.line	<span class="number">43</span>	settabup      u0    k0    r0 ; k0 = <span class="string">&quot;encrypt&quot;</span></span><br><span class="line">.line	<span class="number">92</span>	closure       r0    f1</span><br><span class="line">.line	<span class="number">77</span>	settabup      u0    k1    r0 ; k1 = <span class="string">&quot;main&quot;</span></span><br><span class="line">.line	<span class="number">94</span>	gettabup      r0    u0    k1 ; k1 = <span class="string">&quot;main&quot;</span></span><br><span class="line">.line	<span class="number">94</span>	vararg        r1     <span class="number">0</span></span><br><span class="line">.line	<span class="number">94</span>	tailcall      r0     <span class="number">0</span></span><br><span class="line">.line	<span class="number">94</span>	<span class="keyword">return</span>        r0     <span class="number">0</span></span><br><span class="line">.line	<span class="number">95</span>	<span class="keyword">return</span>        r0     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.function	main/f0</span><br><span class="line"></span><br><span class="line">.linedefined	<span class="number">43</span></span><br><span class="line">.lastlinedefined	<span class="number">58</span></span><br><span class="line">.numparams	<span class="number">3</span></span><br><span class="line">.is_vararg	<span class="number">0</span></span><br><span class="line">.maxstacksize	<span class="number">19</span></span><br><span class="line">.source	<span class="string">&quot;@test.lua&quot;</span></span><br><span class="line"></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v&quot;</span>	<span class="number">0</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k&quot;</span>	<span class="number">0</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;p&quot;</span>	<span class="number">0</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v0&quot;</span>	<span class="number">4</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v1&quot;</span>	<span class="number">4</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;sum&quot;</span>	<span class="number">5</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;delta&quot;</span>	<span class="number">6</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k0&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k1&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k2&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k3&quot;</span>	<span class="number">10</span>	<span class="number">46</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for index)&quot;</span>	<span class="number">13</span>	<span class="number">40</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for limit)&quot;</span>	<span class="number">13</span>	<span class="number">40</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for step)&quot;</span>	<span class="number">13</span>	<span class="number">40</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;i&quot;</span>	<span class="number">14</span>	<span class="number">39</span></span><br><span class="line"></span><br><span class="line">.upvalue	<span class="string">&quot;_ENV&quot;</span>	<span class="number">0</span>	<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">.constant	k0	<span class="number">1</span></span><br><span class="line">.constant	k1	<span class="number">2</span></span><br><span class="line">.constant	k2	<span class="number">84941944608</span></span><br><span class="line">.constant	k3	<span class="number">2654435769</span></span><br><span class="line">.constant	k4	<span class="number">3</span></span><br><span class="line">.constant	k5	<span class="number">4</span></span><br><span class="line">.constant	k6	<span class="number">32</span></span><br><span class="line">.constant	k7	<span class="string">&quot;bit32&quot;</span></span><br><span class="line">.constant	k8	<span class="string">&quot;bxor&quot;</span></span><br><span class="line">.constant	k9	<span class="number">5</span></span><br><span class="line"></span><br><span class="line">.line	<span class="number">44</span>	add           r3    r2    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">44</span>	gettable      r3    r0    r3</span><br><span class="line">.line	<span class="number">44</span>	add           r4    r2    k1 ; k1 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">44</span>	gettable      r4    r0    r4</span><br><span class="line">.line	<span class="number">45</span>	loadk         r5    k2 ; k2 = <span class="number">0</span></span><br><span class="line">.line	<span class="number">46</span>	loadk         r6    k3 ; k3 = <span class="number">2654435769</span></span><br><span class="line">.line	<span class="number">47</span>	gettable      r7    r1    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">47</span>	gettable      r8    r1    k1 ; k1 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">47</span>	gettable      r9    r1    k4 ; k4 = <span class="number">3</span></span><br><span class="line">.line	<span class="number">47</span>	gettable     r10    r1    k5 ; k5 = <span class="number">4</span></span><br><span class="line">.line	<span class="number">49</span>	loadk        r11    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">49</span>	loadk        r12    k6 ; k6 = <span class="number">32</span></span><br><span class="line">.line	<span class="number">49</span>	loadk        r13    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">49</span>	forprep      r11   l40</span><br><span class="line">.label	l15</span><br><span class="line"></span><br><span class="line">.line	<span class="number">54</span>	gettabup     r15    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	gettable     r15   r15    k8 ; k8 = <span class="string">&quot;bxor&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	gettabup     r16    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	gettable     r16   r16    k8 ; k8 = <span class="string">&quot;bxor&quot;</span></span><br><span class="line">.line	<span class="number">54</span>	<span class="built_in">pow</span>          r17    r3    k5 ; k5 = <span class="number">4</span></span><br><span class="line">.line	<span class="number">54</span>	add          r17   r17    r9</span><br><span class="line">.line	<span class="number">54</span>	add          r18    r3    r5</span><br><span class="line">.line	<span class="number">54</span>	call         r16     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">54</span>	<span class="built_in">pow</span>          r17    r3    k9 ; k9 = <span class="number">5</span></span><br><span class="line">.line	<span class="number">54</span>	add          r17   r17   r10</span><br><span class="line">.line	<span class="number">54</span>	call         r15     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">54</span>	<span class="built_in">sub</span>           r4    r4   r15</span><br><span class="line">        </span><br><span class="line">.line	<span class="number">53</span>	gettabup     r15    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span></span><br><span class="line">.line	<span class="number">53</span>	gettable     r15   r15    k8 ; k8 = <span class="string">&quot;bxor&quot;</span></span><br><span class="line">.line	<span class="number">53</span>	gettabup     r16    u0    k7 ; k7 = <span class="string">&quot;bit32&quot;</span></span><br><span class="line">.line	<span class="number">53</span>	gettable     r16   r16    k8 ; k8 = <span class="string">&quot;bxor&quot;</span></span><br><span class="line">.line	<span class="number">53</span>	<span class="built_in">pow</span>          r17    r4    k5 ; k5 = <span class="number">4</span></span><br><span class="line">.line	<span class="number">53</span>	add          r17   r17    r7</span><br><span class="line">.line	<span class="number">53</span>	add          r18    r4    r5</span><br><span class="line">.line	<span class="number">53</span>	call         r16     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">53</span>	<span class="built_in">pow</span>          r17    r4    k9 ; k9 = <span class="number">5</span></span><br><span class="line">.line	<span class="number">53</span>	add          r17   r17    r8</span><br><span class="line">.line	<span class="number">53</span>	call         r15     <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">.line	<span class="number">53</span>	<span class="built_in">sub</span>           r3    r3   r15</span><br><span class="line"></span><br><span class="line">.line	<span class="number">50</span>	<span class="built_in">sub</span>           r5    r5    r6		</span><br><span class="line">        </span><br><span class="line">.label	l40</span><br><span class="line">.line	<span class="number">49</span>	forloop      r11   l15</span><br><span class="line">.line	<span class="number">57</span>	add          r11    r2    k0 ; k0 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">57</span>	add          r12    r2    k1 ; k1 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">57</span>	move         r13    r3</span><br><span class="line">.line	<span class="number">57</span>	settable      r0   r12    r4</span><br><span class="line">.line	<span class="number">57</span>	settable      r0   r11   r13</span><br><span class="line">.line	<span class="number">58</span>	<span class="keyword">return</span>        r0     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">.function	main/f1</span><br><span class="line"></span><br><span class="line">.linedefined	<span class="number">77</span></span><br><span class="line">.lastlinedefined	<span class="number">92</span></span><br><span class="line">.numparams	<span class="number">1</span></span><br><span class="line">.is_vararg	<span class="number">0</span></span><br><span class="line">.maxstacksize	<span class="number">11</span></span><br><span class="line">.source	<span class="string">&quot;@test.lua&quot;</span></span><br><span class="line"></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;x&quot;</span>	<span class="number">0</span>	<span class="number">20</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;k&quot;</span>	<span class="number">6</span>	<span class="number">20</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;v&quot;</span>	<span class="number">7</span>	<span class="number">20</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for index)&quot;</span>	<span class="number">11</span>	<span class="number">18</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for limit)&quot;</span>	<span class="number">11</span>	<span class="number">18</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;(for step)&quot;</span>	<span class="number">11</span>	<span class="number">18</span></span><br><span class="line">.<span class="keyword">local</span>	<span class="string">&quot;i&quot;</span>	<span class="number">12</span>	<span class="number">17</span></span><br><span class="line"></span><br><span class="line">.upvalue	<span class="string">&quot;_ENV&quot;</span>	<span class="number">0</span>	<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">.constant	k0	<span class="number">3735928575</span></span><br><span class="line">.constant	k1	<span class="number">3405691582</span></span><br><span class="line">.constant	k2	<span class="number">3735929054</span></span><br><span class="line">.constant	k3	<span class="number">3221229823</span></span><br><span class="line">.constant	k4	<span class="number">0</span></span><br><span class="line">.constant	k5	<span class="number">1</span></span><br><span class="line">.constant	k6	<span class="number">2</span></span><br><span class="line">.constant	k7	<span class="string">&quot;encrypt&quot;</span></span><br><span class="line"></span><br><span class="line">.line	<span class="number">80</span>	newtable      r1     <span class="number">4</span>     <span class="number">0</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r2    k0 ; k0 = <span class="number">3735928575</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r3    k1 ; k1 = <span class="number">3405691582</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r4    k2 ; k2 = <span class="number">3735929054</span></span><br><span class="line">.line	<span class="number">80</span>	loadk         r5    k3 ; k3 = <span class="number">3221229823</span></span><br><span class="line">.line	<span class="number">80</span>	setlist       r1     <span class="number">4</span>     <span class="number">1</span></span><br><span class="line">.line	<span class="number">81</span>	move          r2    r0</span><br><span class="line">.line	<span class="number">83</span>	loadk         r3    k4 ; k4 = <span class="number">0</span></span><br><span class="line">.line	<span class="number">83</span>	<span class="built_in">len</span>           r4    r2</span><br><span class="line">.line	<span class="number">83</span>	<span class="built_in">sub</span>           r4    r4    k5 ; k5 = <span class="number">1</span></span><br><span class="line">.line	<span class="number">83</span>	loadk         r5    k6 ; k6 = <span class="number">2</span></span><br><span class="line">.line	<span class="number">83</span>	forprep       r3   l18</span><br><span class="line">.label	l13</span><br><span class="line">.line	<span class="number">84</span>	gettabup      r7    u0    k7 ; k7 = <span class="string">&quot;encrypt&quot;</span></span><br><span class="line">.line	<span class="number">84</span>	move          r8    r2</span><br><span class="line">.line	<span class="number">84</span>	move          r9    r1</span><br><span class="line">.line	<span class="number">84</span>	move         r10    r6</span><br><span class="line">.line	<span class="number">84</span>	call          r7     <span class="number">4</span>     <span class="number">1</span></span><br><span class="line">.label	l18</span><br><span class="line">.line	<span class="number">83</span>	forloop       r3   l13</span><br><span class="line">.line	<span class="number">91</span>	<span class="keyword">return</span>        r2     <span class="number">2</span></span><br><span class="line">.line	<span class="number">92</span>	<span class="keyword">return</span>        r0     <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>将修改后的汇编码编译为字节码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar unluac.jar --assemble main2_patch.luaasm --output main2_patch.luac</span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/3_patch.png" alt="3_patch"></p>
<p>再将luac输出为十六进制串</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_to_hex_string</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        binary_data = file.read()</span><br><span class="line">        hex_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(byte, <span class="string">&#x27;02x&#x27;</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> binary_data)</span><br><span class="line">    <span class="keyword">return</span> hex_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">file_path = <span class="string">r&#x27;E:\HappyBinary\Competitions\N1CTF2023\N1LLua\main2_patch.luac&#x27;</span>  <span class="comment"># 替换为你的二进制文件路径</span></span><br><span class="line">hex_string = binary_to_hex_string(file_path)</span><br><span class="line"><span class="built_in">print</span>(hex_string)</span><br></pre></td></tr></table></figure>

<p>将原来的main.luac用010editor打开,替换掉这段16进制码保存为main_patch.luac</p>
<p>再用UABE导入main_patch.luac,同样也要使用插件里的Import,之后选择保存文件即可</p>
<h2 id="修改Assembly-CSharp-dll"><a href="#修改Assembly-CSharp-dll" class="headerlink" title="修改Assembly-CSharp.dll"></a>修改Assembly-CSharp.dll</h2><p>在n1llua_Data\Managed文件夹内可以找到,该dll内存储的是Unity游戏程序主要逻辑的代码</p>
<p><img src="/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/6_Assembly-CSharp.png" alt="6_Assembly-CSharp"></p>
<p>GPT分析如下</p>
<p>输入字符串后调用lua的encrypt函数进行加密,之后和已有密文进行比较</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tutorial.ByFile</span></span><br><span class="line"><span class="comment">// Token: 0x06000002 RID: 2 RVA: 0x00002054 File Offset: 0x00000254</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Check</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个新的Lua环境</span></span><br><span class="line">    <span class="keyword">this</span>.luaenv = <span class="keyword">new</span> LuaEnv();</span><br><span class="line">    <span class="comment">// 执行Lua脚本，引入&#x27;main&#x27;脚本</span></span><br><span class="line">    <span class="keyword">this</span>.luaenv.DoString(<span class="string">&quot;require &#x27;main&#x27;&quot;</span>, <span class="string">&quot;chunk&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//获取encrypt函数</span></span><br><span class="line">    ByFile.FDelegate fdelegate = <span class="keyword">this</span>.luaenv.Global.Get&lt;ByFile.FDelegate&gt;(<span class="string">&quot;encrypt&quot;</span>);</span><br><span class="line">    <span class="comment">//创建lua表</span></span><br><span class="line">	LuaTable luaTable = <span class="keyword">this</span>.luaenv.NewTable();</span><br><span class="line">    <span class="comment">// 从用户输入中提取的文本</span></span><br><span class="line">    <span class="built_in">string</span> text = <span class="keyword">this</span>.input.text;</span><br><span class="line">    <span class="comment">// 检查文本的格式是否符合预期</span></span><br><span class="line">    <span class="keyword">if</span> (text.Length == <span class="number">23</span> &amp;&amp; text.Substring(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;n1ctf&#123;&quot;</span> &amp;&amp; text.Substring(<span class="number">22</span>, <span class="number">1</span>) == <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果文本符合格式，提取16个字符并转换为字节数组</span></span><br><span class="line">        <span class="built_in">string</span> s = text.Substring(<span class="number">6</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Encoding.ASCII.GetBytes(s);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将字节数组中的每4个字节转换为一个ulong整数，并存储在Lua表中</span></span><br><span class="line">        LuaTable luaTable = <span class="keyword">this</span>.luaenv.NewTable();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            luaTable.Set&lt;<span class="built_in">int</span>, <span class="built_in">ulong</span>&gt;(i + <span class="number">1</span>, (<span class="built_in">ulong</span>)BitConverter.ToUInt32(bytes, i * <span class="number">4</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预定义的ulong数组</span></span><br><span class="line">        <span class="built_in">ulong</span>[] array = <span class="keyword">new</span> <span class="built_in">ulong</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0U</span>L,</span><br><span class="line">            <span class="number">75405591852U</span>L,</span><br><span class="line">            <span class="number">78071625542U</span>L,</span><br><span class="line">            <span class="number">69577277816U</span>L,</span><br><span class="line">            <span class="number">57193980063U</span>L</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Lua函数，传递Lua表作为参数</span></span><br><span class="line">        LuaTable luaTable2 = fdelegate(luaTable);<span class="comment">//encrypt(input)</span></span><br><span class="line">        <span class="comment">//lua表转换为array</span></span><br><span class="line">        luaTable2.Cast&lt;ArrayList&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较Lua函数返回的结果与预定义数组的对应元素</span></span><br><span class="line">        <span class="built_in">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; array.Length; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] != luaTable2.Get&lt;<span class="built_in">int</span>, <span class="built_in">ulong</span>&gt;(j))<span class="comment">//和定义好的数据进行比较</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据比较结果设置文本框的内容</span></span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.result.text = <span class="string">&quot;Congratulations!&quot;</span>;</span><br><span class="line">            <span class="comment">// 释放Lua环境资源</span></span><br><span class="line">       		<span class="keyword">this</span>.luaenv.Dispose();</span><br><span class="line">        	<span class="keyword">this</span>.luaenv = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">// 如果文本不符合格式，设置文本框内容为&quot;Wrong&quot;</span></span><br><span class="line"></span><br><span class="line">    	<span class="keyword">this</span>.result.text = <span class="string">&quot;Wrong&quot;</span>;</span><br><span class="line">    	<span class="keyword">this</span>.luaenv.Dispose();</span><br><span class="line">    	<span class="keyword">this</span>.luaenv = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以修改check逻辑,点击check后让密文调用lua的函数进行解密,之后再在input框输出flag</p>
<p>修改代码</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tutorial.ByFile</span></span><br><span class="line"><span class="comment">// Token: 0x06000002 RID: 2 RVA: 0x00002054 File Offset: 0x00000254</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Check</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>.luaenv = <span class="keyword">new</span> LuaEnv();</span><br><span class="line">	<span class="keyword">this</span>.luaenv.DoString(<span class="string">&quot;require &#x27;main&#x27;&quot;</span>, <span class="string">&quot;chunk&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">	ByFile.FDelegate fdelegate = <span class="keyword">this</span>.luaenv.Global.Get&lt;ByFile.FDelegate&gt;(<span class="string">&quot;encrypt&quot;</span>);</span><br><span class="line">	LuaTable luaTable = <span class="keyword">this</span>.luaenv.NewTable();</span><br><span class="line">	<span class="built_in">ulong</span>[] array = <span class="keyword">new</span> <span class="built_in">ulong</span>[]</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="number">0U</span>L,</span><br><span class="line">		<span class="number">75405591852U</span>L,</span><br><span class="line">		<span class="number">78071625542U</span>L,</span><br><span class="line">		<span class="number">69577277816U</span>L,</span><br><span class="line">		<span class="number">57193980063U</span>L</span><br><span class="line">	&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		luaTable.Set&lt;<span class="built_in">int</span>, <span class="built_in">ulong</span>&gt;(i + <span class="number">1</span>, array[i+<span class="number">1</span>]);<span class="comment">//不进行判断,直接赋值密文数据,用于下面解密</span></span><br><span class="line">	&#125;</span><br><span class="line">	LuaTable luaTable2 = fdelegate(luaTable);<span class="comment">//encrypt被改为decrypt,调用后得到明文数据</span></span><br><span class="line">	luaTable2.Cast&lt;ArrayList&gt;();</span><br><span class="line">     <span class="built_in">string</span> text2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">4</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//直接获取明文字符</span></span><br><span class="line">        text2+=Encoding.UTF8.GetString(BitConverter.GetBytes(luaTable2.Get&lt;<span class="built_in">int</span>,<span class="built_in">ulong</span>&gt;(j))).Substring(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.input.text=text2;<span class="comment">//input框输出flag</span></span><br><span class="line">	<span class="keyword">this</span>.result.text = text2;</span><br><span class="line">	<span class="keyword">this</span>.luaenv.Dispose();</span><br><span class="line">	<span class="keyword">this</span>.luaenv = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dnSpy右键&gt;编辑方法 ,将代码修改后编译,注意点击文件保存模块,替换掉原来的Assembly-CSharp.dll</p>
<p>运行程序,点击check按钮即可得到flag</p>
<p><img src="/2023/10/25/%E6%AF%94%E8%B5%9B/N1CTF2023/N1CTF2023-N1LLua/7_getflag.png" alt="7_getflag"></p>
<p>所以最终的flag: <strong>n1ctf{E5c4p3_N1Lva7ua!}</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://www.52pojie.cn/thread-697540-1-1.html"> <strong>lua脚本解密2：unluac</strong></a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&mid=2247487628&idx=1&sn=0ae4475c7275c453be0368e7a95c4dc6&chksm=cf53d03af824592ca1cd2d27443b5f391de4cf1ce4da47f3e6bfd8576dac366d3204dc40b9f6&mpshare=1&scene=23&srcid=1025R8uzSdEVBPtqXQDdCty5&sharer_shareinfo=380b1d9d13bc4d7e7e37074d36d6901a&sharer_shareinfo_first=380b1d9d13bc4d7e7e37074d36d6901a#rd">2023 N1CTF writeup by Arr3stY0u</a></li>
</ol>
]]></content>
      <categories>
        <category>N1CTF2023</category>
      </categories>
      <tags>
        <tag>LuaRe</tag>
        <tag>UnityRe</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10-25日报</title>
    <url>/2023/10/26/%E6%97%A5%E6%8A%A5/2023-10/2023-10-25%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>复现了N1CTF N1LLua<br>Unity的资源文件存在resources.assets文件中<br>使用UABE工具提取</p>
<p>unluac可以将luac字节码反编译为lua代码<br>也可以将luac代码输出为汇编码<br>还可以将汇编码编译为luac代码</p>
]]></content>
      <categories>
        <category>2023年10月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>d810插件去ollvm混淆</title>
    <url>/2023/10/31/%E9%A2%98%E7%9B%AE/OLLVM/d810%E6%8F%92%E4%BB%B6%E5%8E%BBollvm%E6%B7%B7%E6%B7%86/</url>
    <content><![CDATA[<h1 id="d810插件"><a href="#d810插件" class="headerlink" title="d810插件"></a>d810插件</h1><p><a href="https://cloud.tencent.com/developer/article/1845335">IDA F5 增强插件，还我源代码（一）</a></p>
<p><a href="https://juejin.cn/post/6988722727678902286">IDA F5 增强插件: I Have a Dream （二）</a></p>
<p><a href="https://gitlab.com/eshard/d810">https://gitlab.com/eshard/d810</a></p>
<p><a href="https://github.com/Jamie793/IDA-Plugin-D810-Obfs">https://github.com/Jamie793/IDA-Plugin-D810-Obfs</a></p>
<h2 id="下载d810"><a href="#下载d810" class="headerlink" title="下载d810"></a>下载d810</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitlab.com/eshard/d810.git</span><br></pre></td></tr></table></figure>

<h2 id="安装d810"><a href="#安装d810" class="headerlink" title="安装d810"></a>安装d810</h2><p>将d810文件夹和d810.py文件一起放到ida的plugins目录下即可</p>
<h2 id="安装z3"><a href="#安装z3" class="headerlink" title="安装z3"></a>安装z3</h2><p>ida的python所在目录内打开cmd,安装z3-solver(我的ida7.7的python目录是IDA_Pro_7.7\python38)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install z3-solver</span><br></pre></td></tr></table></figure>

<h2 id="使用d810插件去混淆"><a href="#使用d810插件去混淆" class="headerlink" title="使用d810插件去混淆"></a>使用d810插件去混淆</h2><p>载入文件后,左上角file&gt;script file 选中d810.py文件</p>
<p>再按ctrl+shift+d即可看到过滤规则,选择unflating_ollvm</p>
<p><img src="/2023/10/31/%E9%A2%98%E7%9B%AE/OLLVM/d810%E6%8F%92%E4%BB%B6%E5%8E%BBollvm%E6%B7%B7%E6%B7%86/d810%E9%85%8D%E7%BD%AE.png" alt="d810配置"></p>
<p>再点击start 右侧红色Not Loaded变成绿色Loaded即可</p>
<p>之后找到需要去混淆的函数,按f5即可看到去除了混淆</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// [rsp+1E0h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+1E8h] [rbp-108h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+1ECh] [rbp-104h]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">48</span>]; <span class="comment">// [rsp+1F0h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">60</span>]; <span class="comment">// [rsp+220h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v10; <span class="comment">// [rsp+25Ch] [rbp-94h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+260h] [rbp-90h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+26Ch] [rbp-84h]</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// [rsp+272h] [rbp-7Eh]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v14; <span class="comment">// [rsp+273h] [rbp-7Dh]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [rsp+274h] [rbp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *v16; <span class="comment">// [rsp+278h] [rbp-78h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+284h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+288h] [rbp-68h]</span></span><br><span class="line">  <span class="type">bool</span> v19; <span class="comment">// [rsp+28Fh] [rbp-61h]</span></span><br><span class="line">  <span class="type">char</span> *v20; <span class="comment">// [rsp+290h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+298h] [rbp-58h]</span></span><br><span class="line">  <span class="type">bool</span> v22; <span class="comment">// [rsp+29Fh] [rbp-51h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+2A0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">bool</span> v24; <span class="comment">// [rsp+2AFh] [rbp-41h]</span></span><br><span class="line">  __int64 v25; <span class="comment">// [rsp+2B0h] [rbp-40h]</span></span><br><span class="line">  __int64 v26; <span class="comment">// [rsp+2B8h] [rbp-38h]</span></span><br><span class="line">  __int64 v27; <span class="comment">// [rsp+2C0h] [rbp-30h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+2C8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+2D0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// [rsp+2D4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// [rsp+2D8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [rsp+2E0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+2E4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">bool</span> v34; <span class="comment">// [rsp+2EBh] [rbp-5h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(s1, <span class="number">0</span>, <span class="keyword">sizeof</span>(s1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  v11 = s;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = i;</span><br><span class="line">    v13 = i &lt; <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= <span class="number">64</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v14 = s[i];</span><br><span class="line">    v15 = v14;</span><br><span class="line">    <span class="keyword">if</span> ( v14 == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v16 = &amp;s[i];</span><br><span class="line">      *v16 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = j;</span><br><span class="line">    v19 = j &lt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v20 = s;</span><br><span class="line">    v4 = *(_QWORD *)&amp;s[<span class="number">8</span> * j];</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; ; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = k;</span><br><span class="line">      v22 = k &lt; <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">64</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v23 = v4;</span><br><span class="line">      v24 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v25 = <span class="number">2</span> * v4;</span><br><span class="line">        v26 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 = (<span class="number">2</span> * v4) ^ <span class="number">0xB0004B7679FA26B3</span>LL;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v27 = v4;</span><br><span class="line">        v28 = <span class="number">2</span> * v4;</span><br><span class="line">        v4 *= <span class="number">2LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v29 = k;</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = <span class="number">8</span> * j;</span><br><span class="line">    v31 = &amp;s1[<span class="number">8</span> * j];</span><br><span class="line">    *(_QWORD *)v31 = v4;</span><br><span class="line">    v32 = j + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v33 = <span class="built_in">memcmp</span>(s1, &amp;unk_402170, <span class="number">0x30</span>uLL);</span><br><span class="line">  v34 = v33 != <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OLLVM</category>
      </categories>
      <tags>
        <tag>OLLVM</tag>
        <tag>ida插件</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-11-18日报</title>
    <url>/2023/11/18/%E6%97%A5%E6%8A%A5/2023-11/2023-11-18%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="完成任务"><a href="#完成任务" class="headerlink" title="完成任务"></a>完成任务</h1><ol>
<li><p>编译原理实验4-简单优先分析的实现<br>关键问题在于遇到&gt;关系时查找符号栈的句柄头</p>
</li>
<li><p>HECTF ezre和ez_android<br>这两题都不难,一题异或一题安卓动调得到map走迷宫</p>
</li>
<li><p>[SWPU2019]EasiestRe<br>这题非常有意思,使用到了双进程技术,借此可以学习调试器的基本原理并制作windwos调试器</p>
</li>
</ol>
]]></content>
      <categories>
        <category>2023年11月日报</category>
      </categories>
  </entry>
  <entry>
    <title>2023-11-21日报</title>
    <url>/2023/11/21/%E6%97%A5%E6%8A%A5/2023-11/2023-11-21%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="今天做的事"><a href="#今天做的事" class="headerlink" title="今天做的事"></a>今天做的事</h1><ol>
<li>教学论临时顶上辩论赛,感觉还可以<br>存在即合理,很多东西不是想的那样,偶尔试试了解一下拓宽知识面,学到的东西都有用</li>
<li>写完思想汇报和自我剖析材料<br>以后对于材料还是要早点写,不要拖延</li>
<li>上二十大专题党课<br>做笔记能力有待提高</li>
</ol>
]]></content>
      <categories>
        <category>2023年11月日报</category>
      </categories>
  </entry>
  <entry>
    <title>2023-11-22日报</title>
    <url>/2023/11/22/%E6%97%A5%E6%8A%A5/2023-11/2023-11-22%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="做的事"><a href="#做的事" class="headerlink" title="做的事"></a>做的事</h1><ol>
<li>政审材料跑了三趟还没成</li>
<li>游泳得大力出奇迹,多看看学习视频?</li>
<li>Unity Android逆向有点意思<br><a href="https://equinox-shame.github.io/2023/08/16/IL2CPP%20%E9%80%86%E5%90%91/#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">https://equinox-shame.github.io/2023/08/16/IL2CPP%20%E9%80%86%E5%90%91/#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86</a></li>
</ol>
<h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><ol>
<li>少看b站短视频,浪费时间</li>
<li>找人前先线上问问</li>
</ol>
]]></content>
      <categories>
        <category>2023年11月日报</category>
      </categories>
  </entry>
  <entry>
    <title>2023-11-23日报</title>
    <url>/2023/11/23/%E6%97%A5%E6%8A%A5/2023-11/2023-11-23%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="做的事"><a href="#做的事" class="headerlink" title="做的事"></a>做的事</h1><ol>
<li><p>编译原理课大概弄明白LR(0)分析的做题方法<br>创建DFA和创建分析表,还没总结</p>
</li>
<li><p>看了下IL2CPP逆向基础<br>pz爷写的是针不戳</p>
</li>
<li><p>抄了一部分党课笔记,效率不太够</p>
</li>
<li><p>看了一下英语语法新思维<br>名词的可数和不可数</p>
</li>
<li><p>整理了一下物品</p>
</li>
</ol>
<h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><ol>
<li>还是看b站短视频浪费了很多时间</li>
<li>晚上玩三国杀玩了不少时间</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天总的来来说也没做多少事,编译实验课应该好好总结下LR(0)的<br>吃完午饭回去应该早点休息,看b站看了快一个小时,睡醒也磨蹭了快一小时才去整理和洗衣服<br>上性科学资料带少了硬抄也没超多少<br>不过上完课拉几下引体,跑个步再去吃饭感觉不错<br>晚上德育看英语语法看的有点来劲,今天喜欢查常见词的英语表示<br>晚上回来纯玩了两个多小时</p>
<p>今天浪费了大概4小时</p>
]]></content>
      <categories>
        <category>2023年11月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-11-24日报</title>
    <url>/2023/11/24/%E6%97%A5%E6%8A%A5/2023-11/2023-11-24%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="做的事"><a href="#做的事" class="headerlink" title="做的事"></a>做的事</h1><ol>
<li>继续看了下英语新思维,做了几道题</li>
<li>简单写了下近期的日程</li>
<li>写了下寝期望</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天上午数据库,鼓捣半天bug出在没有连接数据库便执行了命令<br>下午军事史拿期中答题卡结果不用,白跑一趟,中午没睡好简单看了下英语<br>下课跑了一圈,回来玩三国杀,吃外卖,看视频,晚上睡醒还是在玩三国杀<br>11点才开始做点事,今天又混过去了<br>明天有两个比赛和各种事撞在一起,顺其自然</p>
]]></content>
      <categories>
        <category>2023年11月日报</category>
      </categories>
      <tags>
        <tag>日报</tag>
      </tags>
  </entry>
</search>
